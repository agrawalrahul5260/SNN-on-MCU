
mnist_cnn.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007648  080002d0  080002d0  000012d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00014ce0  08007918  08007918  00008918  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0801c5f8  0801c5f8  0001d5f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0801c600  0801c600  0001d600  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0801c604  0801c604  0001d604  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000060  24000000  0801c608  0001e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0000024c  24000060  0801c668  0001e060  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  240002ac  0801c668  0001e2ac  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0001e060  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001b482  00000000  00000000  0001e08e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 0000233a  00000000  00000000  00039510  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000010a0  00000000  00000000  0003b850  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00000d16  00000000  00000000  0003c8f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  000396b2  00000000  00000000  0003d606  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   000160c3  00000000  00000000  00076cb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0018362f  00000000  00000000  0008cd7b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  002103aa  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00004c6c  00000000  00000000  002103f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000063  00000000  00000000  0021505c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	@ (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	@ (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	@ (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	24000060 	.word	0x24000060
 80002ec:	00000000 	.word	0x00000000
 80002f0:	08007900 	.word	0x08007900

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	@ (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	@ (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	@ (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	24000064 	.word	0x24000064
 800030c:	08007900 	.word	0x08007900

08000310 <memchr>:
 8000310:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000314:	2a10      	cmp	r2, #16
 8000316:	db2b      	blt.n	8000370 <memchr+0x60>
 8000318:	f010 0f07 	tst.w	r0, #7
 800031c:	d008      	beq.n	8000330 <memchr+0x20>
 800031e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000322:	3a01      	subs	r2, #1
 8000324:	428b      	cmp	r3, r1
 8000326:	d02d      	beq.n	8000384 <memchr+0x74>
 8000328:	f010 0f07 	tst.w	r0, #7
 800032c:	b342      	cbz	r2, 8000380 <memchr+0x70>
 800032e:	d1f6      	bne.n	800031e <memchr+0xe>
 8000330:	b4f0      	push	{r4, r5, r6, r7}
 8000332:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000336:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800033a:	f022 0407 	bic.w	r4, r2, #7
 800033e:	f07f 0700 	mvns.w	r7, #0
 8000342:	2300      	movs	r3, #0
 8000344:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000348:	3c08      	subs	r4, #8
 800034a:	ea85 0501 	eor.w	r5, r5, r1
 800034e:	ea86 0601 	eor.w	r6, r6, r1
 8000352:	fa85 f547 	uadd8	r5, r5, r7
 8000356:	faa3 f587 	sel	r5, r3, r7
 800035a:	fa86 f647 	uadd8	r6, r6, r7
 800035e:	faa5 f687 	sel	r6, r5, r7
 8000362:	b98e      	cbnz	r6, 8000388 <memchr+0x78>
 8000364:	d1ee      	bne.n	8000344 <memchr+0x34>
 8000366:	bcf0      	pop	{r4, r5, r6, r7}
 8000368:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800036c:	f002 0207 	and.w	r2, r2, #7
 8000370:	b132      	cbz	r2, 8000380 <memchr+0x70>
 8000372:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000376:	3a01      	subs	r2, #1
 8000378:	ea83 0301 	eor.w	r3, r3, r1
 800037c:	b113      	cbz	r3, 8000384 <memchr+0x74>
 800037e:	d1f8      	bne.n	8000372 <memchr+0x62>
 8000380:	2000      	movs	r0, #0
 8000382:	4770      	bx	lr
 8000384:	3801      	subs	r0, #1
 8000386:	4770      	bx	lr
 8000388:	2d00      	cmp	r5, #0
 800038a:	bf06      	itte	eq
 800038c:	4635      	moveq	r5, r6
 800038e:	3803      	subeq	r0, #3
 8000390:	3807      	subne	r0, #7
 8000392:	f015 0f01 	tst.w	r5, #1
 8000396:	d107      	bne.n	80003a8 <memchr+0x98>
 8000398:	3001      	adds	r0, #1
 800039a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800039e:	bf02      	ittt	eq
 80003a0:	3001      	addeq	r0, #1
 80003a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80003a6:	3001      	addeq	r0, #1
 80003a8:	bcf0      	pop	{r4, r5, r6, r7}
 80003aa:	3801      	subs	r0, #1
 80003ac:	4770      	bx	lr
 80003ae:	bf00      	nop

080003b0 <__aeabi_uldivmod>:
 80003b0:	b953      	cbnz	r3, 80003c8 <__aeabi_uldivmod+0x18>
 80003b2:	b94a      	cbnz	r2, 80003c8 <__aeabi_uldivmod+0x18>
 80003b4:	2900      	cmp	r1, #0
 80003b6:	bf08      	it	eq
 80003b8:	2800      	cmpeq	r0, #0
 80003ba:	bf1c      	itt	ne
 80003bc:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80003c0:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80003c4:	f000 b96a 	b.w	800069c <__aeabi_idiv0>
 80003c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003d0:	f000 f806 	bl	80003e0 <__udivmoddi4>
 80003d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003dc:	b004      	add	sp, #16
 80003de:	4770      	bx	lr

080003e0 <__udivmoddi4>:
 80003e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003e4:	9d08      	ldr	r5, [sp, #32]
 80003e6:	460c      	mov	r4, r1
 80003e8:	2b00      	cmp	r3, #0
 80003ea:	d14e      	bne.n	800048a <__udivmoddi4+0xaa>
 80003ec:	4694      	mov	ip, r2
 80003ee:	458c      	cmp	ip, r1
 80003f0:	4686      	mov	lr, r0
 80003f2:	fab2 f282 	clz	r2, r2
 80003f6:	d962      	bls.n	80004be <__udivmoddi4+0xde>
 80003f8:	b14a      	cbz	r2, 800040e <__udivmoddi4+0x2e>
 80003fa:	f1c2 0320 	rsb	r3, r2, #32
 80003fe:	4091      	lsls	r1, r2
 8000400:	fa20 f303 	lsr.w	r3, r0, r3
 8000404:	fa0c fc02 	lsl.w	ip, ip, r2
 8000408:	4319      	orrs	r1, r3
 800040a:	fa00 fe02 	lsl.w	lr, r0, r2
 800040e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000412:	fa1f f68c 	uxth.w	r6, ip
 8000416:	fbb1 f4f7 	udiv	r4, r1, r7
 800041a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800041e:	fb07 1114 	mls	r1, r7, r4, r1
 8000422:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000426:	fb04 f106 	mul.w	r1, r4, r6
 800042a:	4299      	cmp	r1, r3
 800042c:	d90a      	bls.n	8000444 <__udivmoddi4+0x64>
 800042e:	eb1c 0303 	adds.w	r3, ip, r3
 8000432:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000436:	f080 8112 	bcs.w	800065e <__udivmoddi4+0x27e>
 800043a:	4299      	cmp	r1, r3
 800043c:	f240 810f 	bls.w	800065e <__udivmoddi4+0x27e>
 8000440:	3c02      	subs	r4, #2
 8000442:	4463      	add	r3, ip
 8000444:	1a59      	subs	r1, r3, r1
 8000446:	fa1f f38e 	uxth.w	r3, lr
 800044a:	fbb1 f0f7 	udiv	r0, r1, r7
 800044e:	fb07 1110 	mls	r1, r7, r0, r1
 8000452:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000456:	fb00 f606 	mul.w	r6, r0, r6
 800045a:	429e      	cmp	r6, r3
 800045c:	d90a      	bls.n	8000474 <__udivmoddi4+0x94>
 800045e:	eb1c 0303 	adds.w	r3, ip, r3
 8000462:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000466:	f080 80fc 	bcs.w	8000662 <__udivmoddi4+0x282>
 800046a:	429e      	cmp	r6, r3
 800046c:	f240 80f9 	bls.w	8000662 <__udivmoddi4+0x282>
 8000470:	4463      	add	r3, ip
 8000472:	3802      	subs	r0, #2
 8000474:	1b9b      	subs	r3, r3, r6
 8000476:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800047a:	2100      	movs	r1, #0
 800047c:	b11d      	cbz	r5, 8000486 <__udivmoddi4+0xa6>
 800047e:	40d3      	lsrs	r3, r2
 8000480:	2200      	movs	r2, #0
 8000482:	e9c5 3200 	strd	r3, r2, [r5]
 8000486:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800048a:	428b      	cmp	r3, r1
 800048c:	d905      	bls.n	800049a <__udivmoddi4+0xba>
 800048e:	b10d      	cbz	r5, 8000494 <__udivmoddi4+0xb4>
 8000490:	e9c5 0100 	strd	r0, r1, [r5]
 8000494:	2100      	movs	r1, #0
 8000496:	4608      	mov	r0, r1
 8000498:	e7f5      	b.n	8000486 <__udivmoddi4+0xa6>
 800049a:	fab3 f183 	clz	r1, r3
 800049e:	2900      	cmp	r1, #0
 80004a0:	d146      	bne.n	8000530 <__udivmoddi4+0x150>
 80004a2:	42a3      	cmp	r3, r4
 80004a4:	d302      	bcc.n	80004ac <__udivmoddi4+0xcc>
 80004a6:	4290      	cmp	r0, r2
 80004a8:	f0c0 80f0 	bcc.w	800068c <__udivmoddi4+0x2ac>
 80004ac:	1a86      	subs	r6, r0, r2
 80004ae:	eb64 0303 	sbc.w	r3, r4, r3
 80004b2:	2001      	movs	r0, #1
 80004b4:	2d00      	cmp	r5, #0
 80004b6:	d0e6      	beq.n	8000486 <__udivmoddi4+0xa6>
 80004b8:	e9c5 6300 	strd	r6, r3, [r5]
 80004bc:	e7e3      	b.n	8000486 <__udivmoddi4+0xa6>
 80004be:	2a00      	cmp	r2, #0
 80004c0:	f040 8090 	bne.w	80005e4 <__udivmoddi4+0x204>
 80004c4:	eba1 040c 	sub.w	r4, r1, ip
 80004c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004cc:	fa1f f78c 	uxth.w	r7, ip
 80004d0:	2101      	movs	r1, #1
 80004d2:	fbb4 f6f8 	udiv	r6, r4, r8
 80004d6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80004da:	fb08 4416 	mls	r4, r8, r6, r4
 80004de:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004e2:	fb07 f006 	mul.w	r0, r7, r6
 80004e6:	4298      	cmp	r0, r3
 80004e8:	d908      	bls.n	80004fc <__udivmoddi4+0x11c>
 80004ea:	eb1c 0303 	adds.w	r3, ip, r3
 80004ee:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 80004f2:	d202      	bcs.n	80004fa <__udivmoddi4+0x11a>
 80004f4:	4298      	cmp	r0, r3
 80004f6:	f200 80cd 	bhi.w	8000694 <__udivmoddi4+0x2b4>
 80004fa:	4626      	mov	r6, r4
 80004fc:	1a1c      	subs	r4, r3, r0
 80004fe:	fa1f f38e 	uxth.w	r3, lr
 8000502:	fbb4 f0f8 	udiv	r0, r4, r8
 8000506:	fb08 4410 	mls	r4, r8, r0, r4
 800050a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800050e:	fb00 f707 	mul.w	r7, r0, r7
 8000512:	429f      	cmp	r7, r3
 8000514:	d908      	bls.n	8000528 <__udivmoddi4+0x148>
 8000516:	eb1c 0303 	adds.w	r3, ip, r3
 800051a:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 800051e:	d202      	bcs.n	8000526 <__udivmoddi4+0x146>
 8000520:	429f      	cmp	r7, r3
 8000522:	f200 80b0 	bhi.w	8000686 <__udivmoddi4+0x2a6>
 8000526:	4620      	mov	r0, r4
 8000528:	1bdb      	subs	r3, r3, r7
 800052a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800052e:	e7a5      	b.n	800047c <__udivmoddi4+0x9c>
 8000530:	f1c1 0620 	rsb	r6, r1, #32
 8000534:	408b      	lsls	r3, r1
 8000536:	fa22 f706 	lsr.w	r7, r2, r6
 800053a:	431f      	orrs	r7, r3
 800053c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000540:	fa04 f301 	lsl.w	r3, r4, r1
 8000544:	ea43 030c 	orr.w	r3, r3, ip
 8000548:	40f4      	lsrs	r4, r6
 800054a:	fa00 f801 	lsl.w	r8, r0, r1
 800054e:	0c38      	lsrs	r0, r7, #16
 8000550:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000554:	fbb4 fef0 	udiv	lr, r4, r0
 8000558:	fa1f fc87 	uxth.w	ip, r7
 800055c:	fb00 441e 	mls	r4, r0, lr, r4
 8000560:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000564:	fb0e f90c 	mul.w	r9, lr, ip
 8000568:	45a1      	cmp	r9, r4
 800056a:	fa02 f201 	lsl.w	r2, r2, r1
 800056e:	d90a      	bls.n	8000586 <__udivmoddi4+0x1a6>
 8000570:	193c      	adds	r4, r7, r4
 8000572:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000576:	f080 8084 	bcs.w	8000682 <__udivmoddi4+0x2a2>
 800057a:	45a1      	cmp	r9, r4
 800057c:	f240 8081 	bls.w	8000682 <__udivmoddi4+0x2a2>
 8000580:	f1ae 0e02 	sub.w	lr, lr, #2
 8000584:	443c      	add	r4, r7
 8000586:	eba4 0409 	sub.w	r4, r4, r9
 800058a:	fa1f f983 	uxth.w	r9, r3
 800058e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000592:	fb00 4413 	mls	r4, r0, r3, r4
 8000596:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800059a:	fb03 fc0c 	mul.w	ip, r3, ip
 800059e:	45a4      	cmp	ip, r4
 80005a0:	d907      	bls.n	80005b2 <__udivmoddi4+0x1d2>
 80005a2:	193c      	adds	r4, r7, r4
 80005a4:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 80005a8:	d267      	bcs.n	800067a <__udivmoddi4+0x29a>
 80005aa:	45a4      	cmp	ip, r4
 80005ac:	d965      	bls.n	800067a <__udivmoddi4+0x29a>
 80005ae:	3b02      	subs	r3, #2
 80005b0:	443c      	add	r4, r7
 80005b2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80005b6:	fba0 9302 	umull	r9, r3, r0, r2
 80005ba:	eba4 040c 	sub.w	r4, r4, ip
 80005be:	429c      	cmp	r4, r3
 80005c0:	46ce      	mov	lr, r9
 80005c2:	469c      	mov	ip, r3
 80005c4:	d351      	bcc.n	800066a <__udivmoddi4+0x28a>
 80005c6:	d04e      	beq.n	8000666 <__udivmoddi4+0x286>
 80005c8:	b155      	cbz	r5, 80005e0 <__udivmoddi4+0x200>
 80005ca:	ebb8 030e 	subs.w	r3, r8, lr
 80005ce:	eb64 040c 	sbc.w	r4, r4, ip
 80005d2:	fa04 f606 	lsl.w	r6, r4, r6
 80005d6:	40cb      	lsrs	r3, r1
 80005d8:	431e      	orrs	r6, r3
 80005da:	40cc      	lsrs	r4, r1
 80005dc:	e9c5 6400 	strd	r6, r4, [r5]
 80005e0:	2100      	movs	r1, #0
 80005e2:	e750      	b.n	8000486 <__udivmoddi4+0xa6>
 80005e4:	f1c2 0320 	rsb	r3, r2, #32
 80005e8:	fa20 f103 	lsr.w	r1, r0, r3
 80005ec:	fa0c fc02 	lsl.w	ip, ip, r2
 80005f0:	fa24 f303 	lsr.w	r3, r4, r3
 80005f4:	4094      	lsls	r4, r2
 80005f6:	430c      	orrs	r4, r1
 80005f8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80005fc:	fa00 fe02 	lsl.w	lr, r0, r2
 8000600:	fa1f f78c 	uxth.w	r7, ip
 8000604:	fbb3 f0f8 	udiv	r0, r3, r8
 8000608:	fb08 3110 	mls	r1, r8, r0, r3
 800060c:	0c23      	lsrs	r3, r4, #16
 800060e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000612:	fb00 f107 	mul.w	r1, r0, r7
 8000616:	4299      	cmp	r1, r3
 8000618:	d908      	bls.n	800062c <__udivmoddi4+0x24c>
 800061a:	eb1c 0303 	adds.w	r3, ip, r3
 800061e:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000622:	d22c      	bcs.n	800067e <__udivmoddi4+0x29e>
 8000624:	4299      	cmp	r1, r3
 8000626:	d92a      	bls.n	800067e <__udivmoddi4+0x29e>
 8000628:	3802      	subs	r0, #2
 800062a:	4463      	add	r3, ip
 800062c:	1a5b      	subs	r3, r3, r1
 800062e:	b2a4      	uxth	r4, r4
 8000630:	fbb3 f1f8 	udiv	r1, r3, r8
 8000634:	fb08 3311 	mls	r3, r8, r1, r3
 8000638:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800063c:	fb01 f307 	mul.w	r3, r1, r7
 8000640:	42a3      	cmp	r3, r4
 8000642:	d908      	bls.n	8000656 <__udivmoddi4+0x276>
 8000644:	eb1c 0404 	adds.w	r4, ip, r4
 8000648:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 800064c:	d213      	bcs.n	8000676 <__udivmoddi4+0x296>
 800064e:	42a3      	cmp	r3, r4
 8000650:	d911      	bls.n	8000676 <__udivmoddi4+0x296>
 8000652:	3902      	subs	r1, #2
 8000654:	4464      	add	r4, ip
 8000656:	1ae4      	subs	r4, r4, r3
 8000658:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800065c:	e739      	b.n	80004d2 <__udivmoddi4+0xf2>
 800065e:	4604      	mov	r4, r0
 8000660:	e6f0      	b.n	8000444 <__udivmoddi4+0x64>
 8000662:	4608      	mov	r0, r1
 8000664:	e706      	b.n	8000474 <__udivmoddi4+0x94>
 8000666:	45c8      	cmp	r8, r9
 8000668:	d2ae      	bcs.n	80005c8 <__udivmoddi4+0x1e8>
 800066a:	ebb9 0e02 	subs.w	lr, r9, r2
 800066e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000672:	3801      	subs	r0, #1
 8000674:	e7a8      	b.n	80005c8 <__udivmoddi4+0x1e8>
 8000676:	4631      	mov	r1, r6
 8000678:	e7ed      	b.n	8000656 <__udivmoddi4+0x276>
 800067a:	4603      	mov	r3, r0
 800067c:	e799      	b.n	80005b2 <__udivmoddi4+0x1d2>
 800067e:	4630      	mov	r0, r6
 8000680:	e7d4      	b.n	800062c <__udivmoddi4+0x24c>
 8000682:	46d6      	mov	lr, sl
 8000684:	e77f      	b.n	8000586 <__udivmoddi4+0x1a6>
 8000686:	4463      	add	r3, ip
 8000688:	3802      	subs	r0, #2
 800068a:	e74d      	b.n	8000528 <__udivmoddi4+0x148>
 800068c:	4606      	mov	r6, r0
 800068e:	4623      	mov	r3, r4
 8000690:	4608      	mov	r0, r1
 8000692:	e70f      	b.n	80004b4 <__udivmoddi4+0xd4>
 8000694:	3e02      	subs	r6, #2
 8000696:	4463      	add	r3, ip
 8000698:	e730      	b.n	80004fc <__udivmoddi4+0x11c>
 800069a:	bf00      	nop

0800069c <__aeabi_idiv0>:
 800069c:	4770      	bx	lr
 800069e:	bf00      	nop

080006a0 <relu>:
/* USER CODE BEGIN PD */
#define INPUT_SIZE 28

#define UNROLL_FACTOR 4

void relu(float* input, int size) {
 80006a0:	b480      	push	{r7}
 80006a2:	b085      	sub	sp, #20
 80006a4:	af00      	add	r7, sp, #0
 80006a6:	6078      	str	r0, [r7, #4]
 80006a8:	6039      	str	r1, [r7, #0]
    int i;
    int unrolled_size = size / UNROLL_FACTOR * UNROLL_FACTOR;
 80006aa:	683b      	ldr	r3, [r7, #0]
 80006ac:	2b00      	cmp	r3, #0
 80006ae:	da00      	bge.n	80006b2 <relu+0x12>
 80006b0:	3303      	adds	r3, #3
 80006b2:	109b      	asrs	r3, r3, #2
 80006b4:	009b      	lsls	r3, r3, #2
 80006b6:	60bb      	str	r3, [r7, #8]
    for (i = 0; i < unrolled_size; i += UNROLL_FACTOR) {
 80006b8:	2300      	movs	r3, #0
 80006ba:	60fb      	str	r3, [r7, #12]
 80006bc:	e050      	b.n	8000760 <relu+0xc0>
        if (input[i] < 0) input[i] = 0;
 80006be:	68fb      	ldr	r3, [r7, #12]
 80006c0:	009b      	lsls	r3, r3, #2
 80006c2:	687a      	ldr	r2, [r7, #4]
 80006c4:	4413      	add	r3, r2
 80006c6:	edd3 7a00 	vldr	s15, [r3]
 80006ca:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80006ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80006d2:	d506      	bpl.n	80006e2 <relu+0x42>
 80006d4:	68fb      	ldr	r3, [r7, #12]
 80006d6:	009b      	lsls	r3, r3, #2
 80006d8:	687a      	ldr	r2, [r7, #4]
 80006da:	4413      	add	r3, r2
 80006dc:	f04f 0200 	mov.w	r2, #0
 80006e0:	601a      	str	r2, [r3, #0]
        if (input[i + 1] < 0) input[i + 1] = 0;
 80006e2:	68fb      	ldr	r3, [r7, #12]
 80006e4:	3301      	adds	r3, #1
 80006e6:	009b      	lsls	r3, r3, #2
 80006e8:	687a      	ldr	r2, [r7, #4]
 80006ea:	4413      	add	r3, r2
 80006ec:	edd3 7a00 	vldr	s15, [r3]
 80006f0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80006f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80006f8:	d507      	bpl.n	800070a <relu+0x6a>
 80006fa:	68fb      	ldr	r3, [r7, #12]
 80006fc:	3301      	adds	r3, #1
 80006fe:	009b      	lsls	r3, r3, #2
 8000700:	687a      	ldr	r2, [r7, #4]
 8000702:	4413      	add	r3, r2
 8000704:	f04f 0200 	mov.w	r2, #0
 8000708:	601a      	str	r2, [r3, #0]
        if (input[i + 2] < 0) input[i + 2] = 0;
 800070a:	68fb      	ldr	r3, [r7, #12]
 800070c:	3302      	adds	r3, #2
 800070e:	009b      	lsls	r3, r3, #2
 8000710:	687a      	ldr	r2, [r7, #4]
 8000712:	4413      	add	r3, r2
 8000714:	edd3 7a00 	vldr	s15, [r3]
 8000718:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800071c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000720:	d507      	bpl.n	8000732 <relu+0x92>
 8000722:	68fb      	ldr	r3, [r7, #12]
 8000724:	3302      	adds	r3, #2
 8000726:	009b      	lsls	r3, r3, #2
 8000728:	687a      	ldr	r2, [r7, #4]
 800072a:	4413      	add	r3, r2
 800072c:	f04f 0200 	mov.w	r2, #0
 8000730:	601a      	str	r2, [r3, #0]
        if (input[i + 3] < 0) input[i + 3] = 0;
 8000732:	68fb      	ldr	r3, [r7, #12]
 8000734:	3303      	adds	r3, #3
 8000736:	009b      	lsls	r3, r3, #2
 8000738:	687a      	ldr	r2, [r7, #4]
 800073a:	4413      	add	r3, r2
 800073c:	edd3 7a00 	vldr	s15, [r3]
 8000740:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000744:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000748:	d507      	bpl.n	800075a <relu+0xba>
 800074a:	68fb      	ldr	r3, [r7, #12]
 800074c:	3303      	adds	r3, #3
 800074e:	009b      	lsls	r3, r3, #2
 8000750:	687a      	ldr	r2, [r7, #4]
 8000752:	4413      	add	r3, r2
 8000754:	f04f 0200 	mov.w	r2, #0
 8000758:	601a      	str	r2, [r3, #0]
    for (i = 0; i < unrolled_size; i += UNROLL_FACTOR) {
 800075a:	68fb      	ldr	r3, [r7, #12]
 800075c:	3304      	adds	r3, #4
 800075e:	60fb      	str	r3, [r7, #12]
 8000760:	68fa      	ldr	r2, [r7, #12]
 8000762:	68bb      	ldr	r3, [r7, #8]
 8000764:	429a      	cmp	r2, r3
 8000766:	dbaa      	blt.n	80006be <relu+0x1e>
    }
    for (; i < size; ++i) {
 8000768:	e014      	b.n	8000794 <relu+0xf4>
        if (input[i] < 0) input[i] = 0;
 800076a:	68fb      	ldr	r3, [r7, #12]
 800076c:	009b      	lsls	r3, r3, #2
 800076e:	687a      	ldr	r2, [r7, #4]
 8000770:	4413      	add	r3, r2
 8000772:	edd3 7a00 	vldr	s15, [r3]
 8000776:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800077a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800077e:	d506      	bpl.n	800078e <relu+0xee>
 8000780:	68fb      	ldr	r3, [r7, #12]
 8000782:	009b      	lsls	r3, r3, #2
 8000784:	687a      	ldr	r2, [r7, #4]
 8000786:	4413      	add	r3, r2
 8000788:	f04f 0200 	mov.w	r2, #0
 800078c:	601a      	str	r2, [r3, #0]
    for (; i < size; ++i) {
 800078e:	68fb      	ldr	r3, [r7, #12]
 8000790:	3301      	adds	r3, #1
 8000792:	60fb      	str	r3, [r7, #12]
 8000794:	68fa      	ldr	r2, [r7, #12]
 8000796:	683b      	ldr	r3, [r7, #0]
 8000798:	429a      	cmp	r2, r3
 800079a:	dbe6      	blt.n	800076a <relu+0xca>
    }
}
 800079c:	bf00      	nop
 800079e:	bf00      	nop
 80007a0:	3714      	adds	r7, #20
 80007a2:	46bd      	mov	sp, r7
 80007a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a8:	4770      	bx	lr

080007aa <conv2d>:

void conv2d(const float* input, float* output, const float* weights, const float* biases, int in_channels, int out_channels, int input_size, int kernel_size, int stride, int padding) {
 80007aa:	b580      	push	{r7, lr}
 80007ac:	b08e      	sub	sp, #56	@ 0x38
 80007ae:	af00      	add	r7, sp, #0
 80007b0:	60f8      	str	r0, [r7, #12]
 80007b2:	60b9      	str	r1, [r7, #8]
 80007b4:	607a      	str	r2, [r7, #4]
 80007b6:	603b      	str	r3, [r7, #0]
    int output_size = (input_size - kernel_size + 2 * padding) / stride + 1;
 80007b8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80007ba:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80007bc:	1ad2      	subs	r2, r2, r3
 80007be:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80007c0:	005b      	lsls	r3, r3, #1
 80007c2:	441a      	add	r2, r3
 80007c4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80007c6:	fb92 f3f3 	sdiv	r3, r2, r3
 80007ca:	3301      	adds	r3, #1
 80007cc:	61bb      	str	r3, [r7, #24]

    memset(output, 0, sizeof(float) * out_channels * output_size * output_size);
 80007ce:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80007d0:	69ba      	ldr	r2, [r7, #24]
 80007d2:	fb02 f303 	mul.w	r3, r2, r3
 80007d6:	69ba      	ldr	r2, [r7, #24]
 80007d8:	fb02 f303 	mul.w	r3, r2, r3
 80007dc:	009b      	lsls	r3, r3, #2
 80007de:	461a      	mov	r2, r3
 80007e0:	2100      	movs	r1, #0
 80007e2:	68b8      	ldr	r0, [r7, #8]
 80007e4:	f006 fc0c 	bl	8007000 <memset>

    for (int oc = 0; oc < out_channels; ++oc) {
 80007e8:	2300      	movs	r3, #0
 80007ea:	637b      	str	r3, [r7, #52]	@ 0x34
 80007ec:	e0a8      	b.n	8000940 <conv2d+0x196>
        for (int oh = 0; oh < output_size; ++oh) {
 80007ee:	2300      	movs	r3, #0
 80007f0:	633b      	str	r3, [r7, #48]	@ 0x30
 80007f2:	e09d      	b.n	8000930 <conv2d+0x186>
            for (int ow = 0; ow < output_size; ++ow) {
 80007f4:	2300      	movs	r3, #0
 80007f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80007f8:	e092      	b.n	8000920 <conv2d+0x176>
                float sum = biases[oc];
 80007fa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80007fc:	009b      	lsls	r3, r3, #2
 80007fe:	683a      	ldr	r2, [r7, #0]
 8000800:	4413      	add	r3, r2
 8000802:	681b      	ldr	r3, [r3, #0]
 8000804:	62bb      	str	r3, [r7, #40]	@ 0x28
                for (int ic = 0; ic < in_channels; ++ic) {
 8000806:	2300      	movs	r3, #0
 8000808:	627b      	str	r3, [r7, #36]	@ 0x24
 800080a:	e06f      	b.n	80008ec <conv2d+0x142>
                    for (int kh = 0; kh < kernel_size; ++kh) {
 800080c:	2300      	movs	r3, #0
 800080e:	623b      	str	r3, [r7, #32]
 8000810:	e065      	b.n	80008de <conv2d+0x134>
                        for (int kw = 0; kw < kernel_size; ++kw) {
 8000812:	2300      	movs	r3, #0
 8000814:	61fb      	str	r3, [r7, #28]
 8000816:	e05b      	b.n	80008d0 <conv2d+0x126>
                            int ih = oh * stride + kh - padding;
 8000818:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800081a:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800081c:	fb03 f202 	mul.w	r2, r3, r2
 8000820:	6a3b      	ldr	r3, [r7, #32]
 8000822:	441a      	add	r2, r3
 8000824:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8000826:	1ad3      	subs	r3, r2, r3
 8000828:	617b      	str	r3, [r7, #20]
                            int iw = ow * stride + kw - padding;
 800082a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800082c:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800082e:	fb03 f202 	mul.w	r2, r3, r2
 8000832:	69fb      	ldr	r3, [r7, #28]
 8000834:	441a      	add	r2, r3
 8000836:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8000838:	1ad3      	subs	r3, r2, r3
 800083a:	613b      	str	r3, [r7, #16]
                            if (ih >= 0 && ih < input_size && iw >= 0 && iw < input_size) {
 800083c:	697b      	ldr	r3, [r7, #20]
 800083e:	2b00      	cmp	r3, #0
 8000840:	db43      	blt.n	80008ca <conv2d+0x120>
 8000842:	697a      	ldr	r2, [r7, #20]
 8000844:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8000846:	429a      	cmp	r2, r3
 8000848:	da3f      	bge.n	80008ca <conv2d+0x120>
 800084a:	693b      	ldr	r3, [r7, #16]
 800084c:	2b00      	cmp	r3, #0
 800084e:	db3c      	blt.n	80008ca <conv2d+0x120>
 8000850:	693a      	ldr	r2, [r7, #16]
 8000852:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8000854:	429a      	cmp	r2, r3
 8000856:	da38      	bge.n	80008ca <conv2d+0x120>
                                sum += input[ic * input_size * input_size + ih * input_size + iw] * weights[oc * in_channels * kernel_size * kernel_size + ic * kernel_size * kernel_size + kh * kernel_size + kw];
 8000858:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800085a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800085c:	fb02 f303 	mul.w	r3, r2, r3
 8000860:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8000862:	fb03 f202 	mul.w	r2, r3, r2
 8000866:	697b      	ldr	r3, [r7, #20]
 8000868:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 800086a:	fb01 f303 	mul.w	r3, r1, r3
 800086e:	441a      	add	r2, r3
 8000870:	693b      	ldr	r3, [r7, #16]
 8000872:	4413      	add	r3, r2
 8000874:	009b      	lsls	r3, r3, #2
 8000876:	68fa      	ldr	r2, [r7, #12]
 8000878:	4413      	add	r3, r2
 800087a:	ed93 7a00 	vldr	s14, [r3]
 800087e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000880:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8000882:	fb02 f303 	mul.w	r3, r2, r3
 8000886:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8000888:	fb02 f303 	mul.w	r3, r2, r3
 800088c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800088e:	fb03 f202 	mul.w	r2, r3, r2
 8000892:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000894:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8000896:	fb01 f303 	mul.w	r3, r1, r3
 800089a:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 800089c:	fb01 f303 	mul.w	r3, r1, r3
 80008a0:	441a      	add	r2, r3
 80008a2:	6a3b      	ldr	r3, [r7, #32]
 80008a4:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 80008a6:	fb01 f303 	mul.w	r3, r1, r3
 80008aa:	441a      	add	r2, r3
 80008ac:	69fb      	ldr	r3, [r7, #28]
 80008ae:	4413      	add	r3, r2
 80008b0:	009b      	lsls	r3, r3, #2
 80008b2:	687a      	ldr	r2, [r7, #4]
 80008b4:	4413      	add	r3, r2
 80008b6:	edd3 7a00 	vldr	s15, [r3]
 80008ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80008be:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 80008c2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80008c6:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
                        for (int kw = 0; kw < kernel_size; ++kw) {
 80008ca:	69fb      	ldr	r3, [r7, #28]
 80008cc:	3301      	adds	r3, #1
 80008ce:	61fb      	str	r3, [r7, #28]
 80008d0:	69fa      	ldr	r2, [r7, #28]
 80008d2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80008d4:	429a      	cmp	r2, r3
 80008d6:	db9f      	blt.n	8000818 <conv2d+0x6e>
                    for (int kh = 0; kh < kernel_size; ++kh) {
 80008d8:	6a3b      	ldr	r3, [r7, #32]
 80008da:	3301      	adds	r3, #1
 80008dc:	623b      	str	r3, [r7, #32]
 80008de:	6a3a      	ldr	r2, [r7, #32]
 80008e0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80008e2:	429a      	cmp	r2, r3
 80008e4:	db95      	blt.n	8000812 <conv2d+0x68>
                for (int ic = 0; ic < in_channels; ++ic) {
 80008e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80008e8:	3301      	adds	r3, #1
 80008ea:	627b      	str	r3, [r7, #36]	@ 0x24
 80008ec:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80008ee:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80008f0:	429a      	cmp	r2, r3
 80008f2:	db8b      	blt.n	800080c <conv2d+0x62>
                            }
                        }
                    }
                }
                output[oc * output_size * output_size + oh * output_size + ow] = sum;
 80008f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80008f6:	69ba      	ldr	r2, [r7, #24]
 80008f8:	fb02 f303 	mul.w	r3, r2, r3
 80008fc:	69ba      	ldr	r2, [r7, #24]
 80008fe:	fb03 f202 	mul.w	r2, r3, r2
 8000902:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000904:	69b9      	ldr	r1, [r7, #24]
 8000906:	fb01 f303 	mul.w	r3, r1, r3
 800090a:	441a      	add	r2, r3
 800090c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800090e:	4413      	add	r3, r2
 8000910:	009b      	lsls	r3, r3, #2
 8000912:	68ba      	ldr	r2, [r7, #8]
 8000914:	4413      	add	r3, r2
 8000916:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8000918:	601a      	str	r2, [r3, #0]
            for (int ow = 0; ow < output_size; ++ow) {
 800091a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800091c:	3301      	adds	r3, #1
 800091e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000920:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8000922:	69bb      	ldr	r3, [r7, #24]
 8000924:	429a      	cmp	r2, r3
 8000926:	f6ff af68 	blt.w	80007fa <conv2d+0x50>
        for (int oh = 0; oh < output_size; ++oh) {
 800092a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800092c:	3301      	adds	r3, #1
 800092e:	633b      	str	r3, [r7, #48]	@ 0x30
 8000930:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8000932:	69bb      	ldr	r3, [r7, #24]
 8000934:	429a      	cmp	r2, r3
 8000936:	f6ff af5d 	blt.w	80007f4 <conv2d+0x4a>
    for (int oc = 0; oc < out_channels; ++oc) {
 800093a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800093c:	3301      	adds	r3, #1
 800093e:	637b      	str	r3, [r7, #52]	@ 0x34
 8000940:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8000942:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000944:	429a      	cmp	r2, r3
 8000946:	f6ff af52 	blt.w	80007ee <conv2d+0x44>
            }
        }
    }
}
 800094a:	bf00      	nop
 800094c:	bf00      	nop
 800094e:	3738      	adds	r7, #56	@ 0x38
 8000950:	46bd      	mov	sp, r7
 8000952:	bd80      	pop	{r7, pc}

08000954 <maxpool2d>:

void maxpool2d(float* input, float* output, int in_channels, int input_size, int kernel_size, int stride) {
 8000954:	b480      	push	{r7}
 8000956:	b091      	sub	sp, #68	@ 0x44
 8000958:	af00      	add	r7, sp, #0
 800095a:	60f8      	str	r0, [r7, #12]
 800095c:	60b9      	str	r1, [r7, #8]
 800095e:	607a      	str	r2, [r7, #4]
 8000960:	603b      	str	r3, [r7, #0]
    int output_size = (input_size - kernel_size) / stride + 1;
 8000962:	683a      	ldr	r2, [r7, #0]
 8000964:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8000966:	1ad2      	subs	r2, r2, r3
 8000968:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800096a:	fb92 f3f3 	sdiv	r3, r2, r3
 800096e:	3301      	adds	r3, #1
 8000970:	627b      	str	r3, [r7, #36]	@ 0x24

    for (int ic = 0; ic < in_channels; ++ic) {
 8000972:	2300      	movs	r3, #0
 8000974:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8000976:	e089      	b.n	8000a8c <maxpool2d+0x138>
        for (int oh = 0; oh < output_size; ++oh) {
 8000978:	2300      	movs	r3, #0
 800097a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800097c:	e07e      	b.n	8000a7c <maxpool2d+0x128>
            for (int ow = 0; ow < output_size; ++ow) {
 800097e:	2300      	movs	r3, #0
 8000980:	637b      	str	r3, [r7, #52]	@ 0x34
 8000982:	e074      	b.n	8000a6e <maxpool2d+0x11a>
                int ih = oh * stride;
 8000984:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000986:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8000988:	fb02 f303 	mul.w	r3, r2, r3
 800098c:	623b      	str	r3, [r7, #32]
                int iw = ow * stride;
 800098e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000990:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8000992:	fb02 f303 	mul.w	r3, r2, r3
 8000996:	61fb      	str	r3, [r7, #28]
                float max_value = input[ic * input_size * input_size + ih * input_size + iw];
 8000998:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800099a:	683a      	ldr	r2, [r7, #0]
 800099c:	fb02 f303 	mul.w	r3, r2, r3
 80009a0:	683a      	ldr	r2, [r7, #0]
 80009a2:	fb03 f202 	mul.w	r2, r3, r2
 80009a6:	6a3b      	ldr	r3, [r7, #32]
 80009a8:	6839      	ldr	r1, [r7, #0]
 80009aa:	fb01 f303 	mul.w	r3, r1, r3
 80009ae:	441a      	add	r2, r3
 80009b0:	69fb      	ldr	r3, [r7, #28]
 80009b2:	4413      	add	r3, r2
 80009b4:	009b      	lsls	r3, r3, #2
 80009b6:	68fa      	ldr	r2, [r7, #12]
 80009b8:	4413      	add	r3, r2
 80009ba:	681b      	ldr	r3, [r3, #0]
 80009bc:	633b      	str	r3, [r7, #48]	@ 0x30
                for (int kh = 0; kh < kernel_size; ++kh) {
 80009be:	2300      	movs	r3, #0
 80009c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80009c2:	e03a      	b.n	8000a3a <maxpool2d+0xe6>
                    for (int kw = 0; kw < kernel_size; ++kw) {
 80009c4:	2300      	movs	r3, #0
 80009c6:	62bb      	str	r3, [r7, #40]	@ 0x28
 80009c8:	e030      	b.n	8000a2c <maxpool2d+0xd8>
                        int nih = ih + kh;
 80009ca:	6a3a      	ldr	r2, [r7, #32]
 80009cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80009ce:	4413      	add	r3, r2
 80009d0:	61bb      	str	r3, [r7, #24]
                        int niw = iw + kw;
 80009d2:	69fa      	ldr	r2, [r7, #28]
 80009d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80009d6:	4413      	add	r3, r2
 80009d8:	617b      	str	r3, [r7, #20]
                        if (nih < input_size && niw < input_size) {
 80009da:	69ba      	ldr	r2, [r7, #24]
 80009dc:	683b      	ldr	r3, [r7, #0]
 80009de:	429a      	cmp	r2, r3
 80009e0:	da21      	bge.n	8000a26 <maxpool2d+0xd2>
 80009e2:	697a      	ldr	r2, [r7, #20]
 80009e4:	683b      	ldr	r3, [r7, #0]
 80009e6:	429a      	cmp	r2, r3
 80009e8:	da1d      	bge.n	8000a26 <maxpool2d+0xd2>
                            float value = input[ic * input_size * input_size + nih * input_size + niw];
 80009ea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80009ec:	683a      	ldr	r2, [r7, #0]
 80009ee:	fb02 f303 	mul.w	r3, r2, r3
 80009f2:	683a      	ldr	r2, [r7, #0]
 80009f4:	fb03 f202 	mul.w	r2, r3, r2
 80009f8:	69bb      	ldr	r3, [r7, #24]
 80009fa:	6839      	ldr	r1, [r7, #0]
 80009fc:	fb01 f303 	mul.w	r3, r1, r3
 8000a00:	441a      	add	r2, r3
 8000a02:	697b      	ldr	r3, [r7, #20]
 8000a04:	4413      	add	r3, r2
 8000a06:	009b      	lsls	r3, r3, #2
 8000a08:	68fa      	ldr	r2, [r7, #12]
 8000a0a:	4413      	add	r3, r2
 8000a0c:	681b      	ldr	r3, [r3, #0]
 8000a0e:	613b      	str	r3, [r7, #16]
                            if (value > max_value) {
 8000a10:	ed97 7a04 	vldr	s14, [r7, #16]
 8000a14:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8000a18:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000a1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000a20:	dd01      	ble.n	8000a26 <maxpool2d+0xd2>
                                max_value = value;
 8000a22:	693b      	ldr	r3, [r7, #16]
 8000a24:	633b      	str	r3, [r7, #48]	@ 0x30
                    for (int kw = 0; kw < kernel_size; ++kw) {
 8000a26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000a28:	3301      	adds	r3, #1
 8000a2a:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000a2c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8000a2e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8000a30:	429a      	cmp	r2, r3
 8000a32:	dbca      	blt.n	80009ca <maxpool2d+0x76>
                for (int kh = 0; kh < kernel_size; ++kh) {
 8000a34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000a36:	3301      	adds	r3, #1
 8000a38:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000a3a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8000a3c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8000a3e:	429a      	cmp	r2, r3
 8000a40:	dbc0      	blt.n	80009c4 <maxpool2d+0x70>
                            }
                        }
                    }
                }
                output[ic * output_size * output_size + oh * output_size + ow] = max_value;
 8000a42:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000a44:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000a46:	fb02 f303 	mul.w	r3, r2, r3
 8000a4a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000a4c:	fb03 f202 	mul.w	r2, r3, r2
 8000a50:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000a52:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8000a54:	fb01 f303 	mul.w	r3, r1, r3
 8000a58:	441a      	add	r2, r3
 8000a5a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000a5c:	4413      	add	r3, r2
 8000a5e:	009b      	lsls	r3, r3, #2
 8000a60:	68ba      	ldr	r2, [r7, #8]
 8000a62:	4413      	add	r3, r2
 8000a64:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8000a66:	601a      	str	r2, [r3, #0]
            for (int ow = 0; ow < output_size; ++ow) {
 8000a68:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000a6a:	3301      	adds	r3, #1
 8000a6c:	637b      	str	r3, [r7, #52]	@ 0x34
 8000a6e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8000a70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a72:	429a      	cmp	r2, r3
 8000a74:	db86      	blt.n	8000984 <maxpool2d+0x30>
        for (int oh = 0; oh < output_size; ++oh) {
 8000a76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000a78:	3301      	adds	r3, #1
 8000a7a:	63bb      	str	r3, [r7, #56]	@ 0x38
 8000a7c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8000a7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a80:	429a      	cmp	r2, r3
 8000a82:	f6ff af7c 	blt.w	800097e <maxpool2d+0x2a>
    for (int ic = 0; ic < in_channels; ++ic) {
 8000a86:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000a88:	3301      	adds	r3, #1
 8000a8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8000a8c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	429a      	cmp	r2, r3
 8000a92:	f6ff af71 	blt.w	8000978 <maxpool2d+0x24>
            }
        }
    }
}
 8000a96:	bf00      	nop
 8000a98:	bf00      	nop
 8000a9a:	3744      	adds	r7, #68	@ 0x44
 8000a9c:	46bd      	mov	sp, r7
 8000a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa2:	4770      	bx	lr

08000aa4 <linear>:

void linear(float* input, float* output, const float* weights, const float* biases, int in_features, int out_features) {
 8000aa4:	b480      	push	{r7}
 8000aa6:	b089      	sub	sp, #36	@ 0x24
 8000aa8:	af00      	add	r7, sp, #0
 8000aaa:	60f8      	str	r0, [r7, #12]
 8000aac:	60b9      	str	r1, [r7, #8]
 8000aae:	607a      	str	r2, [r7, #4]
 8000ab0:	603b      	str	r3, [r7, #0]
    for (int of = 0; of < out_features; ++of) {
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	61fb      	str	r3, [r7, #28]
 8000ab6:	e0a4      	b.n	8000c02 <linear+0x15e>
        float sum = biases[of];
 8000ab8:	69fb      	ldr	r3, [r7, #28]
 8000aba:	009b      	lsls	r3, r3, #2
 8000abc:	683a      	ldr	r2, [r7, #0]
 8000abe:	4413      	add	r3, r2
 8000ac0:	681b      	ldr	r3, [r3, #0]
 8000ac2:	61bb      	str	r3, [r7, #24]
        int inf;
        for (inf = 0; inf <= in_features - UNROLL_FACTOR; inf += UNROLL_FACTOR) {
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	617b      	str	r3, [r7, #20]
 8000ac8:	e06c      	b.n	8000ba4 <linear+0x100>
            sum += input[inf] * weights[of * in_features + inf];
 8000aca:	697b      	ldr	r3, [r7, #20]
 8000acc:	009b      	lsls	r3, r3, #2
 8000ace:	68fa      	ldr	r2, [r7, #12]
 8000ad0:	4413      	add	r3, r2
 8000ad2:	ed93 7a00 	vldr	s14, [r3]
 8000ad6:	69fb      	ldr	r3, [r7, #28]
 8000ad8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8000ada:	fb03 f202 	mul.w	r2, r3, r2
 8000ade:	697b      	ldr	r3, [r7, #20]
 8000ae0:	4413      	add	r3, r2
 8000ae2:	009b      	lsls	r3, r3, #2
 8000ae4:	687a      	ldr	r2, [r7, #4]
 8000ae6:	4413      	add	r3, r2
 8000ae8:	edd3 7a00 	vldr	s15, [r3]
 8000aec:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000af0:	ed97 7a06 	vldr	s14, [r7, #24]
 8000af4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000af8:	edc7 7a06 	vstr	s15, [r7, #24]
            sum += input[inf + 1] * weights[of * in_features + inf + 1];
 8000afc:	697b      	ldr	r3, [r7, #20]
 8000afe:	3301      	adds	r3, #1
 8000b00:	009b      	lsls	r3, r3, #2
 8000b02:	68fa      	ldr	r2, [r7, #12]
 8000b04:	4413      	add	r3, r2
 8000b06:	ed93 7a00 	vldr	s14, [r3]
 8000b0a:	69fb      	ldr	r3, [r7, #28]
 8000b0c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8000b0e:	fb03 f202 	mul.w	r2, r3, r2
 8000b12:	697b      	ldr	r3, [r7, #20]
 8000b14:	4413      	add	r3, r2
 8000b16:	3301      	adds	r3, #1
 8000b18:	009b      	lsls	r3, r3, #2
 8000b1a:	687a      	ldr	r2, [r7, #4]
 8000b1c:	4413      	add	r3, r2
 8000b1e:	edd3 7a00 	vldr	s15, [r3]
 8000b22:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000b26:	ed97 7a06 	vldr	s14, [r7, #24]
 8000b2a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000b2e:	edc7 7a06 	vstr	s15, [r7, #24]
            sum += input[inf + 2] * weights[of * in_features + inf + 2];
 8000b32:	697b      	ldr	r3, [r7, #20]
 8000b34:	3302      	adds	r3, #2
 8000b36:	009b      	lsls	r3, r3, #2
 8000b38:	68fa      	ldr	r2, [r7, #12]
 8000b3a:	4413      	add	r3, r2
 8000b3c:	ed93 7a00 	vldr	s14, [r3]
 8000b40:	69fb      	ldr	r3, [r7, #28]
 8000b42:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8000b44:	fb03 f202 	mul.w	r2, r3, r2
 8000b48:	697b      	ldr	r3, [r7, #20]
 8000b4a:	4413      	add	r3, r2
 8000b4c:	3302      	adds	r3, #2
 8000b4e:	009b      	lsls	r3, r3, #2
 8000b50:	687a      	ldr	r2, [r7, #4]
 8000b52:	4413      	add	r3, r2
 8000b54:	edd3 7a00 	vldr	s15, [r3]
 8000b58:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000b5c:	ed97 7a06 	vldr	s14, [r7, #24]
 8000b60:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000b64:	edc7 7a06 	vstr	s15, [r7, #24]
            sum += input[inf + 3] * weights[of * in_features + inf + 3];
 8000b68:	697b      	ldr	r3, [r7, #20]
 8000b6a:	3303      	adds	r3, #3
 8000b6c:	009b      	lsls	r3, r3, #2
 8000b6e:	68fa      	ldr	r2, [r7, #12]
 8000b70:	4413      	add	r3, r2
 8000b72:	ed93 7a00 	vldr	s14, [r3]
 8000b76:	69fb      	ldr	r3, [r7, #28]
 8000b78:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8000b7a:	fb03 f202 	mul.w	r2, r3, r2
 8000b7e:	697b      	ldr	r3, [r7, #20]
 8000b80:	4413      	add	r3, r2
 8000b82:	3303      	adds	r3, #3
 8000b84:	009b      	lsls	r3, r3, #2
 8000b86:	687a      	ldr	r2, [r7, #4]
 8000b88:	4413      	add	r3, r2
 8000b8a:	edd3 7a00 	vldr	s15, [r3]
 8000b8e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000b92:	ed97 7a06 	vldr	s14, [r7, #24]
 8000b96:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000b9a:	edc7 7a06 	vstr	s15, [r7, #24]
        for (inf = 0; inf <= in_features - UNROLL_FACTOR; inf += UNROLL_FACTOR) {
 8000b9e:	697b      	ldr	r3, [r7, #20]
 8000ba0:	3304      	adds	r3, #4
 8000ba2:	617b      	str	r3, [r7, #20]
 8000ba4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000ba6:	3b03      	subs	r3, #3
 8000ba8:	697a      	ldr	r2, [r7, #20]
 8000baa:	429a      	cmp	r2, r3
 8000bac:	db8d      	blt.n	8000aca <linear+0x26>
        }
        for (; inf < in_features; ++inf) {
 8000bae:	e01b      	b.n	8000be8 <linear+0x144>
            sum += input[inf] * weights[of * in_features + inf];
 8000bb0:	697b      	ldr	r3, [r7, #20]
 8000bb2:	009b      	lsls	r3, r3, #2
 8000bb4:	68fa      	ldr	r2, [r7, #12]
 8000bb6:	4413      	add	r3, r2
 8000bb8:	ed93 7a00 	vldr	s14, [r3]
 8000bbc:	69fb      	ldr	r3, [r7, #28]
 8000bbe:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8000bc0:	fb03 f202 	mul.w	r2, r3, r2
 8000bc4:	697b      	ldr	r3, [r7, #20]
 8000bc6:	4413      	add	r3, r2
 8000bc8:	009b      	lsls	r3, r3, #2
 8000bca:	687a      	ldr	r2, [r7, #4]
 8000bcc:	4413      	add	r3, r2
 8000bce:	edd3 7a00 	vldr	s15, [r3]
 8000bd2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000bd6:	ed97 7a06 	vldr	s14, [r7, #24]
 8000bda:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000bde:	edc7 7a06 	vstr	s15, [r7, #24]
        for (; inf < in_features; ++inf) {
 8000be2:	697b      	ldr	r3, [r7, #20]
 8000be4:	3301      	adds	r3, #1
 8000be6:	617b      	str	r3, [r7, #20]
 8000be8:	697a      	ldr	r2, [r7, #20]
 8000bea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000bec:	429a      	cmp	r2, r3
 8000bee:	dbdf      	blt.n	8000bb0 <linear+0x10c>
        }
        output[of] = sum;
 8000bf0:	69fb      	ldr	r3, [r7, #28]
 8000bf2:	009b      	lsls	r3, r3, #2
 8000bf4:	68ba      	ldr	r2, [r7, #8]
 8000bf6:	4413      	add	r3, r2
 8000bf8:	69ba      	ldr	r2, [r7, #24]
 8000bfa:	601a      	str	r2, [r3, #0]
    for (int of = 0; of < out_features; ++of) {
 8000bfc:	69fb      	ldr	r3, [r7, #28]
 8000bfe:	3301      	adds	r3, #1
 8000c00:	61fb      	str	r3, [r7, #28]
 8000c02:	69fa      	ldr	r2, [r7, #28]
 8000c04:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000c06:	429a      	cmp	r2, r3
 8000c08:	f6ff af56 	blt.w	8000ab8 <linear+0x14>
    }
}
 8000c0c:	bf00      	nop
 8000c0e:	bf00      	nop
 8000c10:	3724      	adds	r7, #36	@ 0x24
 8000c12:	46bd      	mov	sp, r7
 8000c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c18:	4770      	bx	lr
	...

08000c1c <inference>:

int inference(const float input_image[1][INPUT_SIZE][INPUT_SIZE]) {
 8000c1c:	b590      	push	{r4, r7, lr}
 8000c1e:	f5ad 3dc4 	sub.w	sp, sp, #100352	@ 0x18800
 8000c22:	b09b      	sub	sp, #108	@ 0x6c
 8000c24:	af06      	add	r7, sp, #24
 8000c26:	f507 6305 	add.w	r3, r7, #2128	@ 0x850
 8000c2a:	f6a3 034c 	subw	r3, r3, #2124	@ 0x84c
 8000c2e:	6018      	str	r0, [r3, #0]
    float conv1_output[CONV1_OUT_CHANNELS][INPUT_SIZE][INPUT_SIZE] = {0};
 8000c30:	f64c 0350 	movw	r3, #51280	@ 0xc850
 8000c34:	443b      	add	r3, r7
 8000c36:	f2a3 431c 	subw	r3, r3, #1052	@ 0x41c
 8000c3a:	4618      	mov	r0, r3
 8000c3c:	f44f 4344 	mov.w	r3, #50176	@ 0xc400
 8000c40:	461a      	mov	r2, r3
 8000c42:	2100      	movs	r1, #0
 8000c44:	f006 f9dc 	bl	8007000 <memset>
    conv2d(&input_image[0][0][0], &conv1_output[0][0][0], &conv1_weights[0][0][0][0], conv1_biases, CONV1_IN_CHANNELS, CONV1_OUT_CHANNELS, INPUT_SIZE, CONV1_KERNEL_SIZE, CONV1_STRIDE, CONV1_PADDING);
 8000c48:	f507 6305 	add.w	r3, r7, #2128	@ 0x850
 8000c4c:	f6a3 034c 	subw	r3, r3, #2124	@ 0x84c
 8000c50:	6818      	ldr	r0, [r3, #0]
 8000c52:	4993      	ldr	r1, [pc, #588]	@ (8000ea0 <inference+0x284>)
 8000c54:	4b93      	ldr	r3, [pc, #588]	@ (8000ea4 <inference+0x288>)
 8000c56:	440b      	add	r3, r1
 8000c58:	19d9      	adds	r1, r3, r7
 8000c5a:	2301      	movs	r3, #1
 8000c5c:	9305      	str	r3, [sp, #20]
 8000c5e:	2301      	movs	r3, #1
 8000c60:	9304      	str	r3, [sp, #16]
 8000c62:	2303      	movs	r3, #3
 8000c64:	9303      	str	r3, [sp, #12]
 8000c66:	231c      	movs	r3, #28
 8000c68:	9302      	str	r3, [sp, #8]
 8000c6a:	2310      	movs	r3, #16
 8000c6c:	9301      	str	r3, [sp, #4]
 8000c6e:	2301      	movs	r3, #1
 8000c70:	9300      	str	r3, [sp, #0]
 8000c72:	4b8d      	ldr	r3, [pc, #564]	@ (8000ea8 <inference+0x28c>)
 8000c74:	4a8d      	ldr	r2, [pc, #564]	@ (8000eac <inference+0x290>)
 8000c76:	f7ff fd98 	bl	80007aa <conv2d>

    relu(&conv1_output[0][0][0], CONV1_OUT_CHANNELS * INPUT_SIZE * INPUT_SIZE);
 8000c7a:	4b89      	ldr	r3, [pc, #548]	@ (8000ea0 <inference+0x284>)
 8000c7c:	f503 33c4 	add.w	r3, r3, #100352	@ 0x18800
 8000c80:	f103 0350 	add.w	r3, r3, #80	@ 0x50
 8000c84:	443b      	add	r3, r7
 8000c86:	f44f 5144 	mov.w	r1, #12544	@ 0x3100
 8000c8a:	4618      	mov	r0, r3
 8000c8c:	f7ff fd08 	bl	80006a0 <relu>

    float pool1_output[CONV1_OUT_CHANNELS][INPUT_SIZE/2][INPUT_SIZE/2] = {0};
 8000c90:	f649 0350 	movw	r3, #38992	@ 0x9850
 8000c94:	443b      	add	r3, r7
 8000c96:	f2a3 531c 	subw	r3, r3, #1308	@ 0x51c
 8000c9a:	4618      	mov	r0, r3
 8000c9c:	f44f 5344 	mov.w	r3, #12544	@ 0x3100
 8000ca0:	461a      	mov	r2, r3
 8000ca2:	2100      	movs	r1, #0
 8000ca4:	f006 f9ac 	bl	8007000 <memset>
    maxpool2d(&conv1_output[0][0][0], &pool1_output[0][0][0], CONV1_OUT_CHANNELS, INPUT_SIZE, 2, 2);
 8000ca8:	4981      	ldr	r1, [pc, #516]	@ (8000eb0 <inference+0x294>)
 8000caa:	4b7e      	ldr	r3, [pc, #504]	@ (8000ea4 <inference+0x288>)
 8000cac:	440b      	add	r3, r1
 8000cae:	19d9      	adds	r1, r3, r7
 8000cb0:	487b      	ldr	r0, [pc, #492]	@ (8000ea0 <inference+0x284>)
 8000cb2:	4b7c      	ldr	r3, [pc, #496]	@ (8000ea4 <inference+0x288>)
 8000cb4:	4403      	add	r3, r0
 8000cb6:	19d8      	adds	r0, r3, r7
 8000cb8:	2302      	movs	r3, #2
 8000cba:	9301      	str	r3, [sp, #4]
 8000cbc:	2302      	movs	r3, #2
 8000cbe:	9300      	str	r3, [sp, #0]
 8000cc0:	231c      	movs	r3, #28
 8000cc2:	2210      	movs	r2, #16
 8000cc4:	f7ff fe46 	bl	8000954 <maxpool2d>

    float conv2_output[CONV2_OUT_CHANNELS][INPUT_SIZE/2][INPUT_SIZE/2] = {0};
 8000cc8:	f643 0350 	movw	r3, #14416	@ 0x3850
 8000ccc:	443b      	add	r3, r7
 8000cce:	f2a3 731c 	subw	r3, r3, #1820	@ 0x71c
 8000cd2:	4618      	mov	r0, r3
 8000cd4:	f44f 43c4 	mov.w	r3, #25088	@ 0x6200
 8000cd8:	461a      	mov	r2, r3
 8000cda:	2100      	movs	r1, #0
 8000cdc:	f006 f990 	bl	8007000 <memset>
    conv2d(&pool1_output[0][0][0], &conv2_output[0][0][0], &conv2_weights[0][0][0][0], conv2_biases, CONV2_IN_CHANNELS, CONV2_OUT_CHANNELS, INPUT_SIZE/2, CONV2_KERNEL_SIZE, CONV2_STRIDE, CONV2_PADDING);
 8000ce0:	4974      	ldr	r1, [pc, #464]	@ (8000eb4 <inference+0x298>)
 8000ce2:	4b70      	ldr	r3, [pc, #448]	@ (8000ea4 <inference+0x288>)
 8000ce4:	440b      	add	r3, r1
 8000ce6:	19d9      	adds	r1, r3, r7
 8000ce8:	4871      	ldr	r0, [pc, #452]	@ (8000eb0 <inference+0x294>)
 8000cea:	4b6e      	ldr	r3, [pc, #440]	@ (8000ea4 <inference+0x288>)
 8000cec:	4403      	add	r3, r0
 8000cee:	19d8      	adds	r0, r3, r7
 8000cf0:	2301      	movs	r3, #1
 8000cf2:	9305      	str	r3, [sp, #20]
 8000cf4:	2301      	movs	r3, #1
 8000cf6:	9304      	str	r3, [sp, #16]
 8000cf8:	2303      	movs	r3, #3
 8000cfa:	9303      	str	r3, [sp, #12]
 8000cfc:	230e      	movs	r3, #14
 8000cfe:	9302      	str	r3, [sp, #8]
 8000d00:	2320      	movs	r3, #32
 8000d02:	9301      	str	r3, [sp, #4]
 8000d04:	2310      	movs	r3, #16
 8000d06:	9300      	str	r3, [sp, #0]
 8000d08:	4b6b      	ldr	r3, [pc, #428]	@ (8000eb8 <inference+0x29c>)
 8000d0a:	4a6c      	ldr	r2, [pc, #432]	@ (8000ebc <inference+0x2a0>)
 8000d0c:	f7ff fd4d 	bl	80007aa <conv2d>

    relu(&conv2_output[0][0][0], CONV2_OUT_CHANNELS * INPUT_SIZE/2 * INPUT_SIZE/2);
 8000d10:	4b68      	ldr	r3, [pc, #416]	@ (8000eb4 <inference+0x298>)
 8000d12:	f503 33c4 	add.w	r3, r3, #100352	@ 0x18800
 8000d16:	f103 0350 	add.w	r3, r3, #80	@ 0x50
 8000d1a:	443b      	add	r3, r7
 8000d1c:	f44f 51c4 	mov.w	r1, #6272	@ 0x1880
 8000d20:	4618      	mov	r0, r3
 8000d22:	f7ff fcbd 	bl	80006a0 <relu>

    float pool2_output[CONV2_OUT_CHANNELS][INPUT_SIZE/4][INPUT_SIZE/4] = {0};
 8000d26:	f642 0350 	movw	r3, #10320	@ 0x2850
 8000d2a:	443b      	add	r3, r7
 8000d2c:	f6a3 739c 	subw	r3, r3, #3996	@ 0xf9c
 8000d30:	4618      	mov	r0, r3
 8000d32:	f44f 53c4 	mov.w	r3, #6272	@ 0x1880
 8000d36:	461a      	mov	r2, r3
 8000d38:	2100      	movs	r1, #0
 8000d3a:	f006 f961 	bl	8007000 <memset>
    maxpool2d(&conv2_output[0][0][0], &pool2_output[0][0][0], CONV2_OUT_CHANNELS, INPUT_SIZE/2, 2, 2);
 8000d3e:	4960      	ldr	r1, [pc, #384]	@ (8000ec0 <inference+0x2a4>)
 8000d40:	4b58      	ldr	r3, [pc, #352]	@ (8000ea4 <inference+0x288>)
 8000d42:	440b      	add	r3, r1
 8000d44:	19d9      	adds	r1, r3, r7
 8000d46:	485b      	ldr	r0, [pc, #364]	@ (8000eb4 <inference+0x298>)
 8000d48:	4b56      	ldr	r3, [pc, #344]	@ (8000ea4 <inference+0x288>)
 8000d4a:	4403      	add	r3, r0
 8000d4c:	19d8      	adds	r0, r3, r7
 8000d4e:	2302      	movs	r3, #2
 8000d50:	9301      	str	r3, [sp, #4]
 8000d52:	2302      	movs	r3, #2
 8000d54:	9300      	str	r3, [sp, #0]
 8000d56:	230e      	movs	r3, #14
 8000d58:	2220      	movs	r2, #32
 8000d5a:	f7ff fdfb 	bl	8000954 <maxpool2d>

    float flattened_output[CONV2_OUT_CHANNELS * 7 * 7] = {0};
 8000d5e:	f507 6305 	add.w	r3, r7, #2128	@ 0x850
 8000d62:	f6a3 031c 	subw	r3, r3, #2076	@ 0x81c
 8000d66:	4618      	mov	r0, r3
 8000d68:	f44f 53c4 	mov.w	r3, #6272	@ 0x1880
 8000d6c:	461a      	mov	r2, r3
 8000d6e:	2100      	movs	r1, #0
 8000d70:	f006 f946 	bl	8007000 <memset>
    int index = 0;
 8000d74:	2300      	movs	r3, #0
 8000d76:	4a53      	ldr	r2, [pc, #332]	@ (8000ec4 <inference+0x2a8>)
 8000d78:	443a      	add	r2, r7
 8000d7a:	6013      	str	r3, [r2, #0]
    for (int c = 0; c < CONV2_OUT_CHANNELS; ++c) {
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	4a52      	ldr	r2, [pc, #328]	@ (8000ec8 <inference+0x2ac>)
 8000d80:	443a      	add	r2, r7
 8000d82:	6013      	str	r3, [r2, #0]
 8000d84:	e051      	b.n	8000e2a <inference+0x20e>
        for (int h = 0; h < 7; ++h) {
 8000d86:	2300      	movs	r3, #0
 8000d88:	4a50      	ldr	r2, [pc, #320]	@ (8000ecc <inference+0x2b0>)
 8000d8a:	443a      	add	r2, r7
 8000d8c:	6013      	str	r3, [r2, #0]
 8000d8e:	e040      	b.n	8000e12 <inference+0x1f6>
            for (int w = 0; w < 7; ++w) {
 8000d90:	2300      	movs	r3, #0
 8000d92:	4a4f      	ldr	r2, [pc, #316]	@ (8000ed0 <inference+0x2b4>)
 8000d94:	443a      	add	r2, r7
 8000d96:	6013      	str	r3, [r2, #0]
 8000d98:	e02f      	b.n	8000dfa <inference+0x1de>
                flattened_output[index++] = pool2_output[c][h][w];
 8000d9a:	4b4a      	ldr	r3, [pc, #296]	@ (8000ec4 <inference+0x2a8>)
 8000d9c:	443b      	add	r3, r7
 8000d9e:	6818      	ldr	r0, [r3, #0]
 8000da0:	1c43      	adds	r3, r0, #1
 8000da2:	4a48      	ldr	r2, [pc, #288]	@ (8000ec4 <inference+0x2a8>)
 8000da4:	443a      	add	r2, r7
 8000da6:	6013      	str	r3, [r2, #0]
 8000da8:	f642 0350 	movw	r3, #10320	@ 0x2850
 8000dac:	443b      	add	r3, r7
 8000dae:	f6a3 749c 	subw	r4, r3, #3996	@ 0xf9c
 8000db2:	4b46      	ldr	r3, [pc, #280]	@ (8000ecc <inference+0x2b0>)
 8000db4:	443b      	add	r3, r7
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	4a43      	ldr	r2, [pc, #268]	@ (8000ec8 <inference+0x2ac>)
 8000dba:	443a      	add	r2, r7
 8000dbc:	6811      	ldr	r1, [r2, #0]
 8000dbe:	461a      	mov	r2, r3
 8000dc0:	00d2      	lsls	r2, r2, #3
 8000dc2:	1ad2      	subs	r2, r2, r3
 8000dc4:	460b      	mov	r3, r1
 8000dc6:	00db      	lsls	r3, r3, #3
 8000dc8:	1a5b      	subs	r3, r3, r1
 8000dca:	00d9      	lsls	r1, r3, #3
 8000dcc:	1ac9      	subs	r1, r1, r3
 8000dce:	440a      	add	r2, r1
 8000dd0:	4b3f      	ldr	r3, [pc, #252]	@ (8000ed0 <inference+0x2b4>)
 8000dd2:	443b      	add	r3, r7
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	4413      	add	r3, r2
 8000dd8:	009b      	lsls	r3, r3, #2
 8000dda:	4423      	add	r3, r4
 8000ddc:	681a      	ldr	r2, [r3, #0]
 8000dde:	f507 6305 	add.w	r3, r7, #2128	@ 0x850
 8000de2:	f6a3 011c 	subw	r1, r3, #2076	@ 0x81c
 8000de6:	0083      	lsls	r3, r0, #2
 8000de8:	440b      	add	r3, r1
 8000dea:	601a      	str	r2, [r3, #0]
            for (int w = 0; w < 7; ++w) {
 8000dec:	4b38      	ldr	r3, [pc, #224]	@ (8000ed0 <inference+0x2b4>)
 8000dee:	443b      	add	r3, r7
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	3301      	adds	r3, #1
 8000df4:	4a36      	ldr	r2, [pc, #216]	@ (8000ed0 <inference+0x2b4>)
 8000df6:	443a      	add	r2, r7
 8000df8:	6013      	str	r3, [r2, #0]
 8000dfa:	4b35      	ldr	r3, [pc, #212]	@ (8000ed0 <inference+0x2b4>)
 8000dfc:	443b      	add	r3, r7
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	2b06      	cmp	r3, #6
 8000e02:	ddca      	ble.n	8000d9a <inference+0x17e>
        for (int h = 0; h < 7; ++h) {
 8000e04:	4b31      	ldr	r3, [pc, #196]	@ (8000ecc <inference+0x2b0>)
 8000e06:	443b      	add	r3, r7
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	3301      	adds	r3, #1
 8000e0c:	4a2f      	ldr	r2, [pc, #188]	@ (8000ecc <inference+0x2b0>)
 8000e0e:	443a      	add	r2, r7
 8000e10:	6013      	str	r3, [r2, #0]
 8000e12:	4b2e      	ldr	r3, [pc, #184]	@ (8000ecc <inference+0x2b0>)
 8000e14:	443b      	add	r3, r7
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	2b06      	cmp	r3, #6
 8000e1a:	ddb9      	ble.n	8000d90 <inference+0x174>
    for (int c = 0; c < CONV2_OUT_CHANNELS; ++c) {
 8000e1c:	4b2a      	ldr	r3, [pc, #168]	@ (8000ec8 <inference+0x2ac>)
 8000e1e:	443b      	add	r3, r7
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	3301      	adds	r3, #1
 8000e24:	4a28      	ldr	r2, [pc, #160]	@ (8000ec8 <inference+0x2ac>)
 8000e26:	443a      	add	r2, r7
 8000e28:	6013      	str	r3, [r2, #0]
 8000e2a:	4b27      	ldr	r3, [pc, #156]	@ (8000ec8 <inference+0x2ac>)
 8000e2c:	443b      	add	r3, r7
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	2b1f      	cmp	r3, #31
 8000e32:	dda8      	ble.n	8000d86 <inference+0x16a>
            }
        }
    }

    float fc_output[FC1_OUT_FEATURES] = {0};
 8000e34:	f507 6305 	add.w	r3, r7, #2128	@ 0x850
 8000e38:	f6a3 0344 	subw	r3, r3, #2116	@ 0x844
 8000e3c:	4618      	mov	r0, r3
 8000e3e:	2328      	movs	r3, #40	@ 0x28
 8000e40:	461a      	mov	r2, r3
 8000e42:	2100      	movs	r1, #0
 8000e44:	f006 f8dc 	bl	8007000 <memset>
    linear(flattened_output, fc_output, &fc1_weights[0][0], fc1_biases, FC1_IN_FEATURES, FC1_OUT_FEATURES);
 8000e48:	4922      	ldr	r1, [pc, #136]	@ (8000ed4 <inference+0x2b8>)
 8000e4a:	4b16      	ldr	r3, [pc, #88]	@ (8000ea4 <inference+0x288>)
 8000e4c:	440b      	add	r3, r1
 8000e4e:	19d9      	adds	r1, r3, r7
 8000e50:	4821      	ldr	r0, [pc, #132]	@ (8000ed8 <inference+0x2bc>)
 8000e52:	4b14      	ldr	r3, [pc, #80]	@ (8000ea4 <inference+0x288>)
 8000e54:	4403      	add	r3, r0
 8000e56:	19d8      	adds	r0, r3, r7
 8000e58:	230a      	movs	r3, #10
 8000e5a:	9301      	str	r3, [sp, #4]
 8000e5c:	f44f 63c4 	mov.w	r3, #1568	@ 0x620
 8000e60:	9300      	str	r3, [sp, #0]
 8000e62:	4b1e      	ldr	r3, [pc, #120]	@ (8000edc <inference+0x2c0>)
 8000e64:	4a1e      	ldr	r2, [pc, #120]	@ (8000ee0 <inference+0x2c4>)
 8000e66:	f7ff fe1d 	bl	8000aa4 <linear>

    relu(fc_output, FC1_OUT_FEATURES);
 8000e6a:	4b1a      	ldr	r3, [pc, #104]	@ (8000ed4 <inference+0x2b8>)
 8000e6c:	f503 33c4 	add.w	r3, r3, #100352	@ 0x18800
 8000e70:	f103 0350 	add.w	r3, r3, #80	@ 0x50
 8000e74:	443b      	add	r3, r7
 8000e76:	210a      	movs	r1, #10
 8000e78:	4618      	mov	r0, r3
 8000e7a:	f7ff fc11 	bl	80006a0 <relu>

    int predicted_label = 0;
 8000e7e:	2300      	movs	r3, #0
 8000e80:	4a18      	ldr	r2, [pc, #96]	@ (8000ee4 <inference+0x2c8>)
 8000e82:	443a      	add	r2, r7
 8000e84:	6013      	str	r3, [r2, #0]
    float max_val = fc_output[0];
 8000e86:	f507 6305 	add.w	r3, r7, #2128	@ 0x850
 8000e8a:	f6a3 0344 	subw	r3, r3, #2116	@ 0x844
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	4a15      	ldr	r2, [pc, #84]	@ (8000ee8 <inference+0x2cc>)
 8000e92:	443a      	add	r2, r7
 8000e94:	6013      	str	r3, [r2, #0]
    for (int i = 1; i < FC1_OUT_FEATURES; ++i) {
 8000e96:	2301      	movs	r3, #1
 8000e98:	4a14      	ldr	r2, [pc, #80]	@ (8000eec <inference+0x2d0>)
 8000e9a:	443a      	add	r2, r7
 8000e9c:	6013      	str	r3, [r2, #0]
 8000e9e:	e055      	b.n	8000f4c <inference+0x330>
 8000ea0:	ffff3be4 	.word	0xffff3be4
 8000ea4:	00018850 	.word	0x00018850
 8000ea8:	08007b64 	.word	0x08007b64
 8000eac:	08007924 	.word	0x08007924
 8000eb0:	ffff0ae4 	.word	0xffff0ae4
 8000eb4:	fffea8e4 	.word	0xfffea8e4
 8000eb8:	0800c3a4 	.word	0x0800c3a4
 8000ebc:	08007ba4 	.word	0x08007ba4
 8000ec0:	fffe9064 	.word	0xfffe9064
 8000ec4:	0001884c 	.word	0x0001884c
 8000ec8:	00018848 	.word	0x00018848
 8000ecc:	00018844 	.word	0x00018844
 8000ed0:	00018840 	.word	0x00018840
 8000ed4:	fffe77bc 	.word	0xfffe77bc
 8000ed8:	fffe77e4 	.word	0xfffe77e4
 8000edc:	0801b924 	.word	0x0801b924
 8000ee0:	0800c424 	.word	0x0800c424
 8000ee4:	0001883c 	.word	0x0001883c
 8000ee8:	00018838 	.word	0x00018838
 8000eec:	00018834 	.word	0x00018834
        if (fc_output[i] > max_val) {
 8000ef0:	f507 6305 	add.w	r3, r7, #2128	@ 0x850
 8000ef4:	f6a3 0244 	subw	r2, r3, #2116	@ 0x844
 8000ef8:	4b1b      	ldr	r3, [pc, #108]	@ (8000f68 <inference+0x34c>)
 8000efa:	443b      	add	r3, r7
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	009b      	lsls	r3, r3, #2
 8000f00:	4413      	add	r3, r2
 8000f02:	edd3 7a00 	vldr	s15, [r3]
 8000f06:	4b19      	ldr	r3, [pc, #100]	@ (8000f6c <inference+0x350>)
 8000f08:	443b      	add	r3, r7
 8000f0a:	ed93 7a00 	vldr	s14, [r3]
 8000f0e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000f12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f16:	d512      	bpl.n	8000f3e <inference+0x322>
            max_val = fc_output[i];
 8000f18:	f507 6305 	add.w	r3, r7, #2128	@ 0x850
 8000f1c:	f6a3 0244 	subw	r2, r3, #2116	@ 0x844
 8000f20:	4b11      	ldr	r3, [pc, #68]	@ (8000f68 <inference+0x34c>)
 8000f22:	443b      	add	r3, r7
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	009b      	lsls	r3, r3, #2
 8000f28:	4413      	add	r3, r2
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	4a0f      	ldr	r2, [pc, #60]	@ (8000f6c <inference+0x350>)
 8000f2e:	443a      	add	r2, r7
 8000f30:	6013      	str	r3, [r2, #0]
            predicted_label = i;
 8000f32:	4b0d      	ldr	r3, [pc, #52]	@ (8000f68 <inference+0x34c>)
 8000f34:	443b      	add	r3, r7
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	4a0d      	ldr	r2, [pc, #52]	@ (8000f70 <inference+0x354>)
 8000f3a:	443a      	add	r2, r7
 8000f3c:	6013      	str	r3, [r2, #0]
    for (int i = 1; i < FC1_OUT_FEATURES; ++i) {
 8000f3e:	4b0a      	ldr	r3, [pc, #40]	@ (8000f68 <inference+0x34c>)
 8000f40:	443b      	add	r3, r7
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	3301      	adds	r3, #1
 8000f46:	4a08      	ldr	r2, [pc, #32]	@ (8000f68 <inference+0x34c>)
 8000f48:	443a      	add	r2, r7
 8000f4a:	6013      	str	r3, [r2, #0]
 8000f4c:	4b06      	ldr	r3, [pc, #24]	@ (8000f68 <inference+0x34c>)
 8000f4e:	443b      	add	r3, r7
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	2b09      	cmp	r3, #9
 8000f54:	ddcc      	ble.n	8000ef0 <inference+0x2d4>
        }
    }

    return predicted_label;
 8000f56:	4b06      	ldr	r3, [pc, #24]	@ (8000f70 <inference+0x354>)
 8000f58:	443b      	add	r3, r7
 8000f5a:	681b      	ldr	r3, [r3, #0]
}
 8000f5c:	4618      	mov	r0, r3
 8000f5e:	f507 37c4 	add.w	r7, r7, #100352	@ 0x18800
 8000f62:	3754      	adds	r7, #84	@ 0x54
 8000f64:	46bd      	mov	sp, r7
 8000f66:	bd90      	pop	{r4, r7, pc}
 8000f68:	00018834 	.word	0x00018834
 8000f6c:	00018838 	.word	0x00018838
 8000f70:	0001883c 	.word	0x0001883c

08000f74 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b092      	sub	sp, #72	@ 0x48
 8000f78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
	int predicted_label;
	char buf[50];
	int buf_len = 0;
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	647b      	str	r3, [r7, #68]	@ 0x44
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f7e:	f000 fe39 	bl	8001bf4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f82:	f000 f833 	bl	8000fec <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000f86:	f000 f8a1 	bl	80010cc <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f8a:	f000 f9a9 	bl	80012e0 <MX_GPIO_Init>
  MX_TIM1_Init();
 8000f8e:	f000 f8cd 	bl	800112c <MX_TIM1_Init>
  MX_USART1_UART_Init();
 8000f92:	f000 f959 	bl	8001248 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim1);
 8000f96:	4811      	ldr	r0, [pc, #68]	@ (8000fdc <main+0x68>)
 8000f98:	f003 ff0a 	bl	8004db0 <HAL_TIM_Base_Start>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  timestamp0 = htim1.Instance->CNT;
 8000f9c:	4b0f      	ldr	r3, [pc, #60]	@ (8000fdc <main+0x68>)
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000fa2:	643b      	str	r3, [r7, #64]	@ 0x40
	  int predicted_label = inference(mnist_test_images[0]);
 8000fa4:	480e      	ldr	r0, [pc, #56]	@ (8000fe0 <main+0x6c>)
 8000fa6:	f7ff fe39 	bl	8000c1c <inference>
 8000faa:	63f8      	str	r0, [r7, #60]	@ 0x3c
	  timestamp1 = htim1.Instance->CNT;
 8000fac:	4b0b      	ldr	r3, [pc, #44]	@ (8000fdc <main+0x68>)
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000fb2:	63bb      	str	r3, [r7, #56]	@ 0x38

	  buf_len = sprintf(buf,"Pred:%d\r\n",predicted_label);
 8000fb4:	1d3b      	adds	r3, r7, #4
 8000fb6:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8000fb8:	490a      	ldr	r1, [pc, #40]	@ (8000fe4 <main+0x70>)
 8000fba:	4618      	mov	r0, r3
 8000fbc:	f006 f800 	bl	8006fc0 <siprintf>
 8000fc0:	6478      	str	r0, [r7, #68]	@ 0x44
	  HAL_UART_Transmit(&huart1, (uint8_t *)buf, buf_len, 100);
 8000fc2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000fc4:	b29a      	uxth	r2, r3
 8000fc6:	1d39      	adds	r1, r7, #4
 8000fc8:	2364      	movs	r3, #100	@ 0x64
 8000fca:	4807      	ldr	r0, [pc, #28]	@ (8000fe8 <main+0x74>)
 8000fcc:	f004 fdda 	bl	8005b84 <HAL_UART_Transmit>

	  HAL_Delay(500);
 8000fd0:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000fd4:	f000 fea0 	bl	8001d18 <HAL_Delay>
  {
 8000fd8:	bf00      	nop
 8000fda:	e7df      	b.n	8000f9c <main+0x28>
 8000fdc:	2400007c 	.word	0x2400007c
 8000fe0:	0801b94c 	.word	0x0801b94c
 8000fe4:	08007918 	.word	0x08007918
 8000fe8:	240000c8 	.word	0x240000c8

08000fec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b09c      	sub	sp, #112	@ 0x70
 8000ff0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ff2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ff6:	224c      	movs	r2, #76	@ 0x4c
 8000ff8:	2100      	movs	r1, #0
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	f006 f800 	bl	8007000 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001000:	1d3b      	adds	r3, r7, #4
 8001002:	2220      	movs	r2, #32
 8001004:	2100      	movs	r1, #0
 8001006:	4618      	mov	r0, r3
 8001008:	f005 fffa 	bl	8007000 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 800100c:	2004      	movs	r0, #4
 800100e:	f001 f94d 	bl	80022ac <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8001012:	2300      	movs	r3, #0
 8001014:	603b      	str	r3, [r7, #0]
 8001016:	4b2c      	ldr	r3, [pc, #176]	@ (80010c8 <SystemClock_Config+0xdc>)
 8001018:	699b      	ldr	r3, [r3, #24]
 800101a:	4a2b      	ldr	r2, [pc, #172]	@ (80010c8 <SystemClock_Config+0xdc>)
 800101c:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001020:	6193      	str	r3, [r2, #24]
 8001022:	4b29      	ldr	r3, [pc, #164]	@ (80010c8 <SystemClock_Config+0xdc>)
 8001024:	699b      	ldr	r3, [r3, #24]
 8001026:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800102a:	603b      	str	r3, [r7, #0]
 800102c:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800102e:	bf00      	nop
 8001030:	4b25      	ldr	r3, [pc, #148]	@ (80010c8 <SystemClock_Config+0xdc>)
 8001032:	699b      	ldr	r3, [r3, #24]
 8001034:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001038:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800103c:	d1f8      	bne.n	8001030 <SystemClock_Config+0x44>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 800103e:	2321      	movs	r3, #33	@ 0x21
 8001040:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001042:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001046:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8001048:	2301      	movs	r3, #1
 800104a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800104c:	2302      	movs	r3, #2
 800104e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001050:	2302      	movs	r3, #2
 8001052:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 5;
 8001054:	2305      	movs	r3, #5
 8001056:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 110;
 8001058:	236e      	movs	r3, #110	@ 0x6e
 800105a:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 800105c:	2301      	movs	r3, #1
 800105e:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001060:	2304      	movs	r3, #4
 8001062:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001064:	2302      	movs	r3, #2
 8001066:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 8001068:	2308      	movs	r3, #8
 800106a:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800106c:	2300      	movs	r3, #0
 800106e:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8001070:	2300      	movs	r3, #0
 8001072:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001074:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001078:	4618      	mov	r0, r3
 800107a:	f001 f971 	bl	8002360 <HAL_RCC_OscConfig>
 800107e:	4603      	mov	r3, r0
 8001080:	2b00      	cmp	r3, #0
 8001082:	d001      	beq.n	8001088 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8001084:	f000 fad4 	bl	8001630 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001088:	233f      	movs	r3, #63	@ 0x3f
 800108a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800108c:	2303      	movs	r3, #3
 800108e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8001090:	2300      	movs	r3, #0
 8001092:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8001094:	2308      	movs	r3, #8
 8001096:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8001098:	2340      	movs	r3, #64	@ 0x40
 800109a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 800109c:	2340      	movs	r3, #64	@ 0x40
 800109e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80010a0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80010a4:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80010a6:	2340      	movs	r3, #64	@ 0x40
 80010a8:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80010aa:	1d3b      	adds	r3, r7, #4
 80010ac:	2103      	movs	r1, #3
 80010ae:	4618      	mov	r0, r3
 80010b0:	f001 fd30 	bl	8002b14 <HAL_RCC_ClockConfig>
 80010b4:	4603      	mov	r3, r0
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d001      	beq.n	80010be <SystemClock_Config+0xd2>
  {
    Error_Handler();
 80010ba:	f000 fab9 	bl	8001630 <Error_Handler>
  }
}
 80010be:	bf00      	nop
 80010c0:	3770      	adds	r7, #112	@ 0x70
 80010c2:	46bd      	mov	sp, r7
 80010c4:	bd80      	pop	{r7, pc}
 80010c6:	bf00      	nop
 80010c8:	58024800 	.word	0x58024800

080010cc <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b0ae      	sub	sp, #184	@ 0xb8
 80010d0:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80010d2:	463b      	mov	r3, r7
 80010d4:	22b8      	movs	r2, #184	@ 0xb8
 80010d6:	2100      	movs	r1, #0
 80010d8:	4618      	mov	r0, r3
 80010da:	f005 ff91 	bl	8007000 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80010de:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 80010e2:	f04f 0300 	mov.w	r3, #0
 80010e6:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.PLL2.PLL2M = 5;
 80010ea:	2305      	movs	r3, #5
 80010ec:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 80;
 80010ee:	2350      	movs	r3, #80	@ 0x50
 80010f0:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 5;
 80010f2:	2305      	movs	r3, #5
 80010f4:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 80010f6:	2302      	movs	r3, #2
 80010f8:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 80010fa:	2302      	movs	r3, #2
 80010fc:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_2;
 80010fe:	2380      	movs	r3, #128	@ 0x80
 8001100:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8001102:	2300      	movs	r3, #0
 8001104:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8001106:	2300      	movs	r3, #0
 8001108:	627b      	str	r3, [r7, #36]	@ 0x24
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 800110a:	2300      	movs	r3, #0
 800110c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001110:	463b      	mov	r3, r7
 8001112:	4618      	mov	r0, r3
 8001114:	f002 f88a 	bl	800322c <HAL_RCCEx_PeriphCLKConfig>
 8001118:	4603      	mov	r3, r0
 800111a:	2b00      	cmp	r3, #0
 800111c:	d001      	beq.n	8001122 <PeriphCommonClock_Config+0x56>
  {
    Error_Handler();
 800111e:	f000 fa87 	bl	8001630 <Error_Handler>
  }
}
 8001122:	bf00      	nop
 8001124:	37b8      	adds	r7, #184	@ 0xb8
 8001126:	46bd      	mov	sp, r7
 8001128:	bd80      	pop	{r7, pc}
	...

0800112c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	b098      	sub	sp, #96	@ 0x60
 8001130:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001132:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001136:	2200      	movs	r2, #0
 8001138:	601a      	str	r2, [r3, #0]
 800113a:	605a      	str	r2, [r3, #4]
 800113c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800113e:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001142:	2200      	movs	r2, #0
 8001144:	601a      	str	r2, [r3, #0]
 8001146:	605a      	str	r2, [r3, #4]
 8001148:	609a      	str	r2, [r3, #8]
 800114a:	60da      	str	r2, [r3, #12]
 800114c:	611a      	str	r2, [r3, #16]
 800114e:	615a      	str	r2, [r3, #20]
 8001150:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001152:	1d3b      	adds	r3, r7, #4
 8001154:	2234      	movs	r2, #52	@ 0x34
 8001156:	2100      	movs	r1, #0
 8001158:	4618      	mov	r0, r3
 800115a:	f005 ff51 	bl	8007000 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800115e:	4b38      	ldr	r3, [pc, #224]	@ (8001240 <MX_TIM1_Init+0x114>)
 8001160:	4a38      	ldr	r2, [pc, #224]	@ (8001244 <MX_TIM1_Init+0x118>)
 8001162:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 244;
 8001164:	4b36      	ldr	r3, [pc, #216]	@ (8001240 <MX_TIM1_Init+0x114>)
 8001166:	22f4      	movs	r2, #244	@ 0xf4
 8001168:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800116a:	4b35      	ldr	r3, [pc, #212]	@ (8001240 <MX_TIM1_Init+0x114>)
 800116c:	2200      	movs	r2, #0
 800116e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001170:	4b33      	ldr	r3, [pc, #204]	@ (8001240 <MX_TIM1_Init+0x114>)
 8001172:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001176:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001178:	4b31      	ldr	r3, [pc, #196]	@ (8001240 <MX_TIM1_Init+0x114>)
 800117a:	2200      	movs	r2, #0
 800117c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800117e:	4b30      	ldr	r3, [pc, #192]	@ (8001240 <MX_TIM1_Init+0x114>)
 8001180:	2200      	movs	r2, #0
 8001182:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001184:	4b2e      	ldr	r3, [pc, #184]	@ (8001240 <MX_TIM1_Init+0x114>)
 8001186:	2200      	movs	r2, #0
 8001188:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800118a:	482d      	ldr	r0, [pc, #180]	@ (8001240 <MX_TIM1_Init+0x114>)
 800118c:	f003 fe8e 	bl	8004eac <HAL_TIM_PWM_Init>
 8001190:	4603      	mov	r3, r0
 8001192:	2b00      	cmp	r3, #0
 8001194:	d001      	beq.n	800119a <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8001196:	f000 fa4b 	bl	8001630 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800119a:	2300      	movs	r3, #0
 800119c:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800119e:	2300      	movs	r3, #0
 80011a0:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011a2:	2300      	movs	r3, #0
 80011a4:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80011a6:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80011aa:	4619      	mov	r1, r3
 80011ac:	4824      	ldr	r0, [pc, #144]	@ (8001240 <MX_TIM1_Init+0x114>)
 80011ae:	f004 fb71 	bl	8005894 <HAL_TIMEx_MasterConfigSynchronization>
 80011b2:	4603      	mov	r3, r0
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d001      	beq.n	80011bc <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 80011b8:	f000 fa3a 	bl	8001630 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80011bc:	2360      	movs	r3, #96	@ 0x60
 80011be:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 80011c0:	2300      	movs	r3, #0
 80011c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80011c4:	2300      	movs	r3, #0
 80011c6:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80011c8:	2300      	movs	r3, #0
 80011ca:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80011cc:	2300      	movs	r3, #0
 80011ce:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80011d0:	2300      	movs	r3, #0
 80011d2:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80011d4:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80011d8:	220c      	movs	r2, #12
 80011da:	4619      	mov	r1, r3
 80011dc:	4818      	ldr	r0, [pc, #96]	@ (8001240 <MX_TIM1_Init+0x114>)
 80011de:	f003 febd 	bl	8004f5c <HAL_TIM_PWM_ConfigChannel>
 80011e2:	4603      	mov	r3, r0
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d001      	beq.n	80011ec <MX_TIM1_Init+0xc0>
  {
    Error_Handler();
 80011e8:	f000 fa22 	bl	8001630 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80011ec:	2300      	movs	r3, #0
 80011ee:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80011f0:	2300      	movs	r3, #0
 80011f2:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80011f4:	2300      	movs	r3, #0
 80011f6:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80011f8:	2300      	movs	r3, #0
 80011fa:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80011fc:	2300      	movs	r3, #0
 80011fe:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001200:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001204:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001206:	2300      	movs	r3, #0
 8001208:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800120a:	2300      	movs	r3, #0
 800120c:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800120e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001212:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001214:	2300      	movs	r3, #0
 8001216:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001218:	2300      	movs	r3, #0
 800121a:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800121c:	1d3b      	adds	r3, r7, #4
 800121e:	4619      	mov	r1, r3
 8001220:	4807      	ldr	r0, [pc, #28]	@ (8001240 <MX_TIM1_Init+0x114>)
 8001222:	f004 fbd3 	bl	80059cc <HAL_TIMEx_ConfigBreakDeadTime>
 8001226:	4603      	mov	r3, r0
 8001228:	2b00      	cmp	r3, #0
 800122a:	d001      	beq.n	8001230 <MX_TIM1_Init+0x104>
  {
    Error_Handler();
 800122c:	f000 fa00 	bl	8001630 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001230:	4803      	ldr	r0, [pc, #12]	@ (8001240 <MX_TIM1_Init+0x114>)
 8001232:	f000 fa6d 	bl	8001710 <HAL_TIM_MspPostInit>

}
 8001236:	bf00      	nop
 8001238:	3760      	adds	r7, #96	@ 0x60
 800123a:	46bd      	mov	sp, r7
 800123c:	bd80      	pop	{r7, pc}
 800123e:	bf00      	nop
 8001240:	2400007c 	.word	0x2400007c
 8001244:	40010000 	.word	0x40010000

08001248 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800124c:	4b22      	ldr	r3, [pc, #136]	@ (80012d8 <MX_USART1_UART_Init+0x90>)
 800124e:	4a23      	ldr	r2, [pc, #140]	@ (80012dc <MX_USART1_UART_Init+0x94>)
 8001250:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001252:	4b21      	ldr	r3, [pc, #132]	@ (80012d8 <MX_USART1_UART_Init+0x90>)
 8001254:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001258:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800125a:	4b1f      	ldr	r3, [pc, #124]	@ (80012d8 <MX_USART1_UART_Init+0x90>)
 800125c:	2200      	movs	r2, #0
 800125e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001260:	4b1d      	ldr	r3, [pc, #116]	@ (80012d8 <MX_USART1_UART_Init+0x90>)
 8001262:	2200      	movs	r2, #0
 8001264:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001266:	4b1c      	ldr	r3, [pc, #112]	@ (80012d8 <MX_USART1_UART_Init+0x90>)
 8001268:	2200      	movs	r2, #0
 800126a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800126c:	4b1a      	ldr	r3, [pc, #104]	@ (80012d8 <MX_USART1_UART_Init+0x90>)
 800126e:	220c      	movs	r2, #12
 8001270:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001272:	4b19      	ldr	r3, [pc, #100]	@ (80012d8 <MX_USART1_UART_Init+0x90>)
 8001274:	2200      	movs	r2, #0
 8001276:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001278:	4b17      	ldr	r3, [pc, #92]	@ (80012d8 <MX_USART1_UART_Init+0x90>)
 800127a:	2200      	movs	r2, #0
 800127c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800127e:	4b16      	ldr	r3, [pc, #88]	@ (80012d8 <MX_USART1_UART_Init+0x90>)
 8001280:	2200      	movs	r2, #0
 8001282:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001284:	4b14      	ldr	r3, [pc, #80]	@ (80012d8 <MX_USART1_UART_Init+0x90>)
 8001286:	2200      	movs	r2, #0
 8001288:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800128a:	4b13      	ldr	r3, [pc, #76]	@ (80012d8 <MX_USART1_UART_Init+0x90>)
 800128c:	2200      	movs	r2, #0
 800128e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001290:	4811      	ldr	r0, [pc, #68]	@ (80012d8 <MX_USART1_UART_Init+0x90>)
 8001292:	f004 fc27 	bl	8005ae4 <HAL_UART_Init>
 8001296:	4603      	mov	r3, r0
 8001298:	2b00      	cmp	r3, #0
 800129a:	d001      	beq.n	80012a0 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 800129c:	f000 f9c8 	bl	8001630 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80012a0:	2100      	movs	r1, #0
 80012a2:	480d      	ldr	r0, [pc, #52]	@ (80012d8 <MX_USART1_UART_Init+0x90>)
 80012a4:	f005 fdc1 	bl	8006e2a <HAL_UARTEx_SetTxFifoThreshold>
 80012a8:	4603      	mov	r3, r0
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d001      	beq.n	80012b2 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 80012ae:	f000 f9bf 	bl	8001630 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80012b2:	2100      	movs	r1, #0
 80012b4:	4808      	ldr	r0, [pc, #32]	@ (80012d8 <MX_USART1_UART_Init+0x90>)
 80012b6:	f005 fdf6 	bl	8006ea6 <HAL_UARTEx_SetRxFifoThreshold>
 80012ba:	4603      	mov	r3, r0
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d001      	beq.n	80012c4 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 80012c0:	f000 f9b6 	bl	8001630 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80012c4:	4804      	ldr	r0, [pc, #16]	@ (80012d8 <MX_USART1_UART_Init+0x90>)
 80012c6:	f005 fd77 	bl	8006db8 <HAL_UARTEx_DisableFifoMode>
 80012ca:	4603      	mov	r3, r0
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d001      	beq.n	80012d4 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 80012d0:	f000 f9ae 	bl	8001630 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80012d4:	bf00      	nop
 80012d6:	bd80      	pop	{r7, pc}
 80012d8:	240000c8 	.word	0x240000c8
 80012dc:	40011000 	.word	0x40011000

080012e0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b08e      	sub	sp, #56	@ 0x38
 80012e4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012e6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80012ea:	2200      	movs	r2, #0
 80012ec:	601a      	str	r2, [r3, #0]
 80012ee:	605a      	str	r2, [r3, #4]
 80012f0:	609a      	str	r2, [r3, #8]
 80012f2:	60da      	str	r2, [r3, #12]
 80012f4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80012f6:	4bc1      	ldr	r3, [pc, #772]	@ (80015fc <MX_GPIO_Init+0x31c>)
 80012f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80012fc:	4abf      	ldr	r2, [pc, #764]	@ (80015fc <MX_GPIO_Init+0x31c>)
 80012fe:	f043 0302 	orr.w	r3, r3, #2
 8001302:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001306:	4bbd      	ldr	r3, [pc, #756]	@ (80015fc <MX_GPIO_Init+0x31c>)
 8001308:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800130c:	f003 0302 	and.w	r3, r3, #2
 8001310:	623b      	str	r3, [r7, #32]
 8001312:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001314:	4bb9      	ldr	r3, [pc, #740]	@ (80015fc <MX_GPIO_Init+0x31c>)
 8001316:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800131a:	4ab8      	ldr	r2, [pc, #736]	@ (80015fc <MX_GPIO_Init+0x31c>)
 800131c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001320:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001324:	4bb5      	ldr	r3, [pc, #724]	@ (80015fc <MX_GPIO_Init+0x31c>)
 8001326:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800132a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800132e:	61fb      	str	r3, [r7, #28]
 8001330:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001332:	4bb2      	ldr	r3, [pc, #712]	@ (80015fc <MX_GPIO_Init+0x31c>)
 8001334:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001338:	4ab0      	ldr	r2, [pc, #704]	@ (80015fc <MX_GPIO_Init+0x31c>)
 800133a:	f043 0308 	orr.w	r3, r3, #8
 800133e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001342:	4bae      	ldr	r3, [pc, #696]	@ (80015fc <MX_GPIO_Init+0x31c>)
 8001344:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001348:	f003 0308 	and.w	r3, r3, #8
 800134c:	61bb      	str	r3, [r7, #24]
 800134e:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001350:	4baa      	ldr	r3, [pc, #680]	@ (80015fc <MX_GPIO_Init+0x31c>)
 8001352:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001356:	4aa9      	ldr	r2, [pc, #676]	@ (80015fc <MX_GPIO_Init+0x31c>)
 8001358:	f043 0301 	orr.w	r3, r3, #1
 800135c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001360:	4ba6      	ldr	r3, [pc, #664]	@ (80015fc <MX_GPIO_Init+0x31c>)
 8001362:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001366:	f003 0301 	and.w	r3, r3, #1
 800136a:	617b      	str	r3, [r7, #20]
 800136c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800136e:	4ba3      	ldr	r3, [pc, #652]	@ (80015fc <MX_GPIO_Init+0x31c>)
 8001370:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001374:	4aa1      	ldr	r2, [pc, #644]	@ (80015fc <MX_GPIO_Init+0x31c>)
 8001376:	f043 0310 	orr.w	r3, r3, #16
 800137a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800137e:	4b9f      	ldr	r3, [pc, #636]	@ (80015fc <MX_GPIO_Init+0x31c>)
 8001380:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001384:	f003 0310 	and.w	r3, r3, #16
 8001388:	613b      	str	r3, [r7, #16]
 800138a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800138c:	4b9b      	ldr	r3, [pc, #620]	@ (80015fc <MX_GPIO_Init+0x31c>)
 800138e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001392:	4a9a      	ldr	r2, [pc, #616]	@ (80015fc <MX_GPIO_Init+0x31c>)
 8001394:	f043 0304 	orr.w	r3, r3, #4
 8001398:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800139c:	4b97      	ldr	r3, [pc, #604]	@ (80015fc <MX_GPIO_Init+0x31c>)
 800139e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80013a2:	f003 0304 	and.w	r3, r3, #4
 80013a6:	60fb      	str	r3, [r7, #12]
 80013a8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80013aa:	4b94      	ldr	r3, [pc, #592]	@ (80015fc <MX_GPIO_Init+0x31c>)
 80013ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80013b0:	4a92      	ldr	r2, [pc, #584]	@ (80015fc <MX_GPIO_Init+0x31c>)
 80013b2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80013b6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80013ba:	4b90      	ldr	r3, [pc, #576]	@ (80015fc <MX_GPIO_Init+0x31c>)
 80013bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80013c0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80013c4:	60bb      	str	r3, [r7, #8]
 80013c6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80013c8:	4b8c      	ldr	r3, [pc, #560]	@ (80015fc <MX_GPIO_Init+0x31c>)
 80013ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80013ce:	4a8b      	ldr	r2, [pc, #556]	@ (80015fc <MX_GPIO_Init+0x31c>)
 80013d0:	f043 0320 	orr.w	r3, r3, #32
 80013d4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80013d8:	4b88      	ldr	r3, [pc, #544]	@ (80015fc <MX_GPIO_Init+0x31c>)
 80013da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80013de:	f003 0320 	and.w	r3, r3, #32
 80013e2:	607b      	str	r3, [r7, #4]
 80013e4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, Detectn_Pin|LCD_DISP_Pin, GPIO_PIN_RESET);
 80013e6:	2200      	movs	r2, #0
 80013e8:	f240 4102 	movw	r1, #1026	@ 0x402
 80013ec:	4884      	ldr	r0, [pc, #528]	@ (8001600 <MX_GPIO_Init+0x320>)
 80013ee:	f000 ff43 	bl	8002278 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, ARD_D8_Pin|STMOD_17_Pin|STMOD_19_Pin|STMOD_18_Pin, GPIO_PIN_RESET);
 80013f2:	2200      	movs	r2, #0
 80013f4:	f44f 61d1 	mov.w	r1, #1672	@ 0x688
 80013f8:	4882      	ldr	r0, [pc, #520]	@ (8001604 <MX_GPIO_Init+0x324>)
 80013fa:	f000 ff3d 	bl	8002278 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LCD_BL_CTRL_Pin|ARD_D7_Pin|MEMS_LED_Pin|ARD_D4_Pin
 80013fe:	2200      	movs	r2, #0
 8001400:	f248 1138 	movw	r1, #33080	@ 0x8138
 8001404:	4880      	ldr	r0, [pc, #512]	@ (8001608 <MX_GPIO_Init+0x328>)
 8001406:	f000 ff37 	bl	8002278 <HAL_GPIO_WritePin>
                          |ARD_D2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, USER_LED2_Pin|USER_LED1_Pin, GPIO_PIN_RESET);
 800140a:	2200      	movs	r2, #0
 800140c:	210c      	movs	r1, #12
 800140e:	487f      	ldr	r0, [pc, #508]	@ (800160c <MX_GPIO_Init+0x32c>)
 8001410:	f000 ff32 	bl	8002278 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(STMOD_20_GPIO_Port, STMOD_20_Pin, GPIO_PIN_RESET);
 8001414:	2200      	movs	r2, #0
 8001416:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800141a:	487d      	ldr	r0, [pc, #500]	@ (8001610 <MX_GPIO_Init+0x330>)
 800141c:	f000 ff2c 	bl	8002278 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, LCD_RST_Pin|USB_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8001420:	2200      	movs	r2, #0
 8001422:	2160      	movs	r1, #96	@ 0x60
 8001424:	487b      	ldr	r0, [pc, #492]	@ (8001614 <MX_GPIO_Init+0x334>)
 8001426:	f000 ff27 	bl	8002278 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : Detectn_Pin LCD_DISP_Pin */
  GPIO_InitStruct.Pin = Detectn_Pin|LCD_DISP_Pin;
 800142a:	f240 4302 	movw	r3, #1026	@ 0x402
 800142e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001430:	2301      	movs	r3, #1
 8001432:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001434:	2300      	movs	r3, #0
 8001436:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001438:	2300      	movs	r3, #0
 800143a:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800143c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001440:	4619      	mov	r1, r3
 8001442:	486f      	ldr	r0, [pc, #444]	@ (8001600 <MX_GPIO_Init+0x320>)
 8001444:	f000 fd70 	bl	8001f28 <HAL_GPIO_Init>

  /*Configure GPIO pins : SAI4_D2_Pin SAI4_CK2_Pin */
  GPIO_InitStruct.Pin = SAI4_D2_Pin|SAI4_CK2_Pin;
 8001448:	2330      	movs	r3, #48	@ 0x30
 800144a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800144c:	2302      	movs	r3, #2
 800144e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001450:	2300      	movs	r3, #0
 8001452:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001454:	2300      	movs	r3, #0
 8001456:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI4;
 8001458:	230a      	movs	r3, #10
 800145a:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800145c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001460:	4619      	mov	r1, r3
 8001462:	4868      	ldr	r0, [pc, #416]	@ (8001604 <MX_GPIO_Init+0x324>)
 8001464:	f000 fd60 	bl	8001f28 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D8_Pin STMOD_17_Pin STMOD_19_Pin STMOD_18_Pin */
  GPIO_InitStruct.Pin = ARD_D8_Pin|STMOD_17_Pin|STMOD_19_Pin|STMOD_18_Pin;
 8001468:	f44f 63d1 	mov.w	r3, #1672	@ 0x688
 800146c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800146e:	2301      	movs	r3, #1
 8001470:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001472:	2300      	movs	r3, #0
 8001474:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001476:	2300      	movs	r3, #0
 8001478:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800147a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800147e:	4619      	mov	r1, r3
 8001480:	4860      	ldr	r0, [pc, #384]	@ (8001604 <MX_GPIO_Init+0x324>)
 8001482:	f000 fd51 	bl	8001f28 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_FS_OVCR_Pin CTP_INT_Pin */
  GPIO_InitStruct.Pin = USB_FS_OVCR_Pin|CTP_INT_Pin;
 8001486:	f242 0304 	movw	r3, #8196	@ 0x2004
 800148a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800148c:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001490:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001492:	2300      	movs	r3, #0
 8001494:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001496:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800149a:	4619      	mov	r1, r3
 800149c:	485a      	ldr	r0, [pc, #360]	@ (8001608 <MX_GPIO_Init+0x328>)
 800149e:	f000 fd43 	bl	8001f28 <HAL_GPIO_Init>

  /*Configure GPIO pin : Blue_button_B2_used_for_wakeup_Pin */
  GPIO_InitStruct.Pin = Blue_button_B2_used_for_wakeup_Pin;
 80014a2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80014a6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014a8:	2300      	movs	r3, #0
 80014aa:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ac:	2300      	movs	r3, #0
 80014ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(Blue_button_B2_used_for_wakeup_GPIO_Port, &GPIO_InitStruct);
 80014b0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80014b4:	4619      	mov	r1, r3
 80014b6:	4855      	ldr	r0, [pc, #340]	@ (800160c <MX_GPIO_Init+0x32c>)
 80014b8:	f000 fd36 	bl	8001f28 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_ID_Pin */
  GPIO_InitStruct.Pin = USB_FS_ID_Pin;
 80014bc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80014c0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014c2:	2302      	movs	r3, #2
 80014c4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014c6:	2300      	movs	r3, #0
 80014c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014ca:	2300      	movs	r3, #0
 80014cc:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_HS;
 80014ce:	230a      	movs	r3, #10
 80014d0:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(USB_FS_ID_GPIO_Port, &GPIO_InitStruct);
 80014d2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80014d6:	4619      	mov	r1, r3
 80014d8:	484f      	ldr	r0, [pc, #316]	@ (8001618 <MX_GPIO_Init+0x338>)
 80014da:	f000 fd25 	bl	8001f28 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_BL_CTRL_Pin ARD_D7_Pin MEMS_LED_Pin ARD_D4_Pin
                           ARD_D2_Pin */
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin|ARD_D7_Pin|MEMS_LED_Pin|ARD_D4_Pin
 80014de:	f248 1338 	movw	r3, #33080	@ 0x8138
 80014e2:	627b      	str	r3, [r7, #36]	@ 0x24
                          |ARD_D2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014e4:	2301      	movs	r3, #1
 80014e6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014e8:	2300      	movs	r3, #0
 80014ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014ec:	2300      	movs	r3, #0
 80014ee:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80014f0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80014f4:	4619      	mov	r1, r3
 80014f6:	4844      	ldr	r0, [pc, #272]	@ (8001608 <MX_GPIO_Init+0x328>)
 80014f8:	f000 fd16 	bl	8001f28 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_FS_VBUS_Pin;
 80014fc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001500:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001502:	2300      	movs	r3, #0
 8001504:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001506:	2300      	movs	r3, #0
 8001508:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(USB_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 800150a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800150e:	4619      	mov	r1, r3
 8001510:	4841      	ldr	r0, [pc, #260]	@ (8001618 <MX_GPIO_Init+0x338>)
 8001512:	f000 fd09 	bl	8001f28 <HAL_GPIO_Init>

  /*Configure GPIO pin : uSD_Detect_Pin */
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 8001516:	2320      	movs	r3, #32
 8001518:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800151a:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800151e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001520:	2300      	movs	r3, #0
 8001522:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 8001524:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001528:	4619      	mov	r1, r3
 800152a:	4839      	ldr	r0, [pc, #228]	@ (8001610 <MX_GPIO_Init+0x330>)
 800152c:	f000 fcfc 	bl	8001f28 <HAL_GPIO_Init>

  /*Configure GPIO pins : USER_LED2_Pin USER_LED1_Pin */
  GPIO_InitStruct.Pin = USER_LED2_Pin|USER_LED1_Pin;
 8001530:	230c      	movs	r3, #12
 8001532:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001534:	2301      	movs	r3, #1
 8001536:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001538:	2300      	movs	r3, #0
 800153a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800153c:	2300      	movs	r3, #0
 800153e:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001540:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001544:	4619      	mov	r1, r3
 8001546:	4831      	ldr	r0, [pc, #196]	@ (800160c <MX_GPIO_Init+0x32c>)
 8001548:	f000 fcee 	bl	8001f28 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI5_MISO_Pin */
  GPIO_InitStruct.Pin = SPI5_MISO_Pin;
 800154c:	2380      	movs	r3, #128	@ 0x80
 800154e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001550:	2302      	movs	r3, #2
 8001552:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001554:	2300      	movs	r3, #0
 8001556:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001558:	2300      	movs	r3, #0
 800155a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 800155c:	2305      	movs	r3, #5
 800155e:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(SPI5_MISO_GPIO_Port, &GPIO_InitStruct);
 8001560:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001564:	4619      	mov	r1, r3
 8001566:	482b      	ldr	r0, [pc, #172]	@ (8001614 <MX_GPIO_Init+0x334>)
 8001568:	f000 fcde 	bl	8001f28 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI5_MOSI_Pin */
  GPIO_InitStruct.Pin = SPI5_MOSI_Pin;
 800156c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001570:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001572:	2302      	movs	r3, #2
 8001574:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001576:	2300      	movs	r3, #0
 8001578:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800157a:	2300      	movs	r3, #0
 800157c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 800157e:	2305      	movs	r3, #5
 8001580:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(SPI5_MOSI_GPIO_Port, &GPIO_InitStruct);
 8001582:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001586:	4619      	mov	r1, r3
 8001588:	4821      	ldr	r0, [pc, #132]	@ (8001610 <MX_GPIO_Init+0x330>)
 800158a:	f000 fccd 	bl	8001f28 <HAL_GPIO_Init>

  /*Configure GPIO pin : Audio_Int_Pin */
  GPIO_InitStruct.Pin = Audio_Int_Pin;
 800158e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001592:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001594:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001598:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800159a:	2300      	movs	r3, #0
 800159c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(Audio_Int_GPIO_Port, &GPIO_InitStruct);
 800159e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80015a2:	4619      	mov	r1, r3
 80015a4:	4817      	ldr	r0, [pc, #92]	@ (8001604 <MX_GPIO_Init+0x324>)
 80015a6:	f000 fcbf 	bl	8001f28 <HAL_GPIO_Init>

  /*Configure GPIO pin : STMOD_20_Pin */
  GPIO_InitStruct.Pin = STMOD_20_Pin;
 80015aa:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80015ae:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015b0:	2301      	movs	r3, #1
 80015b2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015b4:	2300      	movs	r3, #0
 80015b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015b8:	2300      	movs	r3, #0
 80015ba:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(STMOD_20_GPIO_Port, &GPIO_InitStruct);
 80015bc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80015c0:	4619      	mov	r1, r3
 80015c2:	4813      	ldr	r0, [pc, #76]	@ (8001610 <MX_GPIO_Init+0x330>)
 80015c4:	f000 fcb0 	bl	8001f28 <HAL_GPIO_Init>

  /*Configure GPIO pin : STMOD_11_INT_Pin */
  GPIO_InitStruct.Pin = STMOD_11_INT_Pin;
 80015c8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80015cc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80015ce:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80015d2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015d4:	2300      	movs	r3, #0
 80015d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(STMOD_11_INT_GPIO_Port, &GPIO_InitStruct);
 80015d8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80015dc:	4619      	mov	r1, r3
 80015de:	480d      	ldr	r0, [pc, #52]	@ (8001614 <MX_GPIO_Init+0x334>)
 80015e0:	f000 fca2 	bl	8001f28 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_RST_Pin USB_FS_PWR_EN_Pin */
  GPIO_InitStruct.Pin = LCD_RST_Pin|USB_FS_PWR_EN_Pin;
 80015e4:	2360      	movs	r3, #96	@ 0x60
 80015e6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015e8:	2301      	movs	r3, #1
 80015ea:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ec:	2300      	movs	r3, #0
 80015ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015f0:	2300      	movs	r3, #0
 80015f2:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80015f4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80015f8:	e010      	b.n	800161c <MX_GPIO_Init+0x33c>
 80015fa:	bf00      	nop
 80015fc:	58024400 	.word	0x58024400
 8001600:	58020c00 	.word	0x58020c00
 8001604:	58021000 	.word	0x58021000
 8001608:	58021800 	.word	0x58021800
 800160c:	58020800 	.word	0x58020800
 8001610:	58021400 	.word	0x58021400
 8001614:	58021c00 	.word	0x58021c00
 8001618:	58020000 	.word	0x58020000
 800161c:	4619      	mov	r1, r3
 800161e:	4803      	ldr	r0, [pc, #12]	@ (800162c <MX_GPIO_Init+0x34c>)
 8001620:	f000 fc82 	bl	8001f28 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001624:	bf00      	nop
 8001626:	3738      	adds	r7, #56	@ 0x38
 8001628:	46bd      	mov	sp, r7
 800162a:	bd80      	pop	{r7, pc}
 800162c:	58021c00 	.word	0x58021c00

08001630 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001630:	b480      	push	{r7}
 8001632:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001634:	b672      	cpsid	i
}
 8001636:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001638:	bf00      	nop
 800163a:	e7fd      	b.n	8001638 <Error_Handler+0x8>

0800163c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800163c:	b480      	push	{r7}
 800163e:	b083      	sub	sp, #12
 8001640:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001642:	4b0a      	ldr	r3, [pc, #40]	@ (800166c <HAL_MspInit+0x30>)
 8001644:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001648:	4a08      	ldr	r2, [pc, #32]	@ (800166c <HAL_MspInit+0x30>)
 800164a:	f043 0302 	orr.w	r3, r3, #2
 800164e:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001652:	4b06      	ldr	r3, [pc, #24]	@ (800166c <HAL_MspInit+0x30>)
 8001654:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001658:	f003 0302 	and.w	r3, r3, #2
 800165c:	607b      	str	r3, [r7, #4]
 800165e:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001660:	bf00      	nop
 8001662:	370c      	adds	r7, #12
 8001664:	46bd      	mov	sp, r7
 8001666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166a:	4770      	bx	lr
 800166c:	58024400 	.word	0x58024400

08001670 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001670:	b480      	push	{r7}
 8001672:	b087      	sub	sp, #28
 8001674:	af00      	add	r7, sp, #0
 8001676:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	4a20      	ldr	r2, [pc, #128]	@ (8001700 <HAL_TIM_PWM_MspInit+0x90>)
 800167e:	4293      	cmp	r3, r2
 8001680:	d10f      	bne.n	80016a2 <HAL_TIM_PWM_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001682:	4b20      	ldr	r3, [pc, #128]	@ (8001704 <HAL_TIM_PWM_MspInit+0x94>)
 8001684:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001688:	4a1e      	ldr	r2, [pc, #120]	@ (8001704 <HAL_TIM_PWM_MspInit+0x94>)
 800168a:	f043 0301 	orr.w	r3, r3, #1
 800168e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001692:	4b1c      	ldr	r3, [pc, #112]	@ (8001704 <HAL_TIM_PWM_MspInit+0x94>)
 8001694:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001698:	f003 0301 	and.w	r3, r3, #1
 800169c:	617b      	str	r3, [r7, #20]
 800169e:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 80016a0:	e028      	b.n	80016f4 <HAL_TIM_PWM_MspInit+0x84>
  else if(htim_pwm->Instance==TIM4)
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	4a18      	ldr	r2, [pc, #96]	@ (8001708 <HAL_TIM_PWM_MspInit+0x98>)
 80016a8:	4293      	cmp	r3, r2
 80016aa:	d10f      	bne.n	80016cc <HAL_TIM_PWM_MspInit+0x5c>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80016ac:	4b15      	ldr	r3, [pc, #84]	@ (8001704 <HAL_TIM_PWM_MspInit+0x94>)
 80016ae:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80016b2:	4a14      	ldr	r2, [pc, #80]	@ (8001704 <HAL_TIM_PWM_MspInit+0x94>)
 80016b4:	f043 0304 	orr.w	r3, r3, #4
 80016b8:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80016bc:	4b11      	ldr	r3, [pc, #68]	@ (8001704 <HAL_TIM_PWM_MspInit+0x94>)
 80016be:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80016c2:	f003 0304 	and.w	r3, r3, #4
 80016c6:	613b      	str	r3, [r7, #16]
 80016c8:	693b      	ldr	r3, [r7, #16]
}
 80016ca:	e013      	b.n	80016f4 <HAL_TIM_PWM_MspInit+0x84>
  else if(htim_pwm->Instance==TIM5)
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	4a0e      	ldr	r2, [pc, #56]	@ (800170c <HAL_TIM_PWM_MspInit+0x9c>)
 80016d2:	4293      	cmp	r3, r2
 80016d4:	d10e      	bne.n	80016f4 <HAL_TIM_PWM_MspInit+0x84>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80016d6:	4b0b      	ldr	r3, [pc, #44]	@ (8001704 <HAL_TIM_PWM_MspInit+0x94>)
 80016d8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80016dc:	4a09      	ldr	r2, [pc, #36]	@ (8001704 <HAL_TIM_PWM_MspInit+0x94>)
 80016de:	f043 0308 	orr.w	r3, r3, #8
 80016e2:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80016e6:	4b07      	ldr	r3, [pc, #28]	@ (8001704 <HAL_TIM_PWM_MspInit+0x94>)
 80016e8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80016ec:	f003 0308 	and.w	r3, r3, #8
 80016f0:	60fb      	str	r3, [r7, #12]
 80016f2:	68fb      	ldr	r3, [r7, #12]
}
 80016f4:	bf00      	nop
 80016f6:	371c      	adds	r7, #28
 80016f8:	46bd      	mov	sp, r7
 80016fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fe:	4770      	bx	lr
 8001700:	40010000 	.word	0x40010000
 8001704:	58024400 	.word	0x58024400
 8001708:	40000800 	.word	0x40000800
 800170c:	40000c00 	.word	0x40000c00

08001710 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	b08c      	sub	sp, #48	@ 0x30
 8001714:	af00      	add	r7, sp, #0
 8001716:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001718:	f107 031c 	add.w	r3, r7, #28
 800171c:	2200      	movs	r2, #0
 800171e:	601a      	str	r2, [r3, #0]
 8001720:	605a      	str	r2, [r3, #4]
 8001722:	609a      	str	r2, [r3, #8]
 8001724:	60da      	str	r2, [r3, #12]
 8001726:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	4a48      	ldr	r2, [pc, #288]	@ (8001850 <HAL_TIM_MspPostInit+0x140>)
 800172e:	4293      	cmp	r3, r2
 8001730:	d120      	bne.n	8001774 <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001732:	4b48      	ldr	r3, [pc, #288]	@ (8001854 <HAL_TIM_MspPostInit+0x144>)
 8001734:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001738:	4a46      	ldr	r2, [pc, #280]	@ (8001854 <HAL_TIM_MspPostInit+0x144>)
 800173a:	f043 0310 	orr.w	r3, r3, #16
 800173e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001742:	4b44      	ldr	r3, [pc, #272]	@ (8001854 <HAL_TIM_MspPostInit+0x144>)
 8001744:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001748:	f003 0310 	and.w	r3, r3, #16
 800174c:	61bb      	str	r3, [r7, #24]
 800174e:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = ARD_D5_Pin;
 8001750:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001754:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001756:	2302      	movs	r3, #2
 8001758:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800175a:	2300      	movs	r3, #0
 800175c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800175e:	2300      	movs	r3, #0
 8001760:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001762:	2301      	movs	r3, #1
 8001764:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(ARD_D5_GPIO_Port, &GPIO_InitStruct);
 8001766:	f107 031c 	add.w	r3, r7, #28
 800176a:	4619      	mov	r1, r3
 800176c:	483a      	ldr	r0, [pc, #232]	@ (8001858 <HAL_TIM_MspPostInit+0x148>)
 800176e:	f000 fbdb 	bl	8001f28 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 8001772:	e068      	b.n	8001846 <HAL_TIM_MspPostInit+0x136>
  else if(htim->Instance==TIM4)
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	4a38      	ldr	r2, [pc, #224]	@ (800185c <HAL_TIM_MspPostInit+0x14c>)
 800177a:	4293      	cmp	r3, r2
 800177c:	d13f      	bne.n	80017fe <HAL_TIM_MspPostInit+0xee>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800177e:	4b35      	ldr	r3, [pc, #212]	@ (8001854 <HAL_TIM_MspPostInit+0x144>)
 8001780:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001784:	4a33      	ldr	r2, [pc, #204]	@ (8001854 <HAL_TIM_MspPostInit+0x144>)
 8001786:	f043 0302 	orr.w	r3, r3, #2
 800178a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800178e:	4b31      	ldr	r3, [pc, #196]	@ (8001854 <HAL_TIM_MspPostInit+0x144>)
 8001790:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001794:	f003 0302 	and.w	r3, r3, #2
 8001798:	617b      	str	r3, [r7, #20]
 800179a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800179c:	4b2d      	ldr	r3, [pc, #180]	@ (8001854 <HAL_TIM_MspPostInit+0x144>)
 800179e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80017a2:	4a2c      	ldr	r2, [pc, #176]	@ (8001854 <HAL_TIM_MspPostInit+0x144>)
 80017a4:	f043 0308 	orr.w	r3, r3, #8
 80017a8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80017ac:	4b29      	ldr	r3, [pc, #164]	@ (8001854 <HAL_TIM_MspPostInit+0x144>)
 80017ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80017b2:	f003 0308 	and.w	r3, r3, #8
 80017b6:	613b      	str	r3, [r7, #16]
 80017b8:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = ARD_D9_Pin;
 80017ba:	2380      	movs	r3, #128	@ 0x80
 80017bc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017be:	2302      	movs	r3, #2
 80017c0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017c2:	2300      	movs	r3, #0
 80017c4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017c6:	2300      	movs	r3, #0
 80017c8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80017ca:	2302      	movs	r3, #2
 80017cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(ARD_D9_GPIO_Port, &GPIO_InitStruct);
 80017ce:	f107 031c 	add.w	r3, r7, #28
 80017d2:	4619      	mov	r1, r3
 80017d4:	4822      	ldr	r0, [pc, #136]	@ (8001860 <HAL_TIM_MspPostInit+0x150>)
 80017d6:	f000 fba7 	bl	8001f28 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = STMOD_14_PWM_Pin|ARD_D6_Pin;
 80017da:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 80017de:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017e0:	2302      	movs	r3, #2
 80017e2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017e4:	2300      	movs	r3, #0
 80017e6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017e8:	2300      	movs	r3, #0
 80017ea:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80017ec:	2302      	movs	r3, #2
 80017ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80017f0:	f107 031c 	add.w	r3, r7, #28
 80017f4:	4619      	mov	r1, r3
 80017f6:	481b      	ldr	r0, [pc, #108]	@ (8001864 <HAL_TIM_MspPostInit+0x154>)
 80017f8:	f000 fb96 	bl	8001f28 <HAL_GPIO_Init>
}
 80017fc:	e023      	b.n	8001846 <HAL_TIM_MspPostInit+0x136>
  else if(htim->Instance==TIM5)
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	4a19      	ldr	r2, [pc, #100]	@ (8001868 <HAL_TIM_MspPostInit+0x158>)
 8001804:	4293      	cmp	r3, r2
 8001806:	d11e      	bne.n	8001846 <HAL_TIM_MspPostInit+0x136>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001808:	4b12      	ldr	r3, [pc, #72]	@ (8001854 <HAL_TIM_MspPostInit+0x144>)
 800180a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800180e:	4a11      	ldr	r2, [pc, #68]	@ (8001854 <HAL_TIM_MspPostInit+0x144>)
 8001810:	f043 0301 	orr.w	r3, r3, #1
 8001814:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001818:	4b0e      	ldr	r3, [pc, #56]	@ (8001854 <HAL_TIM_MspPostInit+0x144>)
 800181a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800181e:	f003 0301 	and.w	r3, r3, #1
 8001822:	60fb      	str	r3, [r7, #12]
 8001824:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ARD_D3_Pin;
 8001826:	2301      	movs	r3, #1
 8001828:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800182a:	2302      	movs	r3, #2
 800182c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800182e:	2300      	movs	r3, #0
 8001830:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001832:	2300      	movs	r3, #0
 8001834:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8001836:	2302      	movs	r3, #2
 8001838:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(ARD_D3_GPIO_Port, &GPIO_InitStruct);
 800183a:	f107 031c 	add.w	r3, r7, #28
 800183e:	4619      	mov	r1, r3
 8001840:	480a      	ldr	r0, [pc, #40]	@ (800186c <HAL_TIM_MspPostInit+0x15c>)
 8001842:	f000 fb71 	bl	8001f28 <HAL_GPIO_Init>
}
 8001846:	bf00      	nop
 8001848:	3730      	adds	r7, #48	@ 0x30
 800184a:	46bd      	mov	sp, r7
 800184c:	bd80      	pop	{r7, pc}
 800184e:	bf00      	nop
 8001850:	40010000 	.word	0x40010000
 8001854:	58024400 	.word	0x58024400
 8001858:	58021000 	.word	0x58021000
 800185c:	40000800 	.word	0x40000800
 8001860:	58020400 	.word	0x58020400
 8001864:	58020c00 	.word	0x58020c00
 8001868:	40000c00 	.word	0x40000c00
 800186c:	58020000 	.word	0x58020000

08001870 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	b0ba      	sub	sp, #232	@ 0xe8
 8001874:	af00      	add	r7, sp, #0
 8001876:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001878:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800187c:	2200      	movs	r2, #0
 800187e:	601a      	str	r2, [r3, #0]
 8001880:	605a      	str	r2, [r3, #4]
 8001882:	609a      	str	r2, [r3, #8]
 8001884:	60da      	str	r2, [r3, #12]
 8001886:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001888:	f107 0318 	add.w	r3, r7, #24
 800188c:	22b8      	movs	r2, #184	@ 0xb8
 800188e:	2100      	movs	r1, #0
 8001890:	4618      	mov	r0, r3
 8001892:	f005 fbb5 	bl	8007000 <memset>
  if(huart->Instance==USART1)
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	4a4d      	ldr	r2, [pc, #308]	@ (80019d0 <HAL_UART_MspInit+0x160>)
 800189c:	4293      	cmp	r3, r2
 800189e:	d147      	bne.n	8001930 <HAL_UART_MspInit+0xc0>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80018a0:	f04f 0201 	mov.w	r2, #1
 80018a4:	f04f 0300 	mov.w	r3, #0
 80018a8:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16910CLKSOURCE_D2PCLK2;
 80018ac:	2300      	movs	r3, #0
 80018ae:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80018b2:	f107 0318 	add.w	r3, r7, #24
 80018b6:	4618      	mov	r0, r3
 80018b8:	f001 fcb8 	bl	800322c <HAL_RCCEx_PeriphCLKConfig>
 80018bc:	4603      	mov	r3, r0
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d001      	beq.n	80018c6 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 80018c2:	f7ff feb5 	bl	8001630 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80018c6:	4b43      	ldr	r3, [pc, #268]	@ (80019d4 <HAL_UART_MspInit+0x164>)
 80018c8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80018cc:	4a41      	ldr	r2, [pc, #260]	@ (80019d4 <HAL_UART_MspInit+0x164>)
 80018ce:	f043 0310 	orr.w	r3, r3, #16
 80018d2:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80018d6:	4b3f      	ldr	r3, [pc, #252]	@ (80019d4 <HAL_UART_MspInit+0x164>)
 80018d8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80018dc:	f003 0310 	and.w	r3, r3, #16
 80018e0:	617b      	str	r3, [r7, #20]
 80018e2:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80018e4:	4b3b      	ldr	r3, [pc, #236]	@ (80019d4 <HAL_UART_MspInit+0x164>)
 80018e6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80018ea:	4a3a      	ldr	r2, [pc, #232]	@ (80019d4 <HAL_UART_MspInit+0x164>)
 80018ec:	f043 0302 	orr.w	r3, r3, #2
 80018f0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80018f4:	4b37      	ldr	r3, [pc, #220]	@ (80019d4 <HAL_UART_MspInit+0x164>)
 80018f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80018fa:	f003 0302 	and.w	r3, r3, #2
 80018fe:	613b      	str	r3, [r7, #16]
 8001900:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PB15     ------> USART1_RX
    PB14     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = ARD_D0_Pin|ARD_D1_Pin;
 8001902:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8001906:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800190a:	2302      	movs	r3, #2
 800190c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001910:	2300      	movs	r3, #0
 8001912:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001916:	2300      	movs	r3, #0
 8001918:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 800191c:	2304      	movs	r3, #4
 800191e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001922:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001926:	4619      	mov	r1, r3
 8001928:	482b      	ldr	r0, [pc, #172]	@ (80019d8 <HAL_UART_MspInit+0x168>)
 800192a:	f000 fafd 	bl	8001f28 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800192e:	e04b      	b.n	80019c8 <HAL_UART_MspInit+0x158>
  else if(huart->Instance==USART3)
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	4a29      	ldr	r2, [pc, #164]	@ (80019dc <HAL_UART_MspInit+0x16c>)
 8001936:	4293      	cmp	r3, r2
 8001938:	d146      	bne.n	80019c8 <HAL_UART_MspInit+0x158>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800193a:	f04f 0202 	mov.w	r2, #2
 800193e:	f04f 0300 	mov.w	r3, #0
 8001942:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001946:	2300      	movs	r3, #0
 8001948:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800194c:	f107 0318 	add.w	r3, r7, #24
 8001950:	4618      	mov	r0, r3
 8001952:	f001 fc6b 	bl	800322c <HAL_RCCEx_PeriphCLKConfig>
 8001956:	4603      	mov	r3, r0
 8001958:	2b00      	cmp	r3, #0
 800195a:	d001      	beq.n	8001960 <HAL_UART_MspInit+0xf0>
      Error_Handler();
 800195c:	f7ff fe68 	bl	8001630 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001960:	4b1c      	ldr	r3, [pc, #112]	@ (80019d4 <HAL_UART_MspInit+0x164>)
 8001962:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001966:	4a1b      	ldr	r2, [pc, #108]	@ (80019d4 <HAL_UART_MspInit+0x164>)
 8001968:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800196c:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001970:	4b18      	ldr	r3, [pc, #96]	@ (80019d4 <HAL_UART_MspInit+0x164>)
 8001972:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001976:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800197a:	60fb      	str	r3, [r7, #12]
 800197c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800197e:	4b15      	ldr	r3, [pc, #84]	@ (80019d4 <HAL_UART_MspInit+0x164>)
 8001980:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001984:	4a13      	ldr	r2, [pc, #76]	@ (80019d4 <HAL_UART_MspInit+0x164>)
 8001986:	f043 0308 	orr.w	r3, r3, #8
 800198a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800198e:	4b11      	ldr	r3, [pc, #68]	@ (80019d4 <HAL_UART_MspInit+0x164>)
 8001990:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001994:	f003 0308 	and.w	r3, r3, #8
 8001998:	60bb      	str	r3, [r7, #8]
 800199a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = T_VCP_RX_Pin|T_VCP_TX_Pin;
 800199c:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80019a0:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019a4:	2302      	movs	r3, #2
 80019a6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019aa:	2300      	movs	r3, #0
 80019ac:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019b0:	2300      	movs	r3, #0
 80019b2:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80019b6:	2307      	movs	r3, #7
 80019b8:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80019bc:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80019c0:	4619      	mov	r1, r3
 80019c2:	4807      	ldr	r0, [pc, #28]	@ (80019e0 <HAL_UART_MspInit+0x170>)
 80019c4:	f000 fab0 	bl	8001f28 <HAL_GPIO_Init>
}
 80019c8:	bf00      	nop
 80019ca:	37e8      	adds	r7, #232	@ 0xe8
 80019cc:	46bd      	mov	sp, r7
 80019ce:	bd80      	pop	{r7, pc}
 80019d0:	40011000 	.word	0x40011000
 80019d4:	58024400 	.word	0x58024400
 80019d8:	58020400 	.word	0x58020400
 80019dc:	40004800 	.word	0x40004800
 80019e0:	58020c00 	.word	0x58020c00

080019e4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80019e4:	b480      	push	{r7}
 80019e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80019e8:	bf00      	nop
 80019ea:	e7fd      	b.n	80019e8 <NMI_Handler+0x4>

080019ec <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80019ec:	b480      	push	{r7}
 80019ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80019f0:	bf00      	nop
 80019f2:	e7fd      	b.n	80019f0 <HardFault_Handler+0x4>

080019f4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80019f4:	b480      	push	{r7}
 80019f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80019f8:	bf00      	nop
 80019fa:	e7fd      	b.n	80019f8 <MemManage_Handler+0x4>

080019fc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80019fc:	b480      	push	{r7}
 80019fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a00:	bf00      	nop
 8001a02:	e7fd      	b.n	8001a00 <BusFault_Handler+0x4>

08001a04 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a04:	b480      	push	{r7}
 8001a06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a08:	bf00      	nop
 8001a0a:	e7fd      	b.n	8001a08 <UsageFault_Handler+0x4>

08001a0c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a0c:	b480      	push	{r7}
 8001a0e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001a10:	bf00      	nop
 8001a12:	46bd      	mov	sp, r7
 8001a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a18:	4770      	bx	lr

08001a1a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a1a:	b480      	push	{r7}
 8001a1c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a1e:	bf00      	nop
 8001a20:	46bd      	mov	sp, r7
 8001a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a26:	4770      	bx	lr

08001a28 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a28:	b480      	push	{r7}
 8001a2a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a2c:	bf00      	nop
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a34:	4770      	bx	lr

08001a36 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a36:	b580      	push	{r7, lr}
 8001a38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a3a:	f000 f94d 	bl	8001cd8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a3e:	bf00      	nop
 8001a40:	bd80      	pop	{r7, pc}
	...

08001a44 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	b086      	sub	sp, #24
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001a4c:	4a14      	ldr	r2, [pc, #80]	@ (8001aa0 <_sbrk+0x5c>)
 8001a4e:	4b15      	ldr	r3, [pc, #84]	@ (8001aa4 <_sbrk+0x60>)
 8001a50:	1ad3      	subs	r3, r2, r3
 8001a52:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001a54:	697b      	ldr	r3, [r7, #20]
 8001a56:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001a58:	4b13      	ldr	r3, [pc, #76]	@ (8001aa8 <_sbrk+0x64>)
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d102      	bne.n	8001a66 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001a60:	4b11      	ldr	r3, [pc, #68]	@ (8001aa8 <_sbrk+0x64>)
 8001a62:	4a12      	ldr	r2, [pc, #72]	@ (8001aac <_sbrk+0x68>)
 8001a64:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001a66:	4b10      	ldr	r3, [pc, #64]	@ (8001aa8 <_sbrk+0x64>)
 8001a68:	681a      	ldr	r2, [r3, #0]
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	4413      	add	r3, r2
 8001a6e:	693a      	ldr	r2, [r7, #16]
 8001a70:	429a      	cmp	r2, r3
 8001a72:	d207      	bcs.n	8001a84 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001a74:	f005 facc 	bl	8007010 <__errno>
 8001a78:	4603      	mov	r3, r0
 8001a7a:	220c      	movs	r2, #12
 8001a7c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001a7e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001a82:	e009      	b.n	8001a98 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001a84:	4b08      	ldr	r3, [pc, #32]	@ (8001aa8 <_sbrk+0x64>)
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001a8a:	4b07      	ldr	r3, [pc, #28]	@ (8001aa8 <_sbrk+0x64>)
 8001a8c:	681a      	ldr	r2, [r3, #0]
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	4413      	add	r3, r2
 8001a92:	4a05      	ldr	r2, [pc, #20]	@ (8001aa8 <_sbrk+0x64>)
 8001a94:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001a96:	68fb      	ldr	r3, [r7, #12]
}
 8001a98:	4618      	mov	r0, r3
 8001a9a:	3718      	adds	r7, #24
 8001a9c:	46bd      	mov	sp, r7
 8001a9e:	bd80      	pop	{r7, pc}
 8001aa0:	24050000 	.word	0x24050000
 8001aa4:	00000400 	.word	0x00000400
 8001aa8:	2400015c 	.word	0x2400015c
 8001aac:	240002b0 	.word	0x240002b0

08001ab0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001ab0:	b480      	push	{r7}
 8001ab2:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001ab4:	4b32      	ldr	r3, [pc, #200]	@ (8001b80 <SystemInit+0xd0>)
 8001ab6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001aba:	4a31      	ldr	r2, [pc, #196]	@ (8001b80 <SystemInit+0xd0>)
 8001abc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001ac0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001ac4:	4b2f      	ldr	r3, [pc, #188]	@ (8001b84 <SystemInit+0xd4>)
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	f003 030f 	and.w	r3, r3, #15
 8001acc:	2b06      	cmp	r3, #6
 8001ace:	d807      	bhi.n	8001ae0 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001ad0:	4b2c      	ldr	r3, [pc, #176]	@ (8001b84 <SystemInit+0xd4>)
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	f023 030f 	bic.w	r3, r3, #15
 8001ad8:	4a2a      	ldr	r2, [pc, #168]	@ (8001b84 <SystemInit+0xd4>)
 8001ada:	f043 0307 	orr.w	r3, r3, #7
 8001ade:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001ae0:	4b29      	ldr	r3, [pc, #164]	@ (8001b88 <SystemInit+0xd8>)
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	4a28      	ldr	r2, [pc, #160]	@ (8001b88 <SystemInit+0xd8>)
 8001ae6:	f043 0301 	orr.w	r3, r3, #1
 8001aea:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001aec:	4b26      	ldr	r3, [pc, #152]	@ (8001b88 <SystemInit+0xd8>)
 8001aee:	2200      	movs	r2, #0
 8001af0:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001af2:	4b25      	ldr	r3, [pc, #148]	@ (8001b88 <SystemInit+0xd8>)
 8001af4:	681a      	ldr	r2, [r3, #0]
 8001af6:	4924      	ldr	r1, [pc, #144]	@ (8001b88 <SystemInit+0xd8>)
 8001af8:	4b24      	ldr	r3, [pc, #144]	@ (8001b8c <SystemInit+0xdc>)
 8001afa:	4013      	ands	r3, r2
 8001afc:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001afe:	4b21      	ldr	r3, [pc, #132]	@ (8001b84 <SystemInit+0xd4>)
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	f003 0308 	and.w	r3, r3, #8
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d007      	beq.n	8001b1a <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001b0a:	4b1e      	ldr	r3, [pc, #120]	@ (8001b84 <SystemInit+0xd4>)
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	f023 030f 	bic.w	r3, r3, #15
 8001b12:	4a1c      	ldr	r2, [pc, #112]	@ (8001b84 <SystemInit+0xd4>)
 8001b14:	f043 0307 	orr.w	r3, r3, #7
 8001b18:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8001b1a:	4b1b      	ldr	r3, [pc, #108]	@ (8001b88 <SystemInit+0xd8>)
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001b20:	4b19      	ldr	r3, [pc, #100]	@ (8001b88 <SystemInit+0xd8>)
 8001b22:	2200      	movs	r2, #0
 8001b24:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8001b26:	4b18      	ldr	r3, [pc, #96]	@ (8001b88 <SystemInit+0xd8>)
 8001b28:	2200      	movs	r2, #0
 8001b2a:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001b2c:	4b16      	ldr	r3, [pc, #88]	@ (8001b88 <SystemInit+0xd8>)
 8001b2e:	4a18      	ldr	r2, [pc, #96]	@ (8001b90 <SystemInit+0xe0>)
 8001b30:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001b32:	4b15      	ldr	r3, [pc, #84]	@ (8001b88 <SystemInit+0xd8>)
 8001b34:	4a17      	ldr	r2, [pc, #92]	@ (8001b94 <SystemInit+0xe4>)
 8001b36:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001b38:	4b13      	ldr	r3, [pc, #76]	@ (8001b88 <SystemInit+0xd8>)
 8001b3a:	4a17      	ldr	r2, [pc, #92]	@ (8001b98 <SystemInit+0xe8>)
 8001b3c:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001b3e:	4b12      	ldr	r3, [pc, #72]	@ (8001b88 <SystemInit+0xd8>)
 8001b40:	2200      	movs	r2, #0
 8001b42:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001b44:	4b10      	ldr	r3, [pc, #64]	@ (8001b88 <SystemInit+0xd8>)
 8001b46:	4a14      	ldr	r2, [pc, #80]	@ (8001b98 <SystemInit+0xe8>)
 8001b48:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001b4a:	4b0f      	ldr	r3, [pc, #60]	@ (8001b88 <SystemInit+0xd8>)
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001b50:	4b0d      	ldr	r3, [pc, #52]	@ (8001b88 <SystemInit+0xd8>)
 8001b52:	4a11      	ldr	r2, [pc, #68]	@ (8001b98 <SystemInit+0xe8>)
 8001b54:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001b56:	4b0c      	ldr	r3, [pc, #48]	@ (8001b88 <SystemInit+0xd8>)
 8001b58:	2200      	movs	r2, #0
 8001b5a:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001b5c:	4b0a      	ldr	r3, [pc, #40]	@ (8001b88 <SystemInit+0xd8>)
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	4a09      	ldr	r2, [pc, #36]	@ (8001b88 <SystemInit+0xd8>)
 8001b62:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001b66:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001b68:	4b07      	ldr	r3, [pc, #28]	@ (8001b88 <SystemInit+0xd8>)
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	661a      	str	r2, [r3, #96]	@ 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001b6e:	4b0b      	ldr	r3, [pc, #44]	@ (8001b9c <SystemInit+0xec>)
 8001b70:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8001b74:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8001b76:	bf00      	nop
 8001b78:	46bd      	mov	sp, r7
 8001b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7e:	4770      	bx	lr
 8001b80:	e000ed00 	.word	0xe000ed00
 8001b84:	52002000 	.word	0x52002000
 8001b88:	58024400 	.word	0x58024400
 8001b8c:	eaf6ed7f 	.word	0xeaf6ed7f
 8001b90:	02020200 	.word	0x02020200
 8001b94:	01ff0000 	.word	0x01ff0000
 8001b98:	01010280 	.word	0x01010280
 8001b9c:	52004000 	.word	0x52004000

08001ba0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001ba0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001bd8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001ba4:	f7ff ff84 	bl	8001ab0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001ba8:	480c      	ldr	r0, [pc, #48]	@ (8001bdc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001baa:	490d      	ldr	r1, [pc, #52]	@ (8001be0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001bac:	4a0d      	ldr	r2, [pc, #52]	@ (8001be4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001bae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001bb0:	e002      	b.n	8001bb8 <LoopCopyDataInit>

08001bb2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001bb2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001bb4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001bb6:	3304      	adds	r3, #4

08001bb8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001bb8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001bba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001bbc:	d3f9      	bcc.n	8001bb2 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001bbe:	4a0a      	ldr	r2, [pc, #40]	@ (8001be8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001bc0:	4c0a      	ldr	r4, [pc, #40]	@ (8001bec <LoopFillZerobss+0x22>)
  movs r3, #0
 8001bc2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001bc4:	e001      	b.n	8001bca <LoopFillZerobss>

08001bc6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001bc6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001bc8:	3204      	adds	r2, #4

08001bca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001bca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001bcc:	d3fb      	bcc.n	8001bc6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001bce:	f005 fa25 	bl	800701c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001bd2:	f7ff f9cf 	bl	8000f74 <main>
  bx  lr
 8001bd6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001bd8:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 8001bdc:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001be0:	24000060 	.word	0x24000060
  ldr r2, =_sidata
 8001be4:	0801c608 	.word	0x0801c608
  ldr r2, =_sbss
 8001be8:	24000060 	.word	0x24000060
  ldr r4, =_ebss
 8001bec:	240002ac 	.word	0x240002ac

08001bf0 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001bf0:	e7fe      	b.n	8001bf0 <ADC3_IRQHandler>
	...

08001bf4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	b082      	sub	sp, #8
 8001bf8:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001bfa:	2003      	movs	r0, #3
 8001bfc:	f000 f962 	bl	8001ec4 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001c00:	f001 f93e 	bl	8002e80 <HAL_RCC_GetSysClockFreq>
 8001c04:	4602      	mov	r2, r0
 8001c06:	4b15      	ldr	r3, [pc, #84]	@ (8001c5c <HAL_Init+0x68>)
 8001c08:	699b      	ldr	r3, [r3, #24]
 8001c0a:	0a1b      	lsrs	r3, r3, #8
 8001c0c:	f003 030f 	and.w	r3, r3, #15
 8001c10:	4913      	ldr	r1, [pc, #76]	@ (8001c60 <HAL_Init+0x6c>)
 8001c12:	5ccb      	ldrb	r3, [r1, r3]
 8001c14:	f003 031f 	and.w	r3, r3, #31
 8001c18:	fa22 f303 	lsr.w	r3, r2, r3
 8001c1c:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001c1e:	4b0f      	ldr	r3, [pc, #60]	@ (8001c5c <HAL_Init+0x68>)
 8001c20:	699b      	ldr	r3, [r3, #24]
 8001c22:	f003 030f 	and.w	r3, r3, #15
 8001c26:	4a0e      	ldr	r2, [pc, #56]	@ (8001c60 <HAL_Init+0x6c>)
 8001c28:	5cd3      	ldrb	r3, [r2, r3]
 8001c2a:	f003 031f 	and.w	r3, r3, #31
 8001c2e:	687a      	ldr	r2, [r7, #4]
 8001c30:	fa22 f303 	lsr.w	r3, r2, r3
 8001c34:	4a0b      	ldr	r2, [pc, #44]	@ (8001c64 <HAL_Init+0x70>)
 8001c36:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001c38:	4a0b      	ldr	r2, [pc, #44]	@ (8001c68 <HAL_Init+0x74>)
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001c3e:	2000      	movs	r0, #0
 8001c40:	f000 f814 	bl	8001c6c <HAL_InitTick>
 8001c44:	4603      	mov	r3, r0
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d001      	beq.n	8001c4e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001c4a:	2301      	movs	r3, #1
 8001c4c:	e002      	b.n	8001c54 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001c4e:	f7ff fcf5 	bl	800163c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001c52:	2300      	movs	r3, #0
}
 8001c54:	4618      	mov	r0, r3
 8001c56:	3708      	adds	r7, #8
 8001c58:	46bd      	mov	sp, r7
 8001c5a:	bd80      	pop	{r7, pc}
 8001c5c:	58024400 	.word	0x58024400
 8001c60:	0801c58c 	.word	0x0801c58c
 8001c64:	24000004 	.word	0x24000004
 8001c68:	24000000 	.word	0x24000000

08001c6c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	b082      	sub	sp, #8
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001c74:	4b15      	ldr	r3, [pc, #84]	@ (8001ccc <HAL_InitTick+0x60>)
 8001c76:	781b      	ldrb	r3, [r3, #0]
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d101      	bne.n	8001c80 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001c7c:	2301      	movs	r3, #1
 8001c7e:	e021      	b.n	8001cc4 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001c80:	4b13      	ldr	r3, [pc, #76]	@ (8001cd0 <HAL_InitTick+0x64>)
 8001c82:	681a      	ldr	r2, [r3, #0]
 8001c84:	4b11      	ldr	r3, [pc, #68]	@ (8001ccc <HAL_InitTick+0x60>)
 8001c86:	781b      	ldrb	r3, [r3, #0]
 8001c88:	4619      	mov	r1, r3
 8001c8a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001c8e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001c92:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c96:	4618      	mov	r0, r3
 8001c98:	f000 f939 	bl	8001f0e <HAL_SYSTICK_Config>
 8001c9c:	4603      	mov	r3, r0
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d001      	beq.n	8001ca6 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001ca2:	2301      	movs	r3, #1
 8001ca4:	e00e      	b.n	8001cc4 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	2b0f      	cmp	r3, #15
 8001caa:	d80a      	bhi.n	8001cc2 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001cac:	2200      	movs	r2, #0
 8001cae:	6879      	ldr	r1, [r7, #4]
 8001cb0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001cb4:	f000 f911 	bl	8001eda <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001cb8:	4a06      	ldr	r2, [pc, #24]	@ (8001cd4 <HAL_InitTick+0x68>)
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	e000      	b.n	8001cc4 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001cc2:	2301      	movs	r3, #1
}
 8001cc4:	4618      	mov	r0, r3
 8001cc6:	3708      	adds	r7, #8
 8001cc8:	46bd      	mov	sp, r7
 8001cca:	bd80      	pop	{r7, pc}
 8001ccc:	2400000c 	.word	0x2400000c
 8001cd0:	24000000 	.word	0x24000000
 8001cd4:	24000008 	.word	0x24000008

08001cd8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001cd8:	b480      	push	{r7}
 8001cda:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001cdc:	4b06      	ldr	r3, [pc, #24]	@ (8001cf8 <HAL_IncTick+0x20>)
 8001cde:	781b      	ldrb	r3, [r3, #0]
 8001ce0:	461a      	mov	r2, r3
 8001ce2:	4b06      	ldr	r3, [pc, #24]	@ (8001cfc <HAL_IncTick+0x24>)
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	4413      	add	r3, r2
 8001ce8:	4a04      	ldr	r2, [pc, #16]	@ (8001cfc <HAL_IncTick+0x24>)
 8001cea:	6013      	str	r3, [r2, #0]
}
 8001cec:	bf00      	nop
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf4:	4770      	bx	lr
 8001cf6:	bf00      	nop
 8001cf8:	2400000c 	.word	0x2400000c
 8001cfc:	24000160 	.word	0x24000160

08001d00 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d00:	b480      	push	{r7}
 8001d02:	af00      	add	r7, sp, #0
  return uwTick;
 8001d04:	4b03      	ldr	r3, [pc, #12]	@ (8001d14 <HAL_GetTick+0x14>)
 8001d06:	681b      	ldr	r3, [r3, #0]
}
 8001d08:	4618      	mov	r0, r3
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d10:	4770      	bx	lr
 8001d12:	bf00      	nop
 8001d14:	24000160 	.word	0x24000160

08001d18 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	b084      	sub	sp, #16
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001d20:	f7ff ffee 	bl	8001d00 <HAL_GetTick>
 8001d24:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001d30:	d005      	beq.n	8001d3e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001d32:	4b0a      	ldr	r3, [pc, #40]	@ (8001d5c <HAL_Delay+0x44>)
 8001d34:	781b      	ldrb	r3, [r3, #0]
 8001d36:	461a      	mov	r2, r3
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	4413      	add	r3, r2
 8001d3c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001d3e:	bf00      	nop
 8001d40:	f7ff ffde 	bl	8001d00 <HAL_GetTick>
 8001d44:	4602      	mov	r2, r0
 8001d46:	68bb      	ldr	r3, [r7, #8]
 8001d48:	1ad3      	subs	r3, r2, r3
 8001d4a:	68fa      	ldr	r2, [r7, #12]
 8001d4c:	429a      	cmp	r2, r3
 8001d4e:	d8f7      	bhi.n	8001d40 <HAL_Delay+0x28>
  {
  }
}
 8001d50:	bf00      	nop
 8001d52:	bf00      	nop
 8001d54:	3710      	adds	r7, #16
 8001d56:	46bd      	mov	sp, r7
 8001d58:	bd80      	pop	{r7, pc}
 8001d5a:	bf00      	nop
 8001d5c:	2400000c 	.word	0x2400000c

08001d60 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d60:	b480      	push	{r7}
 8001d62:	b085      	sub	sp, #20
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	f003 0307 	and.w	r3, r3, #7
 8001d6e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d70:	4b0b      	ldr	r3, [pc, #44]	@ (8001da0 <__NVIC_SetPriorityGrouping+0x40>)
 8001d72:	68db      	ldr	r3, [r3, #12]
 8001d74:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d76:	68ba      	ldr	r2, [r7, #8]
 8001d78:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001d7c:	4013      	ands	r3, r2
 8001d7e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d84:	68bb      	ldr	r3, [r7, #8]
 8001d86:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001d88:	4b06      	ldr	r3, [pc, #24]	@ (8001da4 <__NVIC_SetPriorityGrouping+0x44>)
 8001d8a:	4313      	orrs	r3, r2
 8001d8c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d8e:	4a04      	ldr	r2, [pc, #16]	@ (8001da0 <__NVIC_SetPriorityGrouping+0x40>)
 8001d90:	68bb      	ldr	r3, [r7, #8]
 8001d92:	60d3      	str	r3, [r2, #12]
}
 8001d94:	bf00      	nop
 8001d96:	3714      	adds	r7, #20
 8001d98:	46bd      	mov	sp, r7
 8001d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9e:	4770      	bx	lr
 8001da0:	e000ed00 	.word	0xe000ed00
 8001da4:	05fa0000 	.word	0x05fa0000

08001da8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001da8:	b480      	push	{r7}
 8001daa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001dac:	4b04      	ldr	r3, [pc, #16]	@ (8001dc0 <__NVIC_GetPriorityGrouping+0x18>)
 8001dae:	68db      	ldr	r3, [r3, #12]
 8001db0:	0a1b      	lsrs	r3, r3, #8
 8001db2:	f003 0307 	and.w	r3, r3, #7
}
 8001db6:	4618      	mov	r0, r3
 8001db8:	46bd      	mov	sp, r7
 8001dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dbe:	4770      	bx	lr
 8001dc0:	e000ed00 	.word	0xe000ed00

08001dc4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001dc4:	b480      	push	{r7}
 8001dc6:	b083      	sub	sp, #12
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	4603      	mov	r3, r0
 8001dcc:	6039      	str	r1, [r7, #0]
 8001dce:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001dd0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	db0a      	blt.n	8001dee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001dd8:	683b      	ldr	r3, [r7, #0]
 8001dda:	b2da      	uxtb	r2, r3
 8001ddc:	490c      	ldr	r1, [pc, #48]	@ (8001e10 <__NVIC_SetPriority+0x4c>)
 8001dde:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001de2:	0112      	lsls	r2, r2, #4
 8001de4:	b2d2      	uxtb	r2, r2
 8001de6:	440b      	add	r3, r1
 8001de8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001dec:	e00a      	b.n	8001e04 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001dee:	683b      	ldr	r3, [r7, #0]
 8001df0:	b2da      	uxtb	r2, r3
 8001df2:	4908      	ldr	r1, [pc, #32]	@ (8001e14 <__NVIC_SetPriority+0x50>)
 8001df4:	88fb      	ldrh	r3, [r7, #6]
 8001df6:	f003 030f 	and.w	r3, r3, #15
 8001dfa:	3b04      	subs	r3, #4
 8001dfc:	0112      	lsls	r2, r2, #4
 8001dfe:	b2d2      	uxtb	r2, r2
 8001e00:	440b      	add	r3, r1
 8001e02:	761a      	strb	r2, [r3, #24]
}
 8001e04:	bf00      	nop
 8001e06:	370c      	adds	r7, #12
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0e:	4770      	bx	lr
 8001e10:	e000e100 	.word	0xe000e100
 8001e14:	e000ed00 	.word	0xe000ed00

08001e18 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e18:	b480      	push	{r7}
 8001e1a:	b089      	sub	sp, #36	@ 0x24
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	60f8      	str	r0, [r7, #12]
 8001e20:	60b9      	str	r1, [r7, #8]
 8001e22:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	f003 0307 	and.w	r3, r3, #7
 8001e2a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e2c:	69fb      	ldr	r3, [r7, #28]
 8001e2e:	f1c3 0307 	rsb	r3, r3, #7
 8001e32:	2b04      	cmp	r3, #4
 8001e34:	bf28      	it	cs
 8001e36:	2304      	movcs	r3, #4
 8001e38:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e3a:	69fb      	ldr	r3, [r7, #28]
 8001e3c:	3304      	adds	r3, #4
 8001e3e:	2b06      	cmp	r3, #6
 8001e40:	d902      	bls.n	8001e48 <NVIC_EncodePriority+0x30>
 8001e42:	69fb      	ldr	r3, [r7, #28]
 8001e44:	3b03      	subs	r3, #3
 8001e46:	e000      	b.n	8001e4a <NVIC_EncodePriority+0x32>
 8001e48:	2300      	movs	r3, #0
 8001e4a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e4c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001e50:	69bb      	ldr	r3, [r7, #24]
 8001e52:	fa02 f303 	lsl.w	r3, r2, r3
 8001e56:	43da      	mvns	r2, r3
 8001e58:	68bb      	ldr	r3, [r7, #8]
 8001e5a:	401a      	ands	r2, r3
 8001e5c:	697b      	ldr	r3, [r7, #20]
 8001e5e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e60:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001e64:	697b      	ldr	r3, [r7, #20]
 8001e66:	fa01 f303 	lsl.w	r3, r1, r3
 8001e6a:	43d9      	mvns	r1, r3
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e70:	4313      	orrs	r3, r2
         );
}
 8001e72:	4618      	mov	r0, r3
 8001e74:	3724      	adds	r7, #36	@ 0x24
 8001e76:	46bd      	mov	sp, r7
 8001e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7c:	4770      	bx	lr
	...

08001e80 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	b082      	sub	sp, #8
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	3b01      	subs	r3, #1
 8001e8c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001e90:	d301      	bcc.n	8001e96 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e92:	2301      	movs	r3, #1
 8001e94:	e00f      	b.n	8001eb6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e96:	4a0a      	ldr	r2, [pc, #40]	@ (8001ec0 <SysTick_Config+0x40>)
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	3b01      	subs	r3, #1
 8001e9c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e9e:	210f      	movs	r1, #15
 8001ea0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001ea4:	f7ff ff8e 	bl	8001dc4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ea8:	4b05      	ldr	r3, [pc, #20]	@ (8001ec0 <SysTick_Config+0x40>)
 8001eaa:	2200      	movs	r2, #0
 8001eac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001eae:	4b04      	ldr	r3, [pc, #16]	@ (8001ec0 <SysTick_Config+0x40>)
 8001eb0:	2207      	movs	r2, #7
 8001eb2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001eb4:	2300      	movs	r3, #0
}
 8001eb6:	4618      	mov	r0, r3
 8001eb8:	3708      	adds	r7, #8
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	bd80      	pop	{r7, pc}
 8001ebe:	bf00      	nop
 8001ec0:	e000e010 	.word	0xe000e010

08001ec4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	b082      	sub	sp, #8
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ecc:	6878      	ldr	r0, [r7, #4]
 8001ece:	f7ff ff47 	bl	8001d60 <__NVIC_SetPriorityGrouping>
}
 8001ed2:	bf00      	nop
 8001ed4:	3708      	adds	r7, #8
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	bd80      	pop	{r7, pc}

08001eda <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001eda:	b580      	push	{r7, lr}
 8001edc:	b086      	sub	sp, #24
 8001ede:	af00      	add	r7, sp, #0
 8001ee0:	4603      	mov	r3, r0
 8001ee2:	60b9      	str	r1, [r7, #8]
 8001ee4:	607a      	str	r2, [r7, #4]
 8001ee6:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001ee8:	f7ff ff5e 	bl	8001da8 <__NVIC_GetPriorityGrouping>
 8001eec:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001eee:	687a      	ldr	r2, [r7, #4]
 8001ef0:	68b9      	ldr	r1, [r7, #8]
 8001ef2:	6978      	ldr	r0, [r7, #20]
 8001ef4:	f7ff ff90 	bl	8001e18 <NVIC_EncodePriority>
 8001ef8:	4602      	mov	r2, r0
 8001efa:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001efe:	4611      	mov	r1, r2
 8001f00:	4618      	mov	r0, r3
 8001f02:	f7ff ff5f 	bl	8001dc4 <__NVIC_SetPriority>
}
 8001f06:	bf00      	nop
 8001f08:	3718      	adds	r7, #24
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	bd80      	pop	{r7, pc}

08001f0e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001f0e:	b580      	push	{r7, lr}
 8001f10:	b082      	sub	sp, #8
 8001f12:	af00      	add	r7, sp, #0
 8001f14:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001f16:	6878      	ldr	r0, [r7, #4]
 8001f18:	f7ff ffb2 	bl	8001e80 <SysTick_Config>
 8001f1c:	4603      	mov	r3, r0
}
 8001f1e:	4618      	mov	r0, r3
 8001f20:	3708      	adds	r7, #8
 8001f22:	46bd      	mov	sp, r7
 8001f24:	bd80      	pop	{r7, pc}
	...

08001f28 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f28:	b480      	push	{r7}
 8001f2a:	b089      	sub	sp, #36	@ 0x24
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	6078      	str	r0, [r7, #4]
 8001f30:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001f32:	2300      	movs	r3, #0
 8001f34:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8001f36:	4b86      	ldr	r3, [pc, #536]	@ (8002150 <HAL_GPIO_Init+0x228>)
 8001f38:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001f3a:	e18c      	b.n	8002256 <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001f3c:	683b      	ldr	r3, [r7, #0]
 8001f3e:	681a      	ldr	r2, [r3, #0]
 8001f40:	2101      	movs	r1, #1
 8001f42:	69fb      	ldr	r3, [r7, #28]
 8001f44:	fa01 f303 	lsl.w	r3, r1, r3
 8001f48:	4013      	ands	r3, r2
 8001f4a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8001f4c:	693b      	ldr	r3, [r7, #16]
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	f000 817e 	beq.w	8002250 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001f54:	683b      	ldr	r3, [r7, #0]
 8001f56:	685b      	ldr	r3, [r3, #4]
 8001f58:	f003 0303 	and.w	r3, r3, #3
 8001f5c:	2b01      	cmp	r3, #1
 8001f5e:	d005      	beq.n	8001f6c <HAL_GPIO_Init+0x44>
 8001f60:	683b      	ldr	r3, [r7, #0]
 8001f62:	685b      	ldr	r3, [r3, #4]
 8001f64:	f003 0303 	and.w	r3, r3, #3
 8001f68:	2b02      	cmp	r3, #2
 8001f6a:	d130      	bne.n	8001fce <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	689b      	ldr	r3, [r3, #8]
 8001f70:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001f72:	69fb      	ldr	r3, [r7, #28]
 8001f74:	005b      	lsls	r3, r3, #1
 8001f76:	2203      	movs	r2, #3
 8001f78:	fa02 f303 	lsl.w	r3, r2, r3
 8001f7c:	43db      	mvns	r3, r3
 8001f7e:	69ba      	ldr	r2, [r7, #24]
 8001f80:	4013      	ands	r3, r2
 8001f82:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001f84:	683b      	ldr	r3, [r7, #0]
 8001f86:	68da      	ldr	r2, [r3, #12]
 8001f88:	69fb      	ldr	r3, [r7, #28]
 8001f8a:	005b      	lsls	r3, r3, #1
 8001f8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f90:	69ba      	ldr	r2, [r7, #24]
 8001f92:	4313      	orrs	r3, r2
 8001f94:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	69ba      	ldr	r2, [r7, #24]
 8001f9a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	685b      	ldr	r3, [r3, #4]
 8001fa0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001fa2:	2201      	movs	r2, #1
 8001fa4:	69fb      	ldr	r3, [r7, #28]
 8001fa6:	fa02 f303 	lsl.w	r3, r2, r3
 8001faa:	43db      	mvns	r3, r3
 8001fac:	69ba      	ldr	r2, [r7, #24]
 8001fae:	4013      	ands	r3, r2
 8001fb0:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001fb2:	683b      	ldr	r3, [r7, #0]
 8001fb4:	685b      	ldr	r3, [r3, #4]
 8001fb6:	091b      	lsrs	r3, r3, #4
 8001fb8:	f003 0201 	and.w	r2, r3, #1
 8001fbc:	69fb      	ldr	r3, [r7, #28]
 8001fbe:	fa02 f303 	lsl.w	r3, r2, r3
 8001fc2:	69ba      	ldr	r2, [r7, #24]
 8001fc4:	4313      	orrs	r3, r2
 8001fc6:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	69ba      	ldr	r2, [r7, #24]
 8001fcc:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001fce:	683b      	ldr	r3, [r7, #0]
 8001fd0:	685b      	ldr	r3, [r3, #4]
 8001fd2:	f003 0303 	and.w	r3, r3, #3
 8001fd6:	2b03      	cmp	r3, #3
 8001fd8:	d017      	beq.n	800200a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	68db      	ldr	r3, [r3, #12]
 8001fde:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001fe0:	69fb      	ldr	r3, [r7, #28]
 8001fe2:	005b      	lsls	r3, r3, #1
 8001fe4:	2203      	movs	r2, #3
 8001fe6:	fa02 f303 	lsl.w	r3, r2, r3
 8001fea:	43db      	mvns	r3, r3
 8001fec:	69ba      	ldr	r2, [r7, #24]
 8001fee:	4013      	ands	r3, r2
 8001ff0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001ff2:	683b      	ldr	r3, [r7, #0]
 8001ff4:	689a      	ldr	r2, [r3, #8]
 8001ff6:	69fb      	ldr	r3, [r7, #28]
 8001ff8:	005b      	lsls	r3, r3, #1
 8001ffa:	fa02 f303 	lsl.w	r3, r2, r3
 8001ffe:	69ba      	ldr	r2, [r7, #24]
 8002000:	4313      	orrs	r3, r2
 8002002:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	69ba      	ldr	r2, [r7, #24]
 8002008:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800200a:	683b      	ldr	r3, [r7, #0]
 800200c:	685b      	ldr	r3, [r3, #4]
 800200e:	f003 0303 	and.w	r3, r3, #3
 8002012:	2b02      	cmp	r3, #2
 8002014:	d123      	bne.n	800205e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002016:	69fb      	ldr	r3, [r7, #28]
 8002018:	08da      	lsrs	r2, r3, #3
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	3208      	adds	r2, #8
 800201e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002022:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002024:	69fb      	ldr	r3, [r7, #28]
 8002026:	f003 0307 	and.w	r3, r3, #7
 800202a:	009b      	lsls	r3, r3, #2
 800202c:	220f      	movs	r2, #15
 800202e:	fa02 f303 	lsl.w	r3, r2, r3
 8002032:	43db      	mvns	r3, r3
 8002034:	69ba      	ldr	r2, [r7, #24]
 8002036:	4013      	ands	r3, r2
 8002038:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800203a:	683b      	ldr	r3, [r7, #0]
 800203c:	691a      	ldr	r2, [r3, #16]
 800203e:	69fb      	ldr	r3, [r7, #28]
 8002040:	f003 0307 	and.w	r3, r3, #7
 8002044:	009b      	lsls	r3, r3, #2
 8002046:	fa02 f303 	lsl.w	r3, r2, r3
 800204a:	69ba      	ldr	r2, [r7, #24]
 800204c:	4313      	orrs	r3, r2
 800204e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002050:	69fb      	ldr	r3, [r7, #28]
 8002052:	08da      	lsrs	r2, r3, #3
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	3208      	adds	r2, #8
 8002058:	69b9      	ldr	r1, [r7, #24]
 800205a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002064:	69fb      	ldr	r3, [r7, #28]
 8002066:	005b      	lsls	r3, r3, #1
 8002068:	2203      	movs	r2, #3
 800206a:	fa02 f303 	lsl.w	r3, r2, r3
 800206e:	43db      	mvns	r3, r3
 8002070:	69ba      	ldr	r2, [r7, #24]
 8002072:	4013      	ands	r3, r2
 8002074:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002076:	683b      	ldr	r3, [r7, #0]
 8002078:	685b      	ldr	r3, [r3, #4]
 800207a:	f003 0203 	and.w	r2, r3, #3
 800207e:	69fb      	ldr	r3, [r7, #28]
 8002080:	005b      	lsls	r3, r3, #1
 8002082:	fa02 f303 	lsl.w	r3, r2, r3
 8002086:	69ba      	ldr	r2, [r7, #24]
 8002088:	4313      	orrs	r3, r2
 800208a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	69ba      	ldr	r2, [r7, #24]
 8002090:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002092:	683b      	ldr	r3, [r7, #0]
 8002094:	685b      	ldr	r3, [r3, #4]
 8002096:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800209a:	2b00      	cmp	r3, #0
 800209c:	f000 80d8 	beq.w	8002250 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80020a0:	4b2c      	ldr	r3, [pc, #176]	@ (8002154 <HAL_GPIO_Init+0x22c>)
 80020a2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80020a6:	4a2b      	ldr	r2, [pc, #172]	@ (8002154 <HAL_GPIO_Init+0x22c>)
 80020a8:	f043 0302 	orr.w	r3, r3, #2
 80020ac:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80020b0:	4b28      	ldr	r3, [pc, #160]	@ (8002154 <HAL_GPIO_Init+0x22c>)
 80020b2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80020b6:	f003 0302 	and.w	r3, r3, #2
 80020ba:	60fb      	str	r3, [r7, #12]
 80020bc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80020be:	4a26      	ldr	r2, [pc, #152]	@ (8002158 <HAL_GPIO_Init+0x230>)
 80020c0:	69fb      	ldr	r3, [r7, #28]
 80020c2:	089b      	lsrs	r3, r3, #2
 80020c4:	3302      	adds	r3, #2
 80020c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80020ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80020cc:	69fb      	ldr	r3, [r7, #28]
 80020ce:	f003 0303 	and.w	r3, r3, #3
 80020d2:	009b      	lsls	r3, r3, #2
 80020d4:	220f      	movs	r2, #15
 80020d6:	fa02 f303 	lsl.w	r3, r2, r3
 80020da:	43db      	mvns	r3, r3
 80020dc:	69ba      	ldr	r2, [r7, #24]
 80020de:	4013      	ands	r3, r2
 80020e0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	4a1d      	ldr	r2, [pc, #116]	@ (800215c <HAL_GPIO_Init+0x234>)
 80020e6:	4293      	cmp	r3, r2
 80020e8:	d04a      	beq.n	8002180 <HAL_GPIO_Init+0x258>
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	4a1c      	ldr	r2, [pc, #112]	@ (8002160 <HAL_GPIO_Init+0x238>)
 80020ee:	4293      	cmp	r3, r2
 80020f0:	d02b      	beq.n	800214a <HAL_GPIO_Init+0x222>
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	4a1b      	ldr	r2, [pc, #108]	@ (8002164 <HAL_GPIO_Init+0x23c>)
 80020f6:	4293      	cmp	r3, r2
 80020f8:	d025      	beq.n	8002146 <HAL_GPIO_Init+0x21e>
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	4a1a      	ldr	r2, [pc, #104]	@ (8002168 <HAL_GPIO_Init+0x240>)
 80020fe:	4293      	cmp	r3, r2
 8002100:	d01f      	beq.n	8002142 <HAL_GPIO_Init+0x21a>
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	4a19      	ldr	r2, [pc, #100]	@ (800216c <HAL_GPIO_Init+0x244>)
 8002106:	4293      	cmp	r3, r2
 8002108:	d019      	beq.n	800213e <HAL_GPIO_Init+0x216>
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	4a18      	ldr	r2, [pc, #96]	@ (8002170 <HAL_GPIO_Init+0x248>)
 800210e:	4293      	cmp	r3, r2
 8002110:	d013      	beq.n	800213a <HAL_GPIO_Init+0x212>
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	4a17      	ldr	r2, [pc, #92]	@ (8002174 <HAL_GPIO_Init+0x24c>)
 8002116:	4293      	cmp	r3, r2
 8002118:	d00d      	beq.n	8002136 <HAL_GPIO_Init+0x20e>
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	4a16      	ldr	r2, [pc, #88]	@ (8002178 <HAL_GPIO_Init+0x250>)
 800211e:	4293      	cmp	r3, r2
 8002120:	d007      	beq.n	8002132 <HAL_GPIO_Init+0x20a>
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	4a15      	ldr	r2, [pc, #84]	@ (800217c <HAL_GPIO_Init+0x254>)
 8002126:	4293      	cmp	r3, r2
 8002128:	d101      	bne.n	800212e <HAL_GPIO_Init+0x206>
 800212a:	2309      	movs	r3, #9
 800212c:	e029      	b.n	8002182 <HAL_GPIO_Init+0x25a>
 800212e:	230a      	movs	r3, #10
 8002130:	e027      	b.n	8002182 <HAL_GPIO_Init+0x25a>
 8002132:	2307      	movs	r3, #7
 8002134:	e025      	b.n	8002182 <HAL_GPIO_Init+0x25a>
 8002136:	2306      	movs	r3, #6
 8002138:	e023      	b.n	8002182 <HAL_GPIO_Init+0x25a>
 800213a:	2305      	movs	r3, #5
 800213c:	e021      	b.n	8002182 <HAL_GPIO_Init+0x25a>
 800213e:	2304      	movs	r3, #4
 8002140:	e01f      	b.n	8002182 <HAL_GPIO_Init+0x25a>
 8002142:	2303      	movs	r3, #3
 8002144:	e01d      	b.n	8002182 <HAL_GPIO_Init+0x25a>
 8002146:	2302      	movs	r3, #2
 8002148:	e01b      	b.n	8002182 <HAL_GPIO_Init+0x25a>
 800214a:	2301      	movs	r3, #1
 800214c:	e019      	b.n	8002182 <HAL_GPIO_Init+0x25a>
 800214e:	bf00      	nop
 8002150:	58000080 	.word	0x58000080
 8002154:	58024400 	.word	0x58024400
 8002158:	58000400 	.word	0x58000400
 800215c:	58020000 	.word	0x58020000
 8002160:	58020400 	.word	0x58020400
 8002164:	58020800 	.word	0x58020800
 8002168:	58020c00 	.word	0x58020c00
 800216c:	58021000 	.word	0x58021000
 8002170:	58021400 	.word	0x58021400
 8002174:	58021800 	.word	0x58021800
 8002178:	58021c00 	.word	0x58021c00
 800217c:	58022400 	.word	0x58022400
 8002180:	2300      	movs	r3, #0
 8002182:	69fa      	ldr	r2, [r7, #28]
 8002184:	f002 0203 	and.w	r2, r2, #3
 8002188:	0092      	lsls	r2, r2, #2
 800218a:	4093      	lsls	r3, r2
 800218c:	69ba      	ldr	r2, [r7, #24]
 800218e:	4313      	orrs	r3, r2
 8002190:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002192:	4938      	ldr	r1, [pc, #224]	@ (8002274 <HAL_GPIO_Init+0x34c>)
 8002194:	69fb      	ldr	r3, [r7, #28]
 8002196:	089b      	lsrs	r3, r3, #2
 8002198:	3302      	adds	r3, #2
 800219a:	69ba      	ldr	r2, [r7, #24]
 800219c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80021a0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80021a8:	693b      	ldr	r3, [r7, #16]
 80021aa:	43db      	mvns	r3, r3
 80021ac:	69ba      	ldr	r2, [r7, #24]
 80021ae:	4013      	ands	r3, r2
 80021b0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80021b2:	683b      	ldr	r3, [r7, #0]
 80021b4:	685b      	ldr	r3, [r3, #4]
 80021b6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d003      	beq.n	80021c6 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 80021be:	69ba      	ldr	r2, [r7, #24]
 80021c0:	693b      	ldr	r3, [r7, #16]
 80021c2:	4313      	orrs	r3, r2
 80021c4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80021c6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80021ca:	69bb      	ldr	r3, [r7, #24]
 80021cc:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80021ce:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80021d2:	685b      	ldr	r3, [r3, #4]
 80021d4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80021d6:	693b      	ldr	r3, [r7, #16]
 80021d8:	43db      	mvns	r3, r3
 80021da:	69ba      	ldr	r2, [r7, #24]
 80021dc:	4013      	ands	r3, r2
 80021de:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80021e0:	683b      	ldr	r3, [r7, #0]
 80021e2:	685b      	ldr	r3, [r3, #4]
 80021e4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d003      	beq.n	80021f4 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 80021ec:	69ba      	ldr	r2, [r7, #24]
 80021ee:	693b      	ldr	r3, [r7, #16]
 80021f0:	4313      	orrs	r3, r2
 80021f2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80021f4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80021f8:	69bb      	ldr	r3, [r7, #24]
 80021fa:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80021fc:	697b      	ldr	r3, [r7, #20]
 80021fe:	685b      	ldr	r3, [r3, #4]
 8002200:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002202:	693b      	ldr	r3, [r7, #16]
 8002204:	43db      	mvns	r3, r3
 8002206:	69ba      	ldr	r2, [r7, #24]
 8002208:	4013      	ands	r3, r2
 800220a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800220c:	683b      	ldr	r3, [r7, #0]
 800220e:	685b      	ldr	r3, [r3, #4]
 8002210:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002214:	2b00      	cmp	r3, #0
 8002216:	d003      	beq.n	8002220 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 8002218:	69ba      	ldr	r2, [r7, #24]
 800221a:	693b      	ldr	r3, [r7, #16]
 800221c:	4313      	orrs	r3, r2
 800221e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8002220:	697b      	ldr	r3, [r7, #20]
 8002222:	69ba      	ldr	r2, [r7, #24]
 8002224:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8002226:	697b      	ldr	r3, [r7, #20]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800222c:	693b      	ldr	r3, [r7, #16]
 800222e:	43db      	mvns	r3, r3
 8002230:	69ba      	ldr	r2, [r7, #24]
 8002232:	4013      	ands	r3, r2
 8002234:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002236:	683b      	ldr	r3, [r7, #0]
 8002238:	685b      	ldr	r3, [r3, #4]
 800223a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800223e:	2b00      	cmp	r3, #0
 8002240:	d003      	beq.n	800224a <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 8002242:	69ba      	ldr	r2, [r7, #24]
 8002244:	693b      	ldr	r3, [r7, #16]
 8002246:	4313      	orrs	r3, r2
 8002248:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800224a:	697b      	ldr	r3, [r7, #20]
 800224c:	69ba      	ldr	r2, [r7, #24]
 800224e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8002250:	69fb      	ldr	r3, [r7, #28]
 8002252:	3301      	adds	r3, #1
 8002254:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002256:	683b      	ldr	r3, [r7, #0]
 8002258:	681a      	ldr	r2, [r3, #0]
 800225a:	69fb      	ldr	r3, [r7, #28]
 800225c:	fa22 f303 	lsr.w	r3, r2, r3
 8002260:	2b00      	cmp	r3, #0
 8002262:	f47f ae6b 	bne.w	8001f3c <HAL_GPIO_Init+0x14>
  }
}
 8002266:	bf00      	nop
 8002268:	bf00      	nop
 800226a:	3724      	adds	r7, #36	@ 0x24
 800226c:	46bd      	mov	sp, r7
 800226e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002272:	4770      	bx	lr
 8002274:	58000400 	.word	0x58000400

08002278 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002278:	b480      	push	{r7}
 800227a:	b083      	sub	sp, #12
 800227c:	af00      	add	r7, sp, #0
 800227e:	6078      	str	r0, [r7, #4]
 8002280:	460b      	mov	r3, r1
 8002282:	807b      	strh	r3, [r7, #2]
 8002284:	4613      	mov	r3, r2
 8002286:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002288:	787b      	ldrb	r3, [r7, #1]
 800228a:	2b00      	cmp	r3, #0
 800228c:	d003      	beq.n	8002296 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800228e:	887a      	ldrh	r2, [r7, #2]
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8002294:	e003      	b.n	800229e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8002296:	887b      	ldrh	r3, [r7, #2]
 8002298:	041a      	lsls	r2, r3, #16
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	619a      	str	r2, [r3, #24]
}
 800229e:	bf00      	nop
 80022a0:	370c      	adds	r7, #12
 80022a2:	46bd      	mov	sp, r7
 80022a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a8:	4770      	bx	lr
	...

080022ac <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80022ac:	b580      	push	{r7, lr}
 80022ae:	b084      	sub	sp, #16
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 80022b4:	4b29      	ldr	r3, [pc, #164]	@ (800235c <HAL_PWREx_ConfigSupply+0xb0>)
 80022b6:	68db      	ldr	r3, [r3, #12]
 80022b8:	f003 0307 	and.w	r3, r3, #7
 80022bc:	2b06      	cmp	r3, #6
 80022be:	d00a      	beq.n	80022d6 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80022c0:	4b26      	ldr	r3, [pc, #152]	@ (800235c <HAL_PWREx_ConfigSupply+0xb0>)
 80022c2:	68db      	ldr	r3, [r3, #12]
 80022c4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80022c8:	687a      	ldr	r2, [r7, #4]
 80022ca:	429a      	cmp	r2, r3
 80022cc:	d001      	beq.n	80022d2 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80022ce:	2301      	movs	r3, #1
 80022d0:	e03f      	b.n	8002352 <HAL_PWREx_ConfigSupply+0xa6>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80022d2:	2300      	movs	r3, #0
 80022d4:	e03d      	b.n	8002352 <HAL_PWREx_ConfigSupply+0xa6>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80022d6:	4b21      	ldr	r3, [pc, #132]	@ (800235c <HAL_PWREx_ConfigSupply+0xb0>)
 80022d8:	68db      	ldr	r3, [r3, #12]
 80022da:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
 80022de:	491f      	ldr	r1, [pc, #124]	@ (800235c <HAL_PWREx_ConfigSupply+0xb0>)
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	4313      	orrs	r3, r2
 80022e4:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80022e6:	f7ff fd0b 	bl	8001d00 <HAL_GetTick>
 80022ea:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80022ec:	e009      	b.n	8002302 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80022ee:	f7ff fd07 	bl	8001d00 <HAL_GetTick>
 80022f2:	4602      	mov	r2, r0
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	1ad3      	subs	r3, r2, r3
 80022f8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80022fc:	d901      	bls.n	8002302 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80022fe:	2301      	movs	r3, #1
 8002300:	e027      	b.n	8002352 <HAL_PWREx_ConfigSupply+0xa6>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002302:	4b16      	ldr	r3, [pc, #88]	@ (800235c <HAL_PWREx_ConfigSupply+0xb0>)
 8002304:	685b      	ldr	r3, [r3, #4]
 8002306:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800230a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800230e:	d1ee      	bne.n	80022ee <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	2b1e      	cmp	r3, #30
 8002314:	d008      	beq.n	8002328 <HAL_PWREx_ConfigSupply+0x7c>
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	2b2e      	cmp	r3, #46	@ 0x2e
 800231a:	d005      	beq.n	8002328 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	2b1d      	cmp	r3, #29
 8002320:	d002      	beq.n	8002328 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	2b2d      	cmp	r3, #45	@ 0x2d
 8002326:	d113      	bne.n	8002350 <HAL_PWREx_ConfigSupply+0xa4>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8002328:	f7ff fcea 	bl	8001d00 <HAL_GetTick>
 800232c:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800232e:	e009      	b.n	8002344 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8002330:	f7ff fce6 	bl	8001d00 <HAL_GetTick>
 8002334:	4602      	mov	r2, r0
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	1ad3      	subs	r3, r2, r3
 800233a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800233e:	d901      	bls.n	8002344 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8002340:	2301      	movs	r3, #1
 8002342:	e006      	b.n	8002352 <HAL_PWREx_ConfigSupply+0xa6>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8002344:	4b05      	ldr	r3, [pc, #20]	@ (800235c <HAL_PWREx_ConfigSupply+0xb0>)
 8002346:	68db      	ldr	r3, [r3, #12]
 8002348:	f003 0311 	and.w	r3, r3, #17
 800234c:	2b11      	cmp	r3, #17
 800234e:	d1ef      	bne.n	8002330 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8002350:	2300      	movs	r3, #0
}
 8002352:	4618      	mov	r0, r3
 8002354:	3710      	adds	r7, #16
 8002356:	46bd      	mov	sp, r7
 8002358:	bd80      	pop	{r7, pc}
 800235a:	bf00      	nop
 800235c:	58024800 	.word	0x58024800

08002360 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002360:	b580      	push	{r7, lr}
 8002362:	b08c      	sub	sp, #48	@ 0x30
 8002364:	af00      	add	r7, sp, #0
 8002366:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	2b00      	cmp	r3, #0
 800236c:	d101      	bne.n	8002372 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800236e:	2301      	movs	r3, #1
 8002370:	e3c8      	b.n	8002b04 <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f003 0301 	and.w	r3, r3, #1
 800237a:	2b00      	cmp	r3, #0
 800237c:	f000 8087 	beq.w	800248e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002380:	4b88      	ldr	r3, [pc, #544]	@ (80025a4 <HAL_RCC_OscConfig+0x244>)
 8002382:	691b      	ldr	r3, [r3, #16]
 8002384:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002388:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800238a:	4b86      	ldr	r3, [pc, #536]	@ (80025a4 <HAL_RCC_OscConfig+0x244>)
 800238c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800238e:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8002390:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002392:	2b10      	cmp	r3, #16
 8002394:	d007      	beq.n	80023a6 <HAL_RCC_OscConfig+0x46>
 8002396:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002398:	2b18      	cmp	r3, #24
 800239a:	d110      	bne.n	80023be <HAL_RCC_OscConfig+0x5e>
 800239c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800239e:	f003 0303 	and.w	r3, r3, #3
 80023a2:	2b02      	cmp	r3, #2
 80023a4:	d10b      	bne.n	80023be <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023a6:	4b7f      	ldr	r3, [pc, #508]	@ (80025a4 <HAL_RCC_OscConfig+0x244>)
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d06c      	beq.n	800248c <HAL_RCC_OscConfig+0x12c>
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	685b      	ldr	r3, [r3, #4]
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d168      	bne.n	800248c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80023ba:	2301      	movs	r3, #1
 80023bc:	e3a2      	b.n	8002b04 <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	685b      	ldr	r3, [r3, #4]
 80023c2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80023c6:	d106      	bne.n	80023d6 <HAL_RCC_OscConfig+0x76>
 80023c8:	4b76      	ldr	r3, [pc, #472]	@ (80025a4 <HAL_RCC_OscConfig+0x244>)
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	4a75      	ldr	r2, [pc, #468]	@ (80025a4 <HAL_RCC_OscConfig+0x244>)
 80023ce:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80023d2:	6013      	str	r3, [r2, #0]
 80023d4:	e02e      	b.n	8002434 <HAL_RCC_OscConfig+0xd4>
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	685b      	ldr	r3, [r3, #4]
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d10c      	bne.n	80023f8 <HAL_RCC_OscConfig+0x98>
 80023de:	4b71      	ldr	r3, [pc, #452]	@ (80025a4 <HAL_RCC_OscConfig+0x244>)
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	4a70      	ldr	r2, [pc, #448]	@ (80025a4 <HAL_RCC_OscConfig+0x244>)
 80023e4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80023e8:	6013      	str	r3, [r2, #0]
 80023ea:	4b6e      	ldr	r3, [pc, #440]	@ (80025a4 <HAL_RCC_OscConfig+0x244>)
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	4a6d      	ldr	r2, [pc, #436]	@ (80025a4 <HAL_RCC_OscConfig+0x244>)
 80023f0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80023f4:	6013      	str	r3, [r2, #0]
 80023f6:	e01d      	b.n	8002434 <HAL_RCC_OscConfig+0xd4>
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	685b      	ldr	r3, [r3, #4]
 80023fc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002400:	d10c      	bne.n	800241c <HAL_RCC_OscConfig+0xbc>
 8002402:	4b68      	ldr	r3, [pc, #416]	@ (80025a4 <HAL_RCC_OscConfig+0x244>)
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	4a67      	ldr	r2, [pc, #412]	@ (80025a4 <HAL_RCC_OscConfig+0x244>)
 8002408:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800240c:	6013      	str	r3, [r2, #0]
 800240e:	4b65      	ldr	r3, [pc, #404]	@ (80025a4 <HAL_RCC_OscConfig+0x244>)
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	4a64      	ldr	r2, [pc, #400]	@ (80025a4 <HAL_RCC_OscConfig+0x244>)
 8002414:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002418:	6013      	str	r3, [r2, #0]
 800241a:	e00b      	b.n	8002434 <HAL_RCC_OscConfig+0xd4>
 800241c:	4b61      	ldr	r3, [pc, #388]	@ (80025a4 <HAL_RCC_OscConfig+0x244>)
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	4a60      	ldr	r2, [pc, #384]	@ (80025a4 <HAL_RCC_OscConfig+0x244>)
 8002422:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002426:	6013      	str	r3, [r2, #0]
 8002428:	4b5e      	ldr	r3, [pc, #376]	@ (80025a4 <HAL_RCC_OscConfig+0x244>)
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	4a5d      	ldr	r2, [pc, #372]	@ (80025a4 <HAL_RCC_OscConfig+0x244>)
 800242e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002432:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	685b      	ldr	r3, [r3, #4]
 8002438:	2b00      	cmp	r3, #0
 800243a:	d013      	beq.n	8002464 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800243c:	f7ff fc60 	bl	8001d00 <HAL_GetTick>
 8002440:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002442:	e008      	b.n	8002456 <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002444:	f7ff fc5c 	bl	8001d00 <HAL_GetTick>
 8002448:	4602      	mov	r2, r0
 800244a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800244c:	1ad3      	subs	r3, r2, r3
 800244e:	2b64      	cmp	r3, #100	@ 0x64
 8002450:	d901      	bls.n	8002456 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002452:	2303      	movs	r3, #3
 8002454:	e356      	b.n	8002b04 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002456:	4b53      	ldr	r3, [pc, #332]	@ (80025a4 <HAL_RCC_OscConfig+0x244>)
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800245e:	2b00      	cmp	r3, #0
 8002460:	d0f0      	beq.n	8002444 <HAL_RCC_OscConfig+0xe4>
 8002462:	e014      	b.n	800248e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002464:	f7ff fc4c 	bl	8001d00 <HAL_GetTick>
 8002468:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800246a:	e008      	b.n	800247e <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800246c:	f7ff fc48 	bl	8001d00 <HAL_GetTick>
 8002470:	4602      	mov	r2, r0
 8002472:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002474:	1ad3      	subs	r3, r2, r3
 8002476:	2b64      	cmp	r3, #100	@ 0x64
 8002478:	d901      	bls.n	800247e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800247a:	2303      	movs	r3, #3
 800247c:	e342      	b.n	8002b04 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800247e:	4b49      	ldr	r3, [pc, #292]	@ (80025a4 <HAL_RCC_OscConfig+0x244>)
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002486:	2b00      	cmp	r3, #0
 8002488:	d1f0      	bne.n	800246c <HAL_RCC_OscConfig+0x10c>
 800248a:	e000      	b.n	800248e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800248c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	f003 0302 	and.w	r3, r3, #2
 8002496:	2b00      	cmp	r3, #0
 8002498:	f000 808c 	beq.w	80025b4 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800249c:	4b41      	ldr	r3, [pc, #260]	@ (80025a4 <HAL_RCC_OscConfig+0x244>)
 800249e:	691b      	ldr	r3, [r3, #16]
 80024a0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80024a4:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80024a6:	4b3f      	ldr	r3, [pc, #252]	@ (80025a4 <HAL_RCC_OscConfig+0x244>)
 80024a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024aa:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80024ac:	6a3b      	ldr	r3, [r7, #32]
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d007      	beq.n	80024c2 <HAL_RCC_OscConfig+0x162>
 80024b2:	6a3b      	ldr	r3, [r7, #32]
 80024b4:	2b18      	cmp	r3, #24
 80024b6:	d137      	bne.n	8002528 <HAL_RCC_OscConfig+0x1c8>
 80024b8:	69fb      	ldr	r3, [r7, #28]
 80024ba:	f003 0303 	and.w	r3, r3, #3
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d132      	bne.n	8002528 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80024c2:	4b38      	ldr	r3, [pc, #224]	@ (80025a4 <HAL_RCC_OscConfig+0x244>)
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f003 0304 	and.w	r3, r3, #4
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d005      	beq.n	80024da <HAL_RCC_OscConfig+0x17a>
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	68db      	ldr	r3, [r3, #12]
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d101      	bne.n	80024da <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80024d6:	2301      	movs	r3, #1
 80024d8:	e314      	b.n	8002b04 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80024da:	4b32      	ldr	r3, [pc, #200]	@ (80025a4 <HAL_RCC_OscConfig+0x244>)
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f023 0219 	bic.w	r2, r3, #25
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	68db      	ldr	r3, [r3, #12]
 80024e6:	492f      	ldr	r1, [pc, #188]	@ (80025a4 <HAL_RCC_OscConfig+0x244>)
 80024e8:	4313      	orrs	r3, r2
 80024ea:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024ec:	f7ff fc08 	bl	8001d00 <HAL_GetTick>
 80024f0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80024f2:	e008      	b.n	8002506 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80024f4:	f7ff fc04 	bl	8001d00 <HAL_GetTick>
 80024f8:	4602      	mov	r2, r0
 80024fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024fc:	1ad3      	subs	r3, r2, r3
 80024fe:	2b02      	cmp	r3, #2
 8002500:	d901      	bls.n	8002506 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8002502:	2303      	movs	r3, #3
 8002504:	e2fe      	b.n	8002b04 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002506:	4b27      	ldr	r3, [pc, #156]	@ (80025a4 <HAL_RCC_OscConfig+0x244>)
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	f003 0304 	and.w	r3, r3, #4
 800250e:	2b00      	cmp	r3, #0
 8002510:	d0f0      	beq.n	80024f4 <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002512:	4b24      	ldr	r3, [pc, #144]	@ (80025a4 <HAL_RCC_OscConfig+0x244>)
 8002514:	685b      	ldr	r3, [r3, #4]
 8002516:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	691b      	ldr	r3, [r3, #16]
 800251e:	061b      	lsls	r3, r3, #24
 8002520:	4920      	ldr	r1, [pc, #128]	@ (80025a4 <HAL_RCC_OscConfig+0x244>)
 8002522:	4313      	orrs	r3, r2
 8002524:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002526:	e045      	b.n	80025b4 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	68db      	ldr	r3, [r3, #12]
 800252c:	2b00      	cmp	r3, #0
 800252e:	d026      	beq.n	800257e <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002530:	4b1c      	ldr	r3, [pc, #112]	@ (80025a4 <HAL_RCC_OscConfig+0x244>)
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	f023 0219 	bic.w	r2, r3, #25
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	68db      	ldr	r3, [r3, #12]
 800253c:	4919      	ldr	r1, [pc, #100]	@ (80025a4 <HAL_RCC_OscConfig+0x244>)
 800253e:	4313      	orrs	r3, r2
 8002540:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002542:	f7ff fbdd 	bl	8001d00 <HAL_GetTick>
 8002546:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002548:	e008      	b.n	800255c <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800254a:	f7ff fbd9 	bl	8001d00 <HAL_GetTick>
 800254e:	4602      	mov	r2, r0
 8002550:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002552:	1ad3      	subs	r3, r2, r3
 8002554:	2b02      	cmp	r3, #2
 8002556:	d901      	bls.n	800255c <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8002558:	2303      	movs	r3, #3
 800255a:	e2d3      	b.n	8002b04 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800255c:	4b11      	ldr	r3, [pc, #68]	@ (80025a4 <HAL_RCC_OscConfig+0x244>)
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	f003 0304 	and.w	r3, r3, #4
 8002564:	2b00      	cmp	r3, #0
 8002566:	d0f0      	beq.n	800254a <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002568:	4b0e      	ldr	r3, [pc, #56]	@ (80025a4 <HAL_RCC_OscConfig+0x244>)
 800256a:	685b      	ldr	r3, [r3, #4]
 800256c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	691b      	ldr	r3, [r3, #16]
 8002574:	061b      	lsls	r3, r3, #24
 8002576:	490b      	ldr	r1, [pc, #44]	@ (80025a4 <HAL_RCC_OscConfig+0x244>)
 8002578:	4313      	orrs	r3, r2
 800257a:	604b      	str	r3, [r1, #4]
 800257c:	e01a      	b.n	80025b4 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800257e:	4b09      	ldr	r3, [pc, #36]	@ (80025a4 <HAL_RCC_OscConfig+0x244>)
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	4a08      	ldr	r2, [pc, #32]	@ (80025a4 <HAL_RCC_OscConfig+0x244>)
 8002584:	f023 0301 	bic.w	r3, r3, #1
 8002588:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800258a:	f7ff fbb9 	bl	8001d00 <HAL_GetTick>
 800258e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002590:	e00a      	b.n	80025a8 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002592:	f7ff fbb5 	bl	8001d00 <HAL_GetTick>
 8002596:	4602      	mov	r2, r0
 8002598:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800259a:	1ad3      	subs	r3, r2, r3
 800259c:	2b02      	cmp	r3, #2
 800259e:	d903      	bls.n	80025a8 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 80025a0:	2303      	movs	r3, #3
 80025a2:	e2af      	b.n	8002b04 <HAL_RCC_OscConfig+0x7a4>
 80025a4:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80025a8:	4b96      	ldr	r3, [pc, #600]	@ (8002804 <HAL_RCC_OscConfig+0x4a4>)
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	f003 0304 	and.w	r3, r3, #4
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d1ee      	bne.n	8002592 <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	f003 0310 	and.w	r3, r3, #16
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d06a      	beq.n	8002696 <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80025c0:	4b90      	ldr	r3, [pc, #576]	@ (8002804 <HAL_RCC_OscConfig+0x4a4>)
 80025c2:	691b      	ldr	r3, [r3, #16]
 80025c4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80025c8:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80025ca:	4b8e      	ldr	r3, [pc, #568]	@ (8002804 <HAL_RCC_OscConfig+0x4a4>)
 80025cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80025ce:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80025d0:	69bb      	ldr	r3, [r7, #24]
 80025d2:	2b08      	cmp	r3, #8
 80025d4:	d007      	beq.n	80025e6 <HAL_RCC_OscConfig+0x286>
 80025d6:	69bb      	ldr	r3, [r7, #24]
 80025d8:	2b18      	cmp	r3, #24
 80025da:	d11b      	bne.n	8002614 <HAL_RCC_OscConfig+0x2b4>
 80025dc:	697b      	ldr	r3, [r7, #20]
 80025de:	f003 0303 	and.w	r3, r3, #3
 80025e2:	2b01      	cmp	r3, #1
 80025e4:	d116      	bne.n	8002614 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80025e6:	4b87      	ldr	r3, [pc, #540]	@ (8002804 <HAL_RCC_OscConfig+0x4a4>)
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d005      	beq.n	80025fe <HAL_RCC_OscConfig+0x29e>
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	69db      	ldr	r3, [r3, #28]
 80025f6:	2b80      	cmp	r3, #128	@ 0x80
 80025f8:	d001      	beq.n	80025fe <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 80025fa:	2301      	movs	r3, #1
 80025fc:	e282      	b.n	8002b04 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80025fe:	4b81      	ldr	r3, [pc, #516]	@ (8002804 <HAL_RCC_OscConfig+0x4a4>)
 8002600:	68db      	ldr	r3, [r3, #12]
 8002602:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	6a1b      	ldr	r3, [r3, #32]
 800260a:	061b      	lsls	r3, r3, #24
 800260c:	497d      	ldr	r1, [pc, #500]	@ (8002804 <HAL_RCC_OscConfig+0x4a4>)
 800260e:	4313      	orrs	r3, r2
 8002610:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002612:	e040      	b.n	8002696 <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	69db      	ldr	r3, [r3, #28]
 8002618:	2b00      	cmp	r3, #0
 800261a:	d023      	beq.n	8002664 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800261c:	4b79      	ldr	r3, [pc, #484]	@ (8002804 <HAL_RCC_OscConfig+0x4a4>)
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	4a78      	ldr	r2, [pc, #480]	@ (8002804 <HAL_RCC_OscConfig+0x4a4>)
 8002622:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002626:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002628:	f7ff fb6a 	bl	8001d00 <HAL_GetTick>
 800262c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800262e:	e008      	b.n	8002642 <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8002630:	f7ff fb66 	bl	8001d00 <HAL_GetTick>
 8002634:	4602      	mov	r2, r0
 8002636:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002638:	1ad3      	subs	r3, r2, r3
 800263a:	2b02      	cmp	r3, #2
 800263c:	d901      	bls.n	8002642 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800263e:	2303      	movs	r3, #3
 8002640:	e260      	b.n	8002b04 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002642:	4b70      	ldr	r3, [pc, #448]	@ (8002804 <HAL_RCC_OscConfig+0x4a4>)
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800264a:	2b00      	cmp	r3, #0
 800264c:	d0f0      	beq.n	8002630 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800264e:	4b6d      	ldr	r3, [pc, #436]	@ (8002804 <HAL_RCC_OscConfig+0x4a4>)
 8002650:	68db      	ldr	r3, [r3, #12]
 8002652:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	6a1b      	ldr	r3, [r3, #32]
 800265a:	061b      	lsls	r3, r3, #24
 800265c:	4969      	ldr	r1, [pc, #420]	@ (8002804 <HAL_RCC_OscConfig+0x4a4>)
 800265e:	4313      	orrs	r3, r2
 8002660:	60cb      	str	r3, [r1, #12]
 8002662:	e018      	b.n	8002696 <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8002664:	4b67      	ldr	r3, [pc, #412]	@ (8002804 <HAL_RCC_OscConfig+0x4a4>)
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	4a66      	ldr	r2, [pc, #408]	@ (8002804 <HAL_RCC_OscConfig+0x4a4>)
 800266a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800266e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002670:	f7ff fb46 	bl	8001d00 <HAL_GetTick>
 8002674:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002676:	e008      	b.n	800268a <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8002678:	f7ff fb42 	bl	8001d00 <HAL_GetTick>
 800267c:	4602      	mov	r2, r0
 800267e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002680:	1ad3      	subs	r3, r2, r3
 8002682:	2b02      	cmp	r3, #2
 8002684:	d901      	bls.n	800268a <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 8002686:	2303      	movs	r3, #3
 8002688:	e23c      	b.n	8002b04 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800268a:	4b5e      	ldr	r3, [pc, #376]	@ (8002804 <HAL_RCC_OscConfig+0x4a4>)
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002692:	2b00      	cmp	r3, #0
 8002694:	d1f0      	bne.n	8002678 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	f003 0308 	and.w	r3, r3, #8
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d036      	beq.n	8002710 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	695b      	ldr	r3, [r3, #20]
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d019      	beq.n	80026de <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80026aa:	4b56      	ldr	r3, [pc, #344]	@ (8002804 <HAL_RCC_OscConfig+0x4a4>)
 80026ac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80026ae:	4a55      	ldr	r2, [pc, #340]	@ (8002804 <HAL_RCC_OscConfig+0x4a4>)
 80026b0:	f043 0301 	orr.w	r3, r3, #1
 80026b4:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026b6:	f7ff fb23 	bl	8001d00 <HAL_GetTick>
 80026ba:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80026bc:	e008      	b.n	80026d0 <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80026be:	f7ff fb1f 	bl	8001d00 <HAL_GetTick>
 80026c2:	4602      	mov	r2, r0
 80026c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026c6:	1ad3      	subs	r3, r2, r3
 80026c8:	2b02      	cmp	r3, #2
 80026ca:	d901      	bls.n	80026d0 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 80026cc:	2303      	movs	r3, #3
 80026ce:	e219      	b.n	8002b04 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80026d0:	4b4c      	ldr	r3, [pc, #304]	@ (8002804 <HAL_RCC_OscConfig+0x4a4>)
 80026d2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80026d4:	f003 0302 	and.w	r3, r3, #2
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d0f0      	beq.n	80026be <HAL_RCC_OscConfig+0x35e>
 80026dc:	e018      	b.n	8002710 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80026de:	4b49      	ldr	r3, [pc, #292]	@ (8002804 <HAL_RCC_OscConfig+0x4a4>)
 80026e0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80026e2:	4a48      	ldr	r2, [pc, #288]	@ (8002804 <HAL_RCC_OscConfig+0x4a4>)
 80026e4:	f023 0301 	bic.w	r3, r3, #1
 80026e8:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026ea:	f7ff fb09 	bl	8001d00 <HAL_GetTick>
 80026ee:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80026f0:	e008      	b.n	8002704 <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80026f2:	f7ff fb05 	bl	8001d00 <HAL_GetTick>
 80026f6:	4602      	mov	r2, r0
 80026f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026fa:	1ad3      	subs	r3, r2, r3
 80026fc:	2b02      	cmp	r3, #2
 80026fe:	d901      	bls.n	8002704 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 8002700:	2303      	movs	r3, #3
 8002702:	e1ff      	b.n	8002b04 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002704:	4b3f      	ldr	r3, [pc, #252]	@ (8002804 <HAL_RCC_OscConfig+0x4a4>)
 8002706:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002708:	f003 0302 	and.w	r3, r3, #2
 800270c:	2b00      	cmp	r3, #0
 800270e:	d1f0      	bne.n	80026f2 <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f003 0320 	and.w	r3, r3, #32
 8002718:	2b00      	cmp	r3, #0
 800271a:	d036      	beq.n	800278a <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	699b      	ldr	r3, [r3, #24]
 8002720:	2b00      	cmp	r3, #0
 8002722:	d019      	beq.n	8002758 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002724:	4b37      	ldr	r3, [pc, #220]	@ (8002804 <HAL_RCC_OscConfig+0x4a4>)
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	4a36      	ldr	r2, [pc, #216]	@ (8002804 <HAL_RCC_OscConfig+0x4a4>)
 800272a:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800272e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002730:	f7ff fae6 	bl	8001d00 <HAL_GetTick>
 8002734:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002736:	e008      	b.n	800274a <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002738:	f7ff fae2 	bl	8001d00 <HAL_GetTick>
 800273c:	4602      	mov	r2, r0
 800273e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002740:	1ad3      	subs	r3, r2, r3
 8002742:	2b02      	cmp	r3, #2
 8002744:	d901      	bls.n	800274a <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 8002746:	2303      	movs	r3, #3
 8002748:	e1dc      	b.n	8002b04 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800274a:	4b2e      	ldr	r3, [pc, #184]	@ (8002804 <HAL_RCC_OscConfig+0x4a4>)
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002752:	2b00      	cmp	r3, #0
 8002754:	d0f0      	beq.n	8002738 <HAL_RCC_OscConfig+0x3d8>
 8002756:	e018      	b.n	800278a <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002758:	4b2a      	ldr	r3, [pc, #168]	@ (8002804 <HAL_RCC_OscConfig+0x4a4>)
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	4a29      	ldr	r2, [pc, #164]	@ (8002804 <HAL_RCC_OscConfig+0x4a4>)
 800275e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002762:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002764:	f7ff facc 	bl	8001d00 <HAL_GetTick>
 8002768:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800276a:	e008      	b.n	800277e <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800276c:	f7ff fac8 	bl	8001d00 <HAL_GetTick>
 8002770:	4602      	mov	r2, r0
 8002772:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002774:	1ad3      	subs	r3, r2, r3
 8002776:	2b02      	cmp	r3, #2
 8002778:	d901      	bls.n	800277e <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 800277a:	2303      	movs	r3, #3
 800277c:	e1c2      	b.n	8002b04 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800277e:	4b21      	ldr	r3, [pc, #132]	@ (8002804 <HAL_RCC_OscConfig+0x4a4>)
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002786:	2b00      	cmp	r3, #0
 8002788:	d1f0      	bne.n	800276c <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	f003 0304 	and.w	r3, r3, #4
 8002792:	2b00      	cmp	r3, #0
 8002794:	f000 8086 	beq.w	80028a4 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002798:	4b1b      	ldr	r3, [pc, #108]	@ (8002808 <HAL_RCC_OscConfig+0x4a8>)
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	4a1a      	ldr	r2, [pc, #104]	@ (8002808 <HAL_RCC_OscConfig+0x4a8>)
 800279e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80027a2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80027a4:	f7ff faac 	bl	8001d00 <HAL_GetTick>
 80027a8:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80027aa:	e008      	b.n	80027be <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80027ac:	f7ff faa8 	bl	8001d00 <HAL_GetTick>
 80027b0:	4602      	mov	r2, r0
 80027b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027b4:	1ad3      	subs	r3, r2, r3
 80027b6:	2b64      	cmp	r3, #100	@ 0x64
 80027b8:	d901      	bls.n	80027be <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 80027ba:	2303      	movs	r3, #3
 80027bc:	e1a2      	b.n	8002b04 <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80027be:	4b12      	ldr	r3, [pc, #72]	@ (8002808 <HAL_RCC_OscConfig+0x4a8>)
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d0f0      	beq.n	80027ac <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	689b      	ldr	r3, [r3, #8]
 80027ce:	2b01      	cmp	r3, #1
 80027d0:	d106      	bne.n	80027e0 <HAL_RCC_OscConfig+0x480>
 80027d2:	4b0c      	ldr	r3, [pc, #48]	@ (8002804 <HAL_RCC_OscConfig+0x4a4>)
 80027d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80027d6:	4a0b      	ldr	r2, [pc, #44]	@ (8002804 <HAL_RCC_OscConfig+0x4a4>)
 80027d8:	f043 0301 	orr.w	r3, r3, #1
 80027dc:	6713      	str	r3, [r2, #112]	@ 0x70
 80027de:	e032      	b.n	8002846 <HAL_RCC_OscConfig+0x4e6>
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	689b      	ldr	r3, [r3, #8]
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d111      	bne.n	800280c <HAL_RCC_OscConfig+0x4ac>
 80027e8:	4b06      	ldr	r3, [pc, #24]	@ (8002804 <HAL_RCC_OscConfig+0x4a4>)
 80027ea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80027ec:	4a05      	ldr	r2, [pc, #20]	@ (8002804 <HAL_RCC_OscConfig+0x4a4>)
 80027ee:	f023 0301 	bic.w	r3, r3, #1
 80027f2:	6713      	str	r3, [r2, #112]	@ 0x70
 80027f4:	4b03      	ldr	r3, [pc, #12]	@ (8002804 <HAL_RCC_OscConfig+0x4a4>)
 80027f6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80027f8:	4a02      	ldr	r2, [pc, #8]	@ (8002804 <HAL_RCC_OscConfig+0x4a4>)
 80027fa:	f023 0304 	bic.w	r3, r3, #4
 80027fe:	6713      	str	r3, [r2, #112]	@ 0x70
 8002800:	e021      	b.n	8002846 <HAL_RCC_OscConfig+0x4e6>
 8002802:	bf00      	nop
 8002804:	58024400 	.word	0x58024400
 8002808:	58024800 	.word	0x58024800
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	689b      	ldr	r3, [r3, #8]
 8002810:	2b05      	cmp	r3, #5
 8002812:	d10c      	bne.n	800282e <HAL_RCC_OscConfig+0x4ce>
 8002814:	4b83      	ldr	r3, [pc, #524]	@ (8002a24 <HAL_RCC_OscConfig+0x6c4>)
 8002816:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002818:	4a82      	ldr	r2, [pc, #520]	@ (8002a24 <HAL_RCC_OscConfig+0x6c4>)
 800281a:	f043 0304 	orr.w	r3, r3, #4
 800281e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002820:	4b80      	ldr	r3, [pc, #512]	@ (8002a24 <HAL_RCC_OscConfig+0x6c4>)
 8002822:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002824:	4a7f      	ldr	r2, [pc, #508]	@ (8002a24 <HAL_RCC_OscConfig+0x6c4>)
 8002826:	f043 0301 	orr.w	r3, r3, #1
 800282a:	6713      	str	r3, [r2, #112]	@ 0x70
 800282c:	e00b      	b.n	8002846 <HAL_RCC_OscConfig+0x4e6>
 800282e:	4b7d      	ldr	r3, [pc, #500]	@ (8002a24 <HAL_RCC_OscConfig+0x6c4>)
 8002830:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002832:	4a7c      	ldr	r2, [pc, #496]	@ (8002a24 <HAL_RCC_OscConfig+0x6c4>)
 8002834:	f023 0301 	bic.w	r3, r3, #1
 8002838:	6713      	str	r3, [r2, #112]	@ 0x70
 800283a:	4b7a      	ldr	r3, [pc, #488]	@ (8002a24 <HAL_RCC_OscConfig+0x6c4>)
 800283c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800283e:	4a79      	ldr	r2, [pc, #484]	@ (8002a24 <HAL_RCC_OscConfig+0x6c4>)
 8002840:	f023 0304 	bic.w	r3, r3, #4
 8002844:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	689b      	ldr	r3, [r3, #8]
 800284a:	2b00      	cmp	r3, #0
 800284c:	d015      	beq.n	800287a <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800284e:	f7ff fa57 	bl	8001d00 <HAL_GetTick>
 8002852:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002854:	e00a      	b.n	800286c <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002856:	f7ff fa53 	bl	8001d00 <HAL_GetTick>
 800285a:	4602      	mov	r2, r0
 800285c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800285e:	1ad3      	subs	r3, r2, r3
 8002860:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002864:	4293      	cmp	r3, r2
 8002866:	d901      	bls.n	800286c <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 8002868:	2303      	movs	r3, #3
 800286a:	e14b      	b.n	8002b04 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800286c:	4b6d      	ldr	r3, [pc, #436]	@ (8002a24 <HAL_RCC_OscConfig+0x6c4>)
 800286e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002870:	f003 0302 	and.w	r3, r3, #2
 8002874:	2b00      	cmp	r3, #0
 8002876:	d0ee      	beq.n	8002856 <HAL_RCC_OscConfig+0x4f6>
 8002878:	e014      	b.n	80028a4 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800287a:	f7ff fa41 	bl	8001d00 <HAL_GetTick>
 800287e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002880:	e00a      	b.n	8002898 <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002882:	f7ff fa3d 	bl	8001d00 <HAL_GetTick>
 8002886:	4602      	mov	r2, r0
 8002888:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800288a:	1ad3      	subs	r3, r2, r3
 800288c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002890:	4293      	cmp	r3, r2
 8002892:	d901      	bls.n	8002898 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 8002894:	2303      	movs	r3, #3
 8002896:	e135      	b.n	8002b04 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002898:	4b62      	ldr	r3, [pc, #392]	@ (8002a24 <HAL_RCC_OscConfig+0x6c4>)
 800289a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800289c:	f003 0302 	and.w	r3, r3, #2
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d1ee      	bne.n	8002882 <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	f000 812a 	beq.w	8002b02 <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80028ae:	4b5d      	ldr	r3, [pc, #372]	@ (8002a24 <HAL_RCC_OscConfig+0x6c4>)
 80028b0:	691b      	ldr	r3, [r3, #16]
 80028b2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80028b6:	2b18      	cmp	r3, #24
 80028b8:	f000 80ba 	beq.w	8002a30 <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028c0:	2b02      	cmp	r3, #2
 80028c2:	f040 8095 	bne.w	80029f0 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80028c6:	4b57      	ldr	r3, [pc, #348]	@ (8002a24 <HAL_RCC_OscConfig+0x6c4>)
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	4a56      	ldr	r2, [pc, #344]	@ (8002a24 <HAL_RCC_OscConfig+0x6c4>)
 80028cc:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80028d0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028d2:	f7ff fa15 	bl	8001d00 <HAL_GetTick>
 80028d6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80028d8:	e008      	b.n	80028ec <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028da:	f7ff fa11 	bl	8001d00 <HAL_GetTick>
 80028de:	4602      	mov	r2, r0
 80028e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028e2:	1ad3      	subs	r3, r2, r3
 80028e4:	2b02      	cmp	r3, #2
 80028e6:	d901      	bls.n	80028ec <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 80028e8:	2303      	movs	r3, #3
 80028ea:	e10b      	b.n	8002b04 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80028ec:	4b4d      	ldr	r3, [pc, #308]	@ (8002a24 <HAL_RCC_OscConfig+0x6c4>)
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d1f0      	bne.n	80028da <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80028f8:	4b4a      	ldr	r3, [pc, #296]	@ (8002a24 <HAL_RCC_OscConfig+0x6c4>)
 80028fa:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80028fc:	4b4a      	ldr	r3, [pc, #296]	@ (8002a28 <HAL_RCC_OscConfig+0x6c8>)
 80028fe:	4013      	ands	r3, r2
 8002900:	687a      	ldr	r2, [r7, #4]
 8002902:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8002904:	687a      	ldr	r2, [r7, #4]
 8002906:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8002908:	0112      	lsls	r2, r2, #4
 800290a:	430a      	orrs	r2, r1
 800290c:	4945      	ldr	r1, [pc, #276]	@ (8002a24 <HAL_RCC_OscConfig+0x6c4>)
 800290e:	4313      	orrs	r3, r2
 8002910:	628b      	str	r3, [r1, #40]	@ 0x28
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002916:	3b01      	subs	r3, #1
 8002918:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002920:	3b01      	subs	r3, #1
 8002922:	025b      	lsls	r3, r3, #9
 8002924:	b29b      	uxth	r3, r3
 8002926:	431a      	orrs	r2, r3
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800292c:	3b01      	subs	r3, #1
 800292e:	041b      	lsls	r3, r3, #16
 8002930:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8002934:	431a      	orrs	r2, r3
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800293a:	3b01      	subs	r3, #1
 800293c:	061b      	lsls	r3, r3, #24
 800293e:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8002942:	4938      	ldr	r1, [pc, #224]	@ (8002a24 <HAL_RCC_OscConfig+0x6c4>)
 8002944:	4313      	orrs	r3, r2
 8002946:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8002948:	4b36      	ldr	r3, [pc, #216]	@ (8002a24 <HAL_RCC_OscConfig+0x6c4>)
 800294a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800294c:	4a35      	ldr	r2, [pc, #212]	@ (8002a24 <HAL_RCC_OscConfig+0x6c4>)
 800294e:	f023 0301 	bic.w	r3, r3, #1
 8002952:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002954:	4b33      	ldr	r3, [pc, #204]	@ (8002a24 <HAL_RCC_OscConfig+0x6c4>)
 8002956:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002958:	4b34      	ldr	r3, [pc, #208]	@ (8002a2c <HAL_RCC_OscConfig+0x6cc>)
 800295a:	4013      	ands	r3, r2
 800295c:	687a      	ldr	r2, [r7, #4]
 800295e:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002960:	00d2      	lsls	r2, r2, #3
 8002962:	4930      	ldr	r1, [pc, #192]	@ (8002a24 <HAL_RCC_OscConfig+0x6c4>)
 8002964:	4313      	orrs	r3, r2
 8002966:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8002968:	4b2e      	ldr	r3, [pc, #184]	@ (8002a24 <HAL_RCC_OscConfig+0x6c4>)
 800296a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800296c:	f023 020c 	bic.w	r2, r3, #12
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002974:	492b      	ldr	r1, [pc, #172]	@ (8002a24 <HAL_RCC_OscConfig+0x6c4>)
 8002976:	4313      	orrs	r3, r2
 8002978:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800297a:	4b2a      	ldr	r3, [pc, #168]	@ (8002a24 <HAL_RCC_OscConfig+0x6c4>)
 800297c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800297e:	f023 0202 	bic.w	r2, r3, #2
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002986:	4927      	ldr	r1, [pc, #156]	@ (8002a24 <HAL_RCC_OscConfig+0x6c4>)
 8002988:	4313      	orrs	r3, r2
 800298a:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800298c:	4b25      	ldr	r3, [pc, #148]	@ (8002a24 <HAL_RCC_OscConfig+0x6c4>)
 800298e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002990:	4a24      	ldr	r2, [pc, #144]	@ (8002a24 <HAL_RCC_OscConfig+0x6c4>)
 8002992:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002996:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002998:	4b22      	ldr	r3, [pc, #136]	@ (8002a24 <HAL_RCC_OscConfig+0x6c4>)
 800299a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800299c:	4a21      	ldr	r2, [pc, #132]	@ (8002a24 <HAL_RCC_OscConfig+0x6c4>)
 800299e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80029a2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80029a4:	4b1f      	ldr	r3, [pc, #124]	@ (8002a24 <HAL_RCC_OscConfig+0x6c4>)
 80029a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029a8:	4a1e      	ldr	r2, [pc, #120]	@ (8002a24 <HAL_RCC_OscConfig+0x6c4>)
 80029aa:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80029ae:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 80029b0:	4b1c      	ldr	r3, [pc, #112]	@ (8002a24 <HAL_RCC_OscConfig+0x6c4>)
 80029b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029b4:	4a1b      	ldr	r2, [pc, #108]	@ (8002a24 <HAL_RCC_OscConfig+0x6c4>)
 80029b6:	f043 0301 	orr.w	r3, r3, #1
 80029ba:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80029bc:	4b19      	ldr	r3, [pc, #100]	@ (8002a24 <HAL_RCC_OscConfig+0x6c4>)
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	4a18      	ldr	r2, [pc, #96]	@ (8002a24 <HAL_RCC_OscConfig+0x6c4>)
 80029c2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80029c6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029c8:	f7ff f99a 	bl	8001d00 <HAL_GetTick>
 80029cc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80029ce:	e008      	b.n	80029e2 <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80029d0:	f7ff f996 	bl	8001d00 <HAL_GetTick>
 80029d4:	4602      	mov	r2, r0
 80029d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029d8:	1ad3      	subs	r3, r2, r3
 80029da:	2b02      	cmp	r3, #2
 80029dc:	d901      	bls.n	80029e2 <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 80029de:	2303      	movs	r3, #3
 80029e0:	e090      	b.n	8002b04 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80029e2:	4b10      	ldr	r3, [pc, #64]	@ (8002a24 <HAL_RCC_OscConfig+0x6c4>)
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d0f0      	beq.n	80029d0 <HAL_RCC_OscConfig+0x670>
 80029ee:	e088      	b.n	8002b02 <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80029f0:	4b0c      	ldr	r3, [pc, #48]	@ (8002a24 <HAL_RCC_OscConfig+0x6c4>)
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	4a0b      	ldr	r2, [pc, #44]	@ (8002a24 <HAL_RCC_OscConfig+0x6c4>)
 80029f6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80029fa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029fc:	f7ff f980 	bl	8001d00 <HAL_GetTick>
 8002a00:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002a02:	e008      	b.n	8002a16 <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a04:	f7ff f97c 	bl	8001d00 <HAL_GetTick>
 8002a08:	4602      	mov	r2, r0
 8002a0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a0c:	1ad3      	subs	r3, r2, r3
 8002a0e:	2b02      	cmp	r3, #2
 8002a10:	d901      	bls.n	8002a16 <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 8002a12:	2303      	movs	r3, #3
 8002a14:	e076      	b.n	8002b04 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002a16:	4b03      	ldr	r3, [pc, #12]	@ (8002a24 <HAL_RCC_OscConfig+0x6c4>)
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d1f0      	bne.n	8002a04 <HAL_RCC_OscConfig+0x6a4>
 8002a22:	e06e      	b.n	8002b02 <HAL_RCC_OscConfig+0x7a2>
 8002a24:	58024400 	.word	0x58024400
 8002a28:	fffffc0c 	.word	0xfffffc0c
 8002a2c:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8002a30:	4b36      	ldr	r3, [pc, #216]	@ (8002b0c <HAL_RCC_OscConfig+0x7ac>)
 8002a32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a34:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8002a36:	4b35      	ldr	r3, [pc, #212]	@ (8002b0c <HAL_RCC_OscConfig+0x7ac>)
 8002a38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a3a:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a40:	2b01      	cmp	r3, #1
 8002a42:	d031      	beq.n	8002aa8 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a44:	693b      	ldr	r3, [r7, #16]
 8002a46:	f003 0203 	and.w	r2, r3, #3
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002a4e:	429a      	cmp	r2, r3
 8002a50:	d12a      	bne.n	8002aa8 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002a52:	693b      	ldr	r3, [r7, #16]
 8002a54:	091b      	lsrs	r3, r3, #4
 8002a56:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a5e:	429a      	cmp	r2, r3
 8002a60:	d122      	bne.n	8002aa8 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a6c:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002a6e:	429a      	cmp	r2, r3
 8002a70:	d11a      	bne.n	8002aa8 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	0a5b      	lsrs	r3, r3, #9
 8002a76:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002a7e:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002a80:	429a      	cmp	r2, r3
 8002a82:	d111      	bne.n	8002aa8 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	0c1b      	lsrs	r3, r3, #16
 8002a88:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a90:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002a92:	429a      	cmp	r2, r3
 8002a94:	d108      	bne.n	8002aa8 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	0e1b      	lsrs	r3, r3, #24
 8002a9a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002aa2:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002aa4:	429a      	cmp	r2, r3
 8002aa6:	d001      	beq.n	8002aac <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 8002aa8:	2301      	movs	r3, #1
 8002aaa:	e02b      	b.n	8002b04 <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8002aac:	4b17      	ldr	r3, [pc, #92]	@ (8002b0c <HAL_RCC_OscConfig+0x7ac>)
 8002aae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002ab0:	08db      	lsrs	r3, r3, #3
 8002ab2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002ab6:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002abc:	693a      	ldr	r2, [r7, #16]
 8002abe:	429a      	cmp	r2, r3
 8002ac0:	d01f      	beq.n	8002b02 <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8002ac2:	4b12      	ldr	r3, [pc, #72]	@ (8002b0c <HAL_RCC_OscConfig+0x7ac>)
 8002ac4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ac6:	4a11      	ldr	r2, [pc, #68]	@ (8002b0c <HAL_RCC_OscConfig+0x7ac>)
 8002ac8:	f023 0301 	bic.w	r3, r3, #1
 8002acc:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002ace:	f7ff f917 	bl	8001d00 <HAL_GetTick>
 8002ad2:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8002ad4:	bf00      	nop
 8002ad6:	f7ff f913 	bl	8001d00 <HAL_GetTick>
 8002ada:	4602      	mov	r2, r0
 8002adc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ade:	4293      	cmp	r3, r2
 8002ae0:	d0f9      	beq.n	8002ad6 <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002ae2:	4b0a      	ldr	r3, [pc, #40]	@ (8002b0c <HAL_RCC_OscConfig+0x7ac>)
 8002ae4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002ae6:	4b0a      	ldr	r3, [pc, #40]	@ (8002b10 <HAL_RCC_OscConfig+0x7b0>)
 8002ae8:	4013      	ands	r3, r2
 8002aea:	687a      	ldr	r2, [r7, #4]
 8002aec:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002aee:	00d2      	lsls	r2, r2, #3
 8002af0:	4906      	ldr	r1, [pc, #24]	@ (8002b0c <HAL_RCC_OscConfig+0x7ac>)
 8002af2:	4313      	orrs	r3, r2
 8002af4:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8002af6:	4b05      	ldr	r3, [pc, #20]	@ (8002b0c <HAL_RCC_OscConfig+0x7ac>)
 8002af8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002afa:	4a04      	ldr	r2, [pc, #16]	@ (8002b0c <HAL_RCC_OscConfig+0x7ac>)
 8002afc:	f043 0301 	orr.w	r3, r3, #1
 8002b00:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8002b02:	2300      	movs	r3, #0
}
 8002b04:	4618      	mov	r0, r3
 8002b06:	3730      	adds	r7, #48	@ 0x30
 8002b08:	46bd      	mov	sp, r7
 8002b0a:	bd80      	pop	{r7, pc}
 8002b0c:	58024400 	.word	0x58024400
 8002b10:	ffff0007 	.word	0xffff0007

08002b14 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002b14:	b580      	push	{r7, lr}
 8002b16:	b086      	sub	sp, #24
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	6078      	str	r0, [r7, #4]
 8002b1c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d101      	bne.n	8002b28 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002b24:	2301      	movs	r3, #1
 8002b26:	e19c      	b.n	8002e62 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002b28:	4b8a      	ldr	r3, [pc, #552]	@ (8002d54 <HAL_RCC_ClockConfig+0x240>)
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f003 030f 	and.w	r3, r3, #15
 8002b30:	683a      	ldr	r2, [r7, #0]
 8002b32:	429a      	cmp	r2, r3
 8002b34:	d910      	bls.n	8002b58 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b36:	4b87      	ldr	r3, [pc, #540]	@ (8002d54 <HAL_RCC_ClockConfig+0x240>)
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f023 020f 	bic.w	r2, r3, #15
 8002b3e:	4985      	ldr	r1, [pc, #532]	@ (8002d54 <HAL_RCC_ClockConfig+0x240>)
 8002b40:	683b      	ldr	r3, [r7, #0]
 8002b42:	4313      	orrs	r3, r2
 8002b44:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b46:	4b83      	ldr	r3, [pc, #524]	@ (8002d54 <HAL_RCC_ClockConfig+0x240>)
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f003 030f 	and.w	r3, r3, #15
 8002b4e:	683a      	ldr	r2, [r7, #0]
 8002b50:	429a      	cmp	r2, r3
 8002b52:	d001      	beq.n	8002b58 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002b54:	2301      	movs	r3, #1
 8002b56:	e184      	b.n	8002e62 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	f003 0304 	and.w	r3, r3, #4
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d010      	beq.n	8002b86 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	691a      	ldr	r2, [r3, #16]
 8002b68:	4b7b      	ldr	r3, [pc, #492]	@ (8002d58 <HAL_RCC_ClockConfig+0x244>)
 8002b6a:	699b      	ldr	r3, [r3, #24]
 8002b6c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002b70:	429a      	cmp	r2, r3
 8002b72:	d908      	bls.n	8002b86 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002b74:	4b78      	ldr	r3, [pc, #480]	@ (8002d58 <HAL_RCC_ClockConfig+0x244>)
 8002b76:	699b      	ldr	r3, [r3, #24]
 8002b78:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	691b      	ldr	r3, [r3, #16]
 8002b80:	4975      	ldr	r1, [pc, #468]	@ (8002d58 <HAL_RCC_ClockConfig+0x244>)
 8002b82:	4313      	orrs	r3, r2
 8002b84:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f003 0308 	and.w	r3, r3, #8
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d010      	beq.n	8002bb4 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	695a      	ldr	r2, [r3, #20]
 8002b96:	4b70      	ldr	r3, [pc, #448]	@ (8002d58 <HAL_RCC_ClockConfig+0x244>)
 8002b98:	69db      	ldr	r3, [r3, #28]
 8002b9a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002b9e:	429a      	cmp	r2, r3
 8002ba0:	d908      	bls.n	8002bb4 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002ba2:	4b6d      	ldr	r3, [pc, #436]	@ (8002d58 <HAL_RCC_ClockConfig+0x244>)
 8002ba4:	69db      	ldr	r3, [r3, #28]
 8002ba6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	695b      	ldr	r3, [r3, #20]
 8002bae:	496a      	ldr	r1, [pc, #424]	@ (8002d58 <HAL_RCC_ClockConfig+0x244>)
 8002bb0:	4313      	orrs	r3, r2
 8002bb2:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	f003 0310 	and.w	r3, r3, #16
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d010      	beq.n	8002be2 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	699a      	ldr	r2, [r3, #24]
 8002bc4:	4b64      	ldr	r3, [pc, #400]	@ (8002d58 <HAL_RCC_ClockConfig+0x244>)
 8002bc6:	69db      	ldr	r3, [r3, #28]
 8002bc8:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002bcc:	429a      	cmp	r2, r3
 8002bce:	d908      	bls.n	8002be2 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002bd0:	4b61      	ldr	r3, [pc, #388]	@ (8002d58 <HAL_RCC_ClockConfig+0x244>)
 8002bd2:	69db      	ldr	r3, [r3, #28]
 8002bd4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	699b      	ldr	r3, [r3, #24]
 8002bdc:	495e      	ldr	r1, [pc, #376]	@ (8002d58 <HAL_RCC_ClockConfig+0x244>)
 8002bde:	4313      	orrs	r3, r2
 8002be0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f003 0320 	and.w	r3, r3, #32
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d010      	beq.n	8002c10 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	69da      	ldr	r2, [r3, #28]
 8002bf2:	4b59      	ldr	r3, [pc, #356]	@ (8002d58 <HAL_RCC_ClockConfig+0x244>)
 8002bf4:	6a1b      	ldr	r3, [r3, #32]
 8002bf6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002bfa:	429a      	cmp	r2, r3
 8002bfc:	d908      	bls.n	8002c10 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8002bfe:	4b56      	ldr	r3, [pc, #344]	@ (8002d58 <HAL_RCC_ClockConfig+0x244>)
 8002c00:	6a1b      	ldr	r3, [r3, #32]
 8002c02:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	69db      	ldr	r3, [r3, #28]
 8002c0a:	4953      	ldr	r1, [pc, #332]	@ (8002d58 <HAL_RCC_ClockConfig+0x244>)
 8002c0c:	4313      	orrs	r3, r2
 8002c0e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	f003 0302 	and.w	r3, r3, #2
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d010      	beq.n	8002c3e <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	68da      	ldr	r2, [r3, #12]
 8002c20:	4b4d      	ldr	r3, [pc, #308]	@ (8002d58 <HAL_RCC_ClockConfig+0x244>)
 8002c22:	699b      	ldr	r3, [r3, #24]
 8002c24:	f003 030f 	and.w	r3, r3, #15
 8002c28:	429a      	cmp	r2, r3
 8002c2a:	d908      	bls.n	8002c3e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002c2c:	4b4a      	ldr	r3, [pc, #296]	@ (8002d58 <HAL_RCC_ClockConfig+0x244>)
 8002c2e:	699b      	ldr	r3, [r3, #24]
 8002c30:	f023 020f 	bic.w	r2, r3, #15
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	68db      	ldr	r3, [r3, #12]
 8002c38:	4947      	ldr	r1, [pc, #284]	@ (8002d58 <HAL_RCC_ClockConfig+0x244>)
 8002c3a:	4313      	orrs	r3, r2
 8002c3c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	f003 0301 	and.w	r3, r3, #1
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d055      	beq.n	8002cf6 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8002c4a:	4b43      	ldr	r3, [pc, #268]	@ (8002d58 <HAL_RCC_ClockConfig+0x244>)
 8002c4c:	699b      	ldr	r3, [r3, #24]
 8002c4e:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	689b      	ldr	r3, [r3, #8]
 8002c56:	4940      	ldr	r1, [pc, #256]	@ (8002d58 <HAL_RCC_ClockConfig+0x244>)
 8002c58:	4313      	orrs	r3, r2
 8002c5a:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	685b      	ldr	r3, [r3, #4]
 8002c60:	2b02      	cmp	r3, #2
 8002c62:	d107      	bne.n	8002c74 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002c64:	4b3c      	ldr	r3, [pc, #240]	@ (8002d58 <HAL_RCC_ClockConfig+0x244>)
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d121      	bne.n	8002cb4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002c70:	2301      	movs	r3, #1
 8002c72:	e0f6      	b.n	8002e62 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	685b      	ldr	r3, [r3, #4]
 8002c78:	2b03      	cmp	r3, #3
 8002c7a:	d107      	bne.n	8002c8c <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002c7c:	4b36      	ldr	r3, [pc, #216]	@ (8002d58 <HAL_RCC_ClockConfig+0x244>)
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d115      	bne.n	8002cb4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002c88:	2301      	movs	r3, #1
 8002c8a:	e0ea      	b.n	8002e62 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	685b      	ldr	r3, [r3, #4]
 8002c90:	2b01      	cmp	r3, #1
 8002c92:	d107      	bne.n	8002ca4 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002c94:	4b30      	ldr	r3, [pc, #192]	@ (8002d58 <HAL_RCC_ClockConfig+0x244>)
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d109      	bne.n	8002cb4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002ca0:	2301      	movs	r3, #1
 8002ca2:	e0de      	b.n	8002e62 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002ca4:	4b2c      	ldr	r3, [pc, #176]	@ (8002d58 <HAL_RCC_ClockConfig+0x244>)
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	f003 0304 	and.w	r3, r3, #4
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d101      	bne.n	8002cb4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002cb0:	2301      	movs	r3, #1
 8002cb2:	e0d6      	b.n	8002e62 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002cb4:	4b28      	ldr	r3, [pc, #160]	@ (8002d58 <HAL_RCC_ClockConfig+0x244>)
 8002cb6:	691b      	ldr	r3, [r3, #16]
 8002cb8:	f023 0207 	bic.w	r2, r3, #7
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	685b      	ldr	r3, [r3, #4]
 8002cc0:	4925      	ldr	r1, [pc, #148]	@ (8002d58 <HAL_RCC_ClockConfig+0x244>)
 8002cc2:	4313      	orrs	r3, r2
 8002cc4:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002cc6:	f7ff f81b 	bl	8001d00 <HAL_GetTick>
 8002cca:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ccc:	e00a      	b.n	8002ce4 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002cce:	f7ff f817 	bl	8001d00 <HAL_GetTick>
 8002cd2:	4602      	mov	r2, r0
 8002cd4:	697b      	ldr	r3, [r7, #20]
 8002cd6:	1ad3      	subs	r3, r2, r3
 8002cd8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002cdc:	4293      	cmp	r3, r2
 8002cde:	d901      	bls.n	8002ce4 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8002ce0:	2303      	movs	r3, #3
 8002ce2:	e0be      	b.n	8002e62 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ce4:	4b1c      	ldr	r3, [pc, #112]	@ (8002d58 <HAL_RCC_ClockConfig+0x244>)
 8002ce6:	691b      	ldr	r3, [r3, #16]
 8002ce8:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	685b      	ldr	r3, [r3, #4]
 8002cf0:	00db      	lsls	r3, r3, #3
 8002cf2:	429a      	cmp	r2, r3
 8002cf4:	d1eb      	bne.n	8002cce <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	f003 0302 	and.w	r3, r3, #2
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d010      	beq.n	8002d24 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	68da      	ldr	r2, [r3, #12]
 8002d06:	4b14      	ldr	r3, [pc, #80]	@ (8002d58 <HAL_RCC_ClockConfig+0x244>)
 8002d08:	699b      	ldr	r3, [r3, #24]
 8002d0a:	f003 030f 	and.w	r3, r3, #15
 8002d0e:	429a      	cmp	r2, r3
 8002d10:	d208      	bcs.n	8002d24 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002d12:	4b11      	ldr	r3, [pc, #68]	@ (8002d58 <HAL_RCC_ClockConfig+0x244>)
 8002d14:	699b      	ldr	r3, [r3, #24]
 8002d16:	f023 020f 	bic.w	r2, r3, #15
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	68db      	ldr	r3, [r3, #12]
 8002d1e:	490e      	ldr	r1, [pc, #56]	@ (8002d58 <HAL_RCC_ClockConfig+0x244>)
 8002d20:	4313      	orrs	r3, r2
 8002d22:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002d24:	4b0b      	ldr	r3, [pc, #44]	@ (8002d54 <HAL_RCC_ClockConfig+0x240>)
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	f003 030f 	and.w	r3, r3, #15
 8002d2c:	683a      	ldr	r2, [r7, #0]
 8002d2e:	429a      	cmp	r2, r3
 8002d30:	d214      	bcs.n	8002d5c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d32:	4b08      	ldr	r3, [pc, #32]	@ (8002d54 <HAL_RCC_ClockConfig+0x240>)
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	f023 020f 	bic.w	r2, r3, #15
 8002d3a:	4906      	ldr	r1, [pc, #24]	@ (8002d54 <HAL_RCC_ClockConfig+0x240>)
 8002d3c:	683b      	ldr	r3, [r7, #0]
 8002d3e:	4313      	orrs	r3, r2
 8002d40:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d42:	4b04      	ldr	r3, [pc, #16]	@ (8002d54 <HAL_RCC_ClockConfig+0x240>)
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	f003 030f 	and.w	r3, r3, #15
 8002d4a:	683a      	ldr	r2, [r7, #0]
 8002d4c:	429a      	cmp	r2, r3
 8002d4e:	d005      	beq.n	8002d5c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8002d50:	2301      	movs	r3, #1
 8002d52:	e086      	b.n	8002e62 <HAL_RCC_ClockConfig+0x34e>
 8002d54:	52002000 	.word	0x52002000
 8002d58:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	f003 0304 	and.w	r3, r3, #4
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d010      	beq.n	8002d8a <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	691a      	ldr	r2, [r3, #16]
 8002d6c:	4b3f      	ldr	r3, [pc, #252]	@ (8002e6c <HAL_RCC_ClockConfig+0x358>)
 8002d6e:	699b      	ldr	r3, [r3, #24]
 8002d70:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002d74:	429a      	cmp	r2, r3
 8002d76:	d208      	bcs.n	8002d8a <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002d78:	4b3c      	ldr	r3, [pc, #240]	@ (8002e6c <HAL_RCC_ClockConfig+0x358>)
 8002d7a:	699b      	ldr	r3, [r3, #24]
 8002d7c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	691b      	ldr	r3, [r3, #16]
 8002d84:	4939      	ldr	r1, [pc, #228]	@ (8002e6c <HAL_RCC_ClockConfig+0x358>)
 8002d86:	4313      	orrs	r3, r2
 8002d88:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	f003 0308 	and.w	r3, r3, #8
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d010      	beq.n	8002db8 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	695a      	ldr	r2, [r3, #20]
 8002d9a:	4b34      	ldr	r3, [pc, #208]	@ (8002e6c <HAL_RCC_ClockConfig+0x358>)
 8002d9c:	69db      	ldr	r3, [r3, #28]
 8002d9e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002da2:	429a      	cmp	r2, r3
 8002da4:	d208      	bcs.n	8002db8 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002da6:	4b31      	ldr	r3, [pc, #196]	@ (8002e6c <HAL_RCC_ClockConfig+0x358>)
 8002da8:	69db      	ldr	r3, [r3, #28]
 8002daa:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	695b      	ldr	r3, [r3, #20]
 8002db2:	492e      	ldr	r1, [pc, #184]	@ (8002e6c <HAL_RCC_ClockConfig+0x358>)
 8002db4:	4313      	orrs	r3, r2
 8002db6:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	f003 0310 	and.w	r3, r3, #16
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d010      	beq.n	8002de6 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	699a      	ldr	r2, [r3, #24]
 8002dc8:	4b28      	ldr	r3, [pc, #160]	@ (8002e6c <HAL_RCC_ClockConfig+0x358>)
 8002dca:	69db      	ldr	r3, [r3, #28]
 8002dcc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002dd0:	429a      	cmp	r2, r3
 8002dd2:	d208      	bcs.n	8002de6 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002dd4:	4b25      	ldr	r3, [pc, #148]	@ (8002e6c <HAL_RCC_ClockConfig+0x358>)
 8002dd6:	69db      	ldr	r3, [r3, #28]
 8002dd8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	699b      	ldr	r3, [r3, #24]
 8002de0:	4922      	ldr	r1, [pc, #136]	@ (8002e6c <HAL_RCC_ClockConfig+0x358>)
 8002de2:	4313      	orrs	r3, r2
 8002de4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	f003 0320 	and.w	r3, r3, #32
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d010      	beq.n	8002e14 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	69da      	ldr	r2, [r3, #28]
 8002df6:	4b1d      	ldr	r3, [pc, #116]	@ (8002e6c <HAL_RCC_ClockConfig+0x358>)
 8002df8:	6a1b      	ldr	r3, [r3, #32]
 8002dfa:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002dfe:	429a      	cmp	r2, r3
 8002e00:	d208      	bcs.n	8002e14 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8002e02:	4b1a      	ldr	r3, [pc, #104]	@ (8002e6c <HAL_RCC_ClockConfig+0x358>)
 8002e04:	6a1b      	ldr	r3, [r3, #32]
 8002e06:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	69db      	ldr	r3, [r3, #28]
 8002e0e:	4917      	ldr	r1, [pc, #92]	@ (8002e6c <HAL_RCC_ClockConfig+0x358>)
 8002e10:	4313      	orrs	r3, r2
 8002e12:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002e14:	f000 f834 	bl	8002e80 <HAL_RCC_GetSysClockFreq>
 8002e18:	4602      	mov	r2, r0
 8002e1a:	4b14      	ldr	r3, [pc, #80]	@ (8002e6c <HAL_RCC_ClockConfig+0x358>)
 8002e1c:	699b      	ldr	r3, [r3, #24]
 8002e1e:	0a1b      	lsrs	r3, r3, #8
 8002e20:	f003 030f 	and.w	r3, r3, #15
 8002e24:	4912      	ldr	r1, [pc, #72]	@ (8002e70 <HAL_RCC_ClockConfig+0x35c>)
 8002e26:	5ccb      	ldrb	r3, [r1, r3]
 8002e28:	f003 031f 	and.w	r3, r3, #31
 8002e2c:	fa22 f303 	lsr.w	r3, r2, r3
 8002e30:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002e32:	4b0e      	ldr	r3, [pc, #56]	@ (8002e6c <HAL_RCC_ClockConfig+0x358>)
 8002e34:	699b      	ldr	r3, [r3, #24]
 8002e36:	f003 030f 	and.w	r3, r3, #15
 8002e3a:	4a0d      	ldr	r2, [pc, #52]	@ (8002e70 <HAL_RCC_ClockConfig+0x35c>)
 8002e3c:	5cd3      	ldrb	r3, [r2, r3]
 8002e3e:	f003 031f 	and.w	r3, r3, #31
 8002e42:	693a      	ldr	r2, [r7, #16]
 8002e44:	fa22 f303 	lsr.w	r3, r2, r3
 8002e48:	4a0a      	ldr	r2, [pc, #40]	@ (8002e74 <HAL_RCC_ClockConfig+0x360>)
 8002e4a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002e4c:	4a0a      	ldr	r2, [pc, #40]	@ (8002e78 <HAL_RCC_ClockConfig+0x364>)
 8002e4e:	693b      	ldr	r3, [r7, #16]
 8002e50:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8002e52:	4b0a      	ldr	r3, [pc, #40]	@ (8002e7c <HAL_RCC_ClockConfig+0x368>)
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	4618      	mov	r0, r3
 8002e58:	f7fe ff08 	bl	8001c6c <HAL_InitTick>
 8002e5c:	4603      	mov	r3, r0
 8002e5e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8002e60:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e62:	4618      	mov	r0, r3
 8002e64:	3718      	adds	r7, #24
 8002e66:	46bd      	mov	sp, r7
 8002e68:	bd80      	pop	{r7, pc}
 8002e6a:	bf00      	nop
 8002e6c:	58024400 	.word	0x58024400
 8002e70:	0801c58c 	.word	0x0801c58c
 8002e74:	24000004 	.word	0x24000004
 8002e78:	24000000 	.word	0x24000000
 8002e7c:	24000008 	.word	0x24000008

08002e80 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002e80:	b480      	push	{r7}
 8002e82:	b089      	sub	sp, #36	@ 0x24
 8002e84:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002e86:	4bb3      	ldr	r3, [pc, #716]	@ (8003154 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002e88:	691b      	ldr	r3, [r3, #16]
 8002e8a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002e8e:	2b18      	cmp	r3, #24
 8002e90:	f200 8155 	bhi.w	800313e <HAL_RCC_GetSysClockFreq+0x2be>
 8002e94:	a201      	add	r2, pc, #4	@ (adr r2, 8002e9c <HAL_RCC_GetSysClockFreq+0x1c>)
 8002e96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e9a:	bf00      	nop
 8002e9c:	08002f01 	.word	0x08002f01
 8002ea0:	0800313f 	.word	0x0800313f
 8002ea4:	0800313f 	.word	0x0800313f
 8002ea8:	0800313f 	.word	0x0800313f
 8002eac:	0800313f 	.word	0x0800313f
 8002eb0:	0800313f 	.word	0x0800313f
 8002eb4:	0800313f 	.word	0x0800313f
 8002eb8:	0800313f 	.word	0x0800313f
 8002ebc:	08002f27 	.word	0x08002f27
 8002ec0:	0800313f 	.word	0x0800313f
 8002ec4:	0800313f 	.word	0x0800313f
 8002ec8:	0800313f 	.word	0x0800313f
 8002ecc:	0800313f 	.word	0x0800313f
 8002ed0:	0800313f 	.word	0x0800313f
 8002ed4:	0800313f 	.word	0x0800313f
 8002ed8:	0800313f 	.word	0x0800313f
 8002edc:	08002f2d 	.word	0x08002f2d
 8002ee0:	0800313f 	.word	0x0800313f
 8002ee4:	0800313f 	.word	0x0800313f
 8002ee8:	0800313f 	.word	0x0800313f
 8002eec:	0800313f 	.word	0x0800313f
 8002ef0:	0800313f 	.word	0x0800313f
 8002ef4:	0800313f 	.word	0x0800313f
 8002ef8:	0800313f 	.word	0x0800313f
 8002efc:	08002f33 	.word	0x08002f33
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002f00:	4b94      	ldr	r3, [pc, #592]	@ (8003154 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	f003 0320 	and.w	r3, r3, #32
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d009      	beq.n	8002f20 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002f0c:	4b91      	ldr	r3, [pc, #580]	@ (8003154 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	08db      	lsrs	r3, r3, #3
 8002f12:	f003 0303 	and.w	r3, r3, #3
 8002f16:	4a90      	ldr	r2, [pc, #576]	@ (8003158 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002f18:	fa22 f303 	lsr.w	r3, r2, r3
 8002f1c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8002f1e:	e111      	b.n	8003144 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8002f20:	4b8d      	ldr	r3, [pc, #564]	@ (8003158 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002f22:	61bb      	str	r3, [r7, #24]
      break;
 8002f24:	e10e      	b.n	8003144 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8002f26:	4b8d      	ldr	r3, [pc, #564]	@ (800315c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002f28:	61bb      	str	r3, [r7, #24]
      break;
 8002f2a:	e10b      	b.n	8003144 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8002f2c:	4b8c      	ldr	r3, [pc, #560]	@ (8003160 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8002f2e:	61bb      	str	r3, [r7, #24]
      break;
 8002f30:	e108      	b.n	8003144 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8002f32:	4b88      	ldr	r3, [pc, #544]	@ (8003154 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002f34:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f36:	f003 0303 	and.w	r3, r3, #3
 8002f3a:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8002f3c:	4b85      	ldr	r3, [pc, #532]	@ (8003154 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002f3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f40:	091b      	lsrs	r3, r3, #4
 8002f42:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002f46:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8002f48:	4b82      	ldr	r3, [pc, #520]	@ (8003154 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002f4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f4c:	f003 0301 	and.w	r3, r3, #1
 8002f50:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8002f52:	4b80      	ldr	r3, [pc, #512]	@ (8003154 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002f54:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002f56:	08db      	lsrs	r3, r3, #3
 8002f58:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002f5c:	68fa      	ldr	r2, [r7, #12]
 8002f5e:	fb02 f303 	mul.w	r3, r2, r3
 8002f62:	ee07 3a90 	vmov	s15, r3
 8002f66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002f6a:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8002f6e:	693b      	ldr	r3, [r7, #16]
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	f000 80e1 	beq.w	8003138 <HAL_RCC_GetSysClockFreq+0x2b8>
 8002f76:	697b      	ldr	r3, [r7, #20]
 8002f78:	2b02      	cmp	r3, #2
 8002f7a:	f000 8083 	beq.w	8003084 <HAL_RCC_GetSysClockFreq+0x204>
 8002f7e:	697b      	ldr	r3, [r7, #20]
 8002f80:	2b02      	cmp	r3, #2
 8002f82:	f200 80a1 	bhi.w	80030c8 <HAL_RCC_GetSysClockFreq+0x248>
 8002f86:	697b      	ldr	r3, [r7, #20]
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d003      	beq.n	8002f94 <HAL_RCC_GetSysClockFreq+0x114>
 8002f8c:	697b      	ldr	r3, [r7, #20]
 8002f8e:	2b01      	cmp	r3, #1
 8002f90:	d056      	beq.n	8003040 <HAL_RCC_GetSysClockFreq+0x1c0>
 8002f92:	e099      	b.n	80030c8 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002f94:	4b6f      	ldr	r3, [pc, #444]	@ (8003154 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	f003 0320 	and.w	r3, r3, #32
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d02d      	beq.n	8002ffc <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002fa0:	4b6c      	ldr	r3, [pc, #432]	@ (8003154 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	08db      	lsrs	r3, r3, #3
 8002fa6:	f003 0303 	and.w	r3, r3, #3
 8002faa:	4a6b      	ldr	r2, [pc, #428]	@ (8003158 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002fac:	fa22 f303 	lsr.w	r3, r2, r3
 8002fb0:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	ee07 3a90 	vmov	s15, r3
 8002fb8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002fbc:	693b      	ldr	r3, [r7, #16]
 8002fbe:	ee07 3a90 	vmov	s15, r3
 8002fc2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002fc6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002fca:	4b62      	ldr	r3, [pc, #392]	@ (8003154 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002fcc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002fd2:	ee07 3a90 	vmov	s15, r3
 8002fd6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002fda:	ed97 6a02 	vldr	s12, [r7, #8]
 8002fde:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8003164 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002fe2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002fe6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002fea:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002fee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002ff2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002ff6:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8002ffa:	e087      	b.n	800310c <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002ffc:	693b      	ldr	r3, [r7, #16]
 8002ffe:	ee07 3a90 	vmov	s15, r3
 8003002:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003006:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8003168 <HAL_RCC_GetSysClockFreq+0x2e8>
 800300a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800300e:	4b51      	ldr	r3, [pc, #324]	@ (8003154 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003010:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003012:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003016:	ee07 3a90 	vmov	s15, r3
 800301a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800301e:	ed97 6a02 	vldr	s12, [r7, #8]
 8003022:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8003164 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003026:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800302a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800302e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003032:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003036:	ee67 7a27 	vmul.f32	s15, s14, s15
 800303a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800303e:	e065      	b.n	800310c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003040:	693b      	ldr	r3, [r7, #16]
 8003042:	ee07 3a90 	vmov	s15, r3
 8003046:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800304a:	eddf 6a48 	vldr	s13, [pc, #288]	@ 800316c <HAL_RCC_GetSysClockFreq+0x2ec>
 800304e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003052:	4b40      	ldr	r3, [pc, #256]	@ (8003154 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003054:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003056:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800305a:	ee07 3a90 	vmov	s15, r3
 800305e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003062:	ed97 6a02 	vldr	s12, [r7, #8]
 8003066:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8003164 <HAL_RCC_GetSysClockFreq+0x2e4>
 800306a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800306e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003072:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003076:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800307a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800307e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003082:	e043      	b.n	800310c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003084:	693b      	ldr	r3, [r7, #16]
 8003086:	ee07 3a90 	vmov	s15, r3
 800308a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800308e:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8003170 <HAL_RCC_GetSysClockFreq+0x2f0>
 8003092:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003096:	4b2f      	ldr	r3, [pc, #188]	@ (8003154 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003098:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800309a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800309e:	ee07 3a90 	vmov	s15, r3
 80030a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80030a6:	ed97 6a02 	vldr	s12, [r7, #8]
 80030aa:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8003164 <HAL_RCC_GetSysClockFreq+0x2e4>
 80030ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80030b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80030b6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80030ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80030be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80030c2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80030c6:	e021      	b.n	800310c <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80030c8:	693b      	ldr	r3, [r7, #16]
 80030ca:	ee07 3a90 	vmov	s15, r3
 80030ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80030d2:	eddf 6a26 	vldr	s13, [pc, #152]	@ 800316c <HAL_RCC_GetSysClockFreq+0x2ec>
 80030d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80030da:	4b1e      	ldr	r3, [pc, #120]	@ (8003154 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80030dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80030e2:	ee07 3a90 	vmov	s15, r3
 80030e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80030ea:	ed97 6a02 	vldr	s12, [r7, #8]
 80030ee:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8003164 <HAL_RCC_GetSysClockFreq+0x2e4>
 80030f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80030f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80030fa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80030fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003102:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003106:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800310a:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800310c:	4b11      	ldr	r3, [pc, #68]	@ (8003154 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800310e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003110:	0a5b      	lsrs	r3, r3, #9
 8003112:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003116:	3301      	adds	r3, #1
 8003118:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800311a:	683b      	ldr	r3, [r7, #0]
 800311c:	ee07 3a90 	vmov	s15, r3
 8003120:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003124:	edd7 6a07 	vldr	s13, [r7, #28]
 8003128:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800312c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003130:	ee17 3a90 	vmov	r3, s15
 8003134:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8003136:	e005      	b.n	8003144 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8003138:	2300      	movs	r3, #0
 800313a:	61bb      	str	r3, [r7, #24]
      break;
 800313c:	e002      	b.n	8003144 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800313e:	4b07      	ldr	r3, [pc, #28]	@ (800315c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003140:	61bb      	str	r3, [r7, #24]
      break;
 8003142:	bf00      	nop
  }

  return sysclockfreq;
 8003144:	69bb      	ldr	r3, [r7, #24]
}
 8003146:	4618      	mov	r0, r3
 8003148:	3724      	adds	r7, #36	@ 0x24
 800314a:	46bd      	mov	sp, r7
 800314c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003150:	4770      	bx	lr
 8003152:	bf00      	nop
 8003154:	58024400 	.word	0x58024400
 8003158:	03d09000 	.word	0x03d09000
 800315c:	003d0900 	.word	0x003d0900
 8003160:	017d7840 	.word	0x017d7840
 8003164:	46000000 	.word	0x46000000
 8003168:	4c742400 	.word	0x4c742400
 800316c:	4a742400 	.word	0x4a742400
 8003170:	4bbebc20 	.word	0x4bbebc20

08003174 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003174:	b580      	push	{r7, lr}
 8003176:	b082      	sub	sp, #8
 8003178:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800317a:	f7ff fe81 	bl	8002e80 <HAL_RCC_GetSysClockFreq>
 800317e:	4602      	mov	r2, r0
 8003180:	4b10      	ldr	r3, [pc, #64]	@ (80031c4 <HAL_RCC_GetHCLKFreq+0x50>)
 8003182:	699b      	ldr	r3, [r3, #24]
 8003184:	0a1b      	lsrs	r3, r3, #8
 8003186:	f003 030f 	and.w	r3, r3, #15
 800318a:	490f      	ldr	r1, [pc, #60]	@ (80031c8 <HAL_RCC_GetHCLKFreq+0x54>)
 800318c:	5ccb      	ldrb	r3, [r1, r3]
 800318e:	f003 031f 	and.w	r3, r3, #31
 8003192:	fa22 f303 	lsr.w	r3, r2, r3
 8003196:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003198:	4b0a      	ldr	r3, [pc, #40]	@ (80031c4 <HAL_RCC_GetHCLKFreq+0x50>)
 800319a:	699b      	ldr	r3, [r3, #24]
 800319c:	f003 030f 	and.w	r3, r3, #15
 80031a0:	4a09      	ldr	r2, [pc, #36]	@ (80031c8 <HAL_RCC_GetHCLKFreq+0x54>)
 80031a2:	5cd3      	ldrb	r3, [r2, r3]
 80031a4:	f003 031f 	and.w	r3, r3, #31
 80031a8:	687a      	ldr	r2, [r7, #4]
 80031aa:	fa22 f303 	lsr.w	r3, r2, r3
 80031ae:	4a07      	ldr	r2, [pc, #28]	@ (80031cc <HAL_RCC_GetHCLKFreq+0x58>)
 80031b0:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80031b2:	4a07      	ldr	r2, [pc, #28]	@ (80031d0 <HAL_RCC_GetHCLKFreq+0x5c>)
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80031b8:	4b04      	ldr	r3, [pc, #16]	@ (80031cc <HAL_RCC_GetHCLKFreq+0x58>)
 80031ba:	681b      	ldr	r3, [r3, #0]
}
 80031bc:	4618      	mov	r0, r3
 80031be:	3708      	adds	r7, #8
 80031c0:	46bd      	mov	sp, r7
 80031c2:	bd80      	pop	{r7, pc}
 80031c4:	58024400 	.word	0x58024400
 80031c8:	0801c58c 	.word	0x0801c58c
 80031cc:	24000004 	.word	0x24000004
 80031d0:	24000000 	.word	0x24000000

080031d4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80031d4:	b580      	push	{r7, lr}
 80031d6:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80031d8:	f7ff ffcc 	bl	8003174 <HAL_RCC_GetHCLKFreq>
 80031dc:	4602      	mov	r2, r0
 80031de:	4b06      	ldr	r3, [pc, #24]	@ (80031f8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80031e0:	69db      	ldr	r3, [r3, #28]
 80031e2:	091b      	lsrs	r3, r3, #4
 80031e4:	f003 0307 	and.w	r3, r3, #7
 80031e8:	4904      	ldr	r1, [pc, #16]	@ (80031fc <HAL_RCC_GetPCLK1Freq+0x28>)
 80031ea:	5ccb      	ldrb	r3, [r1, r3]
 80031ec:	f003 031f 	and.w	r3, r3, #31
 80031f0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80031f4:	4618      	mov	r0, r3
 80031f6:	bd80      	pop	{r7, pc}
 80031f8:	58024400 	.word	0x58024400
 80031fc:	0801c58c 	.word	0x0801c58c

08003200 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003200:	b580      	push	{r7, lr}
 8003202:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8003204:	f7ff ffb6 	bl	8003174 <HAL_RCC_GetHCLKFreq>
 8003208:	4602      	mov	r2, r0
 800320a:	4b06      	ldr	r3, [pc, #24]	@ (8003224 <HAL_RCC_GetPCLK2Freq+0x24>)
 800320c:	69db      	ldr	r3, [r3, #28]
 800320e:	0a1b      	lsrs	r3, r3, #8
 8003210:	f003 0307 	and.w	r3, r3, #7
 8003214:	4904      	ldr	r1, [pc, #16]	@ (8003228 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003216:	5ccb      	ldrb	r3, [r1, r3]
 8003218:	f003 031f 	and.w	r3, r3, #31
 800321c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8003220:	4618      	mov	r0, r3
 8003222:	bd80      	pop	{r7, pc}
 8003224:	58024400 	.word	0x58024400
 8003228:	0801c58c 	.word	0x0801c58c

0800322c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800322c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003230:	b0c6      	sub	sp, #280	@ 0x118
 8003232:	af00      	add	r7, sp, #0
 8003234:	f8c7 0104 	str.w	r0, [r7, #260]	@ 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003238:	2300      	movs	r3, #0
 800323a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800323e:	2300      	movs	r3, #0
 8003240:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003244:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003248:	e9d3 2300 	ldrd	r2, r3, [r3]
 800324c:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8003250:	2500      	movs	r5, #0
 8003252:	ea54 0305 	orrs.w	r3, r4, r5
 8003256:	d049      	beq.n	80032ec <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8003258:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800325c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800325e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003262:	d02f      	beq.n	80032c4 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8003264:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003268:	d828      	bhi.n	80032bc <HAL_RCCEx_PeriphCLKConfig+0x90>
 800326a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800326e:	d01a      	beq.n	80032a6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8003270:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003274:	d822      	bhi.n	80032bc <HAL_RCCEx_PeriphCLKConfig+0x90>
 8003276:	2b00      	cmp	r3, #0
 8003278:	d003      	beq.n	8003282 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800327a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800327e:	d007      	beq.n	8003290 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003280:	e01c      	b.n	80032bc <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003282:	4bab      	ldr	r3, [pc, #684]	@ (8003530 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003284:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003286:	4aaa      	ldr	r2, [pc, #680]	@ (8003530 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003288:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800328c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800328e:	e01a      	b.n	80032c6 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003290:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003294:	3308      	adds	r3, #8
 8003296:	2102      	movs	r1, #2
 8003298:	4618      	mov	r0, r3
 800329a:	f001 fc25 	bl	8004ae8 <RCCEx_PLL2_Config>
 800329e:	4603      	mov	r3, r0
 80032a0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80032a4:	e00f      	b.n	80032c6 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80032a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80032aa:	3328      	adds	r3, #40	@ 0x28
 80032ac:	2102      	movs	r1, #2
 80032ae:	4618      	mov	r0, r3
 80032b0:	f001 fccc 	bl	8004c4c <RCCEx_PLL3_Config>
 80032b4:	4603      	mov	r3, r0
 80032b6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80032ba:	e004      	b.n	80032c6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80032bc:	2301      	movs	r3, #1
 80032be:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80032c2:	e000      	b.n	80032c6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 80032c4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80032c6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d10a      	bne.n	80032e4 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80032ce:	4b98      	ldr	r3, [pc, #608]	@ (8003530 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80032d0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80032d2:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80032d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80032da:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80032dc:	4a94      	ldr	r2, [pc, #592]	@ (8003530 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80032de:	430b      	orrs	r3, r1
 80032e0:	6513      	str	r3, [r2, #80]	@ 0x50
 80032e2:	e003      	b.n	80032ec <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80032e4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80032e8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80032ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80032f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032f4:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 80032f8:	f04f 0900 	mov.w	r9, #0
 80032fc:	ea58 0309 	orrs.w	r3, r8, r9
 8003300:	d047      	beq.n	8003392 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8003302:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003306:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003308:	2b04      	cmp	r3, #4
 800330a:	d82a      	bhi.n	8003362 <HAL_RCCEx_PeriphCLKConfig+0x136>
 800330c:	a201      	add	r2, pc, #4	@ (adr r2, 8003314 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800330e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003312:	bf00      	nop
 8003314:	08003329 	.word	0x08003329
 8003318:	08003337 	.word	0x08003337
 800331c:	0800334d 	.word	0x0800334d
 8003320:	0800336b 	.word	0x0800336b
 8003324:	0800336b 	.word	0x0800336b
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003328:	4b81      	ldr	r3, [pc, #516]	@ (8003530 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800332a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800332c:	4a80      	ldr	r2, [pc, #512]	@ (8003530 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800332e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003332:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003334:	e01a      	b.n	800336c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003336:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800333a:	3308      	adds	r3, #8
 800333c:	2100      	movs	r1, #0
 800333e:	4618      	mov	r0, r3
 8003340:	f001 fbd2 	bl	8004ae8 <RCCEx_PLL2_Config>
 8003344:	4603      	mov	r3, r0
 8003346:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800334a:	e00f      	b.n	800336c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800334c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003350:	3328      	adds	r3, #40	@ 0x28
 8003352:	2100      	movs	r1, #0
 8003354:	4618      	mov	r0, r3
 8003356:	f001 fc79 	bl	8004c4c <RCCEx_PLL3_Config>
 800335a:	4603      	mov	r3, r0
 800335c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003360:	e004      	b.n	800336c <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003362:	2301      	movs	r3, #1
 8003364:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003368:	e000      	b.n	800336c <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800336a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800336c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003370:	2b00      	cmp	r3, #0
 8003372:	d10a      	bne.n	800338a <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003374:	4b6e      	ldr	r3, [pc, #440]	@ (8003530 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003376:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003378:	f023 0107 	bic.w	r1, r3, #7
 800337c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003380:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003382:	4a6b      	ldr	r2, [pc, #428]	@ (8003530 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003384:	430b      	orrs	r3, r1
 8003386:	6513      	str	r3, [r2, #80]	@ 0x50
 8003388:	e003      	b.n	8003392 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800338a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800338e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8003392:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003396:	e9d3 2300 	ldrd	r2, r3, [r3]
 800339a:	f402 6a80 	and.w	sl, r2, #1024	@ 0x400
 800339e:	f04f 0b00 	mov.w	fp, #0
 80033a2:	ea5a 030b 	orrs.w	r3, sl, fp
 80033a6:	d05b      	beq.n	8003460 <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 80033a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80033ac:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80033b0:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 80033b4:	d03b      	beq.n	800342e <HAL_RCCEx_PeriphCLKConfig+0x202>
 80033b6:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 80033ba:	d834      	bhi.n	8003426 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 80033bc:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80033c0:	d037      	beq.n	8003432 <HAL_RCCEx_PeriphCLKConfig+0x206>
 80033c2:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80033c6:	d82e      	bhi.n	8003426 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 80033c8:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80033cc:	d033      	beq.n	8003436 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 80033ce:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80033d2:	d828      	bhi.n	8003426 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 80033d4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80033d8:	d01a      	beq.n	8003410 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 80033da:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80033de:	d822      	bhi.n	8003426 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d003      	beq.n	80033ec <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 80033e4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80033e8:	d007      	beq.n	80033fa <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 80033ea:	e01c      	b.n	8003426 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80033ec:	4b50      	ldr	r3, [pc, #320]	@ (8003530 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80033ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033f0:	4a4f      	ldr	r2, [pc, #316]	@ (8003530 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80033f2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80033f6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80033f8:	e01e      	b.n	8003438 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80033fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80033fe:	3308      	adds	r3, #8
 8003400:	2100      	movs	r1, #0
 8003402:	4618      	mov	r0, r3
 8003404:	f001 fb70 	bl	8004ae8 <RCCEx_PLL2_Config>
 8003408:	4603      	mov	r3, r0
 800340a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800340e:	e013      	b.n	8003438 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003410:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003414:	3328      	adds	r3, #40	@ 0x28
 8003416:	2100      	movs	r1, #0
 8003418:	4618      	mov	r0, r3
 800341a:	f001 fc17 	bl	8004c4c <RCCEx_PLL3_Config>
 800341e:	4603      	mov	r3, r0
 8003420:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003424:	e008      	b.n	8003438 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8003426:	2301      	movs	r3, #1
 8003428:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800342c:	e004      	b.n	8003438 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800342e:	bf00      	nop
 8003430:	e002      	b.n	8003438 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8003432:	bf00      	nop
 8003434:	e000      	b.n	8003438 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8003436:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003438:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800343c:	2b00      	cmp	r3, #0
 800343e:	d10b      	bne.n	8003458 <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8003440:	4b3b      	ldr	r3, [pc, #236]	@ (8003530 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003442:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003444:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8003448:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800344c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8003450:	4a37      	ldr	r2, [pc, #220]	@ (8003530 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003452:	430b      	orrs	r3, r1
 8003454:	6593      	str	r3, [r2, #88]	@ 0x58
 8003456:	e003      	b.n	8003460 <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003458:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800345c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8003460:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003464:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003468:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 800346c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8003470:	2300      	movs	r3, #0
 8003472:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8003476:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 800347a:	460b      	mov	r3, r1
 800347c:	4313      	orrs	r3, r2
 800347e:	d05d      	beq.n	800353c <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8003480:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003484:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8003488:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 800348c:	d03b      	beq.n	8003506 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 800348e:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8003492:	d834      	bhi.n	80034fe <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8003494:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003498:	d037      	beq.n	800350a <HAL_RCCEx_PeriphCLKConfig+0x2de>
 800349a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800349e:	d82e      	bhi.n	80034fe <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 80034a0:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80034a4:	d033      	beq.n	800350e <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 80034a6:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80034aa:	d828      	bhi.n	80034fe <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 80034ac:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80034b0:	d01a      	beq.n	80034e8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 80034b2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80034b6:	d822      	bhi.n	80034fe <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d003      	beq.n	80034c4 <HAL_RCCEx_PeriphCLKConfig+0x298>
 80034bc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80034c0:	d007      	beq.n	80034d2 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 80034c2:	e01c      	b.n	80034fe <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80034c4:	4b1a      	ldr	r3, [pc, #104]	@ (8003530 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80034c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034c8:	4a19      	ldr	r2, [pc, #100]	@ (8003530 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80034ca:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80034ce:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80034d0:	e01e      	b.n	8003510 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80034d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80034d6:	3308      	adds	r3, #8
 80034d8:	2100      	movs	r1, #0
 80034da:	4618      	mov	r0, r3
 80034dc:	f001 fb04 	bl	8004ae8 <RCCEx_PLL2_Config>
 80034e0:	4603      	mov	r3, r0
 80034e2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80034e6:	e013      	b.n	8003510 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80034e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80034ec:	3328      	adds	r3, #40	@ 0x28
 80034ee:	2100      	movs	r1, #0
 80034f0:	4618      	mov	r0, r3
 80034f2:	f001 fbab 	bl	8004c4c <RCCEx_PLL3_Config>
 80034f6:	4603      	mov	r3, r0
 80034f8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80034fc:	e008      	b.n	8003510 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80034fe:	2301      	movs	r3, #1
 8003500:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003504:	e004      	b.n	8003510 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8003506:	bf00      	nop
 8003508:	e002      	b.n	8003510 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800350a:	bf00      	nop
 800350c:	e000      	b.n	8003510 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800350e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003510:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003514:	2b00      	cmp	r3, #0
 8003516:	d10d      	bne.n	8003534 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8003518:	4b05      	ldr	r3, [pc, #20]	@ (8003530 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800351a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800351c:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8003520:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003524:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8003528:	4a01      	ldr	r2, [pc, #4]	@ (8003530 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800352a:	430b      	orrs	r3, r1
 800352c:	6593      	str	r3, [r2, #88]	@ 0x58
 800352e:	e005      	b.n	800353c <HAL_RCCEx_PeriphCLKConfig+0x310>
 8003530:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003534:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003538:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800353c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003540:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003544:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8003548:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800354c:	2300      	movs	r3, #0
 800354e:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8003552:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8003556:	460b      	mov	r3, r1
 8003558:	4313      	orrs	r3, r2
 800355a:	d03a      	beq.n	80035d2 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 800355c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003560:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003562:	2b30      	cmp	r3, #48	@ 0x30
 8003564:	d01f      	beq.n	80035a6 <HAL_RCCEx_PeriphCLKConfig+0x37a>
 8003566:	2b30      	cmp	r3, #48	@ 0x30
 8003568:	d819      	bhi.n	800359e <HAL_RCCEx_PeriphCLKConfig+0x372>
 800356a:	2b20      	cmp	r3, #32
 800356c:	d00c      	beq.n	8003588 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 800356e:	2b20      	cmp	r3, #32
 8003570:	d815      	bhi.n	800359e <HAL_RCCEx_PeriphCLKConfig+0x372>
 8003572:	2b00      	cmp	r3, #0
 8003574:	d019      	beq.n	80035aa <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8003576:	2b10      	cmp	r3, #16
 8003578:	d111      	bne.n	800359e <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800357a:	4baa      	ldr	r3, [pc, #680]	@ (8003824 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800357c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800357e:	4aa9      	ldr	r2, [pc, #676]	@ (8003824 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003580:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003584:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8003586:	e011      	b.n	80035ac <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003588:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800358c:	3308      	adds	r3, #8
 800358e:	2102      	movs	r1, #2
 8003590:	4618      	mov	r0, r3
 8003592:	f001 faa9 	bl	8004ae8 <RCCEx_PLL2_Config>
 8003596:	4603      	mov	r3, r0
 8003598:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800359c:	e006      	b.n	80035ac <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800359e:	2301      	movs	r3, #1
 80035a0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80035a4:	e002      	b.n	80035ac <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 80035a6:	bf00      	nop
 80035a8:	e000      	b.n	80035ac <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 80035aa:	bf00      	nop
    }

    if (ret == HAL_OK)
 80035ac:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d10a      	bne.n	80035ca <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 80035b4:	4b9b      	ldr	r3, [pc, #620]	@ (8003824 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80035b6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80035b8:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 80035bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80035c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80035c2:	4a98      	ldr	r2, [pc, #608]	@ (8003824 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80035c4:	430b      	orrs	r3, r1
 80035c6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80035c8:	e003      	b.n	80035d2 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80035ca:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80035ce:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80035d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80035d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035da:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 80035de:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80035e2:	2300      	movs	r3, #0
 80035e4:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80035e8:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 80035ec:	460b      	mov	r3, r1
 80035ee:	4313      	orrs	r3, r2
 80035f0:	d051      	beq.n	8003696 <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 80035f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80035f6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80035f8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80035fc:	d035      	beq.n	800366a <HAL_RCCEx_PeriphCLKConfig+0x43e>
 80035fe:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003602:	d82e      	bhi.n	8003662 <HAL_RCCEx_PeriphCLKConfig+0x436>
 8003604:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003608:	d031      	beq.n	800366e <HAL_RCCEx_PeriphCLKConfig+0x442>
 800360a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800360e:	d828      	bhi.n	8003662 <HAL_RCCEx_PeriphCLKConfig+0x436>
 8003610:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003614:	d01a      	beq.n	800364c <HAL_RCCEx_PeriphCLKConfig+0x420>
 8003616:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800361a:	d822      	bhi.n	8003662 <HAL_RCCEx_PeriphCLKConfig+0x436>
 800361c:	2b00      	cmp	r3, #0
 800361e:	d003      	beq.n	8003628 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 8003620:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003624:	d007      	beq.n	8003636 <HAL_RCCEx_PeriphCLKConfig+0x40a>
 8003626:	e01c      	b.n	8003662 <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003628:	4b7e      	ldr	r3, [pc, #504]	@ (8003824 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800362a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800362c:	4a7d      	ldr	r2, [pc, #500]	@ (8003824 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800362e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003632:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003634:	e01c      	b.n	8003670 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003636:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800363a:	3308      	adds	r3, #8
 800363c:	2100      	movs	r1, #0
 800363e:	4618      	mov	r0, r3
 8003640:	f001 fa52 	bl	8004ae8 <RCCEx_PLL2_Config>
 8003644:	4603      	mov	r3, r0
 8003646:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800364a:	e011      	b.n	8003670 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800364c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003650:	3328      	adds	r3, #40	@ 0x28
 8003652:	2100      	movs	r1, #0
 8003654:	4618      	mov	r0, r3
 8003656:	f001 faf9 	bl	8004c4c <RCCEx_PLL3_Config>
 800365a:	4603      	mov	r3, r0
 800365c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003660:	e006      	b.n	8003670 <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003662:	2301      	movs	r3, #1
 8003664:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003668:	e002      	b.n	8003670 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 800366a:	bf00      	nop
 800366c:	e000      	b.n	8003670 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 800366e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003670:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003674:	2b00      	cmp	r3, #0
 8003676:	d10a      	bne.n	800368e <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8003678:	4b6a      	ldr	r3, [pc, #424]	@ (8003824 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800367a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800367c:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8003680:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003684:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003686:	4a67      	ldr	r2, [pc, #412]	@ (8003824 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003688:	430b      	orrs	r3, r1
 800368a:	6513      	str	r3, [r2, #80]	@ 0x50
 800368c:	e003      	b.n	8003696 <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800368e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003692:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8003696:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800369a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800369e:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 80036a2:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80036a6:	2300      	movs	r3, #0
 80036a8:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80036ac:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 80036b0:	460b      	mov	r3, r1
 80036b2:	4313      	orrs	r3, r2
 80036b4:	d053      	beq.n	800375e <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 80036b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80036ba:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80036bc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80036c0:	d033      	beq.n	800372a <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 80036c2:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80036c6:	d82c      	bhi.n	8003722 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 80036c8:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80036cc:	d02f      	beq.n	800372e <HAL_RCCEx_PeriphCLKConfig+0x502>
 80036ce:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80036d2:	d826      	bhi.n	8003722 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 80036d4:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80036d8:	d02b      	beq.n	8003732 <HAL_RCCEx_PeriphCLKConfig+0x506>
 80036da:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80036de:	d820      	bhi.n	8003722 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 80036e0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80036e4:	d012      	beq.n	800370c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 80036e6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80036ea:	d81a      	bhi.n	8003722 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d022      	beq.n	8003736 <HAL_RCCEx_PeriphCLKConfig+0x50a>
 80036f0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80036f4:	d115      	bne.n	8003722 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80036f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80036fa:	3308      	adds	r3, #8
 80036fc:	2101      	movs	r1, #1
 80036fe:	4618      	mov	r0, r3
 8003700:	f001 f9f2 	bl	8004ae8 <RCCEx_PLL2_Config>
 8003704:	4603      	mov	r3, r0
 8003706:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800370a:	e015      	b.n	8003738 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800370c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003710:	3328      	adds	r3, #40	@ 0x28
 8003712:	2101      	movs	r1, #1
 8003714:	4618      	mov	r0, r3
 8003716:	f001 fa99 	bl	8004c4c <RCCEx_PLL3_Config>
 800371a:	4603      	mov	r3, r0
 800371c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8003720:	e00a      	b.n	8003738 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003722:	2301      	movs	r3, #1
 8003724:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003728:	e006      	b.n	8003738 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800372a:	bf00      	nop
 800372c:	e004      	b.n	8003738 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800372e:	bf00      	nop
 8003730:	e002      	b.n	8003738 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8003732:	bf00      	nop
 8003734:	e000      	b.n	8003738 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8003736:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003738:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800373c:	2b00      	cmp	r3, #0
 800373e:	d10a      	bne.n	8003756 <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8003740:	4b38      	ldr	r3, [pc, #224]	@ (8003824 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003742:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003744:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8003748:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800374c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800374e:	4a35      	ldr	r2, [pc, #212]	@ (8003824 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003750:	430b      	orrs	r3, r1
 8003752:	6513      	str	r3, [r2, #80]	@ 0x50
 8003754:	e003      	b.n	800375e <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003756:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800375a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800375e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003762:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003766:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 800376a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800376e:	2300      	movs	r3, #0
 8003770:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8003774:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003778:	460b      	mov	r3, r1
 800377a:	4313      	orrs	r3, r2
 800377c:	d058      	beq.n	8003830 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800377e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003782:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8003786:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800378a:	d033      	beq.n	80037f4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 800378c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003790:	d82c      	bhi.n	80037ec <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8003792:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003796:	d02f      	beq.n	80037f8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 8003798:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800379c:	d826      	bhi.n	80037ec <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800379e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80037a2:	d02b      	beq.n	80037fc <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 80037a4:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80037a8:	d820      	bhi.n	80037ec <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 80037aa:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80037ae:	d012      	beq.n	80037d6 <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 80037b0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80037b4:	d81a      	bhi.n	80037ec <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d022      	beq.n	8003800 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 80037ba:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80037be:	d115      	bne.n	80037ec <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80037c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80037c4:	3308      	adds	r3, #8
 80037c6:	2101      	movs	r1, #1
 80037c8:	4618      	mov	r0, r3
 80037ca:	f001 f98d 	bl	8004ae8 <RCCEx_PLL2_Config>
 80037ce:	4603      	mov	r3, r0
 80037d0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80037d4:	e015      	b.n	8003802 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80037d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80037da:	3328      	adds	r3, #40	@ 0x28
 80037dc:	2101      	movs	r1, #1
 80037de:	4618      	mov	r0, r3
 80037e0:	f001 fa34 	bl	8004c4c <RCCEx_PLL3_Config>
 80037e4:	4603      	mov	r3, r0
 80037e6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80037ea:	e00a      	b.n	8003802 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 80037ec:	2301      	movs	r3, #1
 80037ee:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80037f2:	e006      	b.n	8003802 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80037f4:	bf00      	nop
 80037f6:	e004      	b.n	8003802 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80037f8:	bf00      	nop
 80037fa:	e002      	b.n	8003802 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80037fc:	bf00      	nop
 80037fe:	e000      	b.n	8003802 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8003800:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003802:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003806:	2b00      	cmp	r3, #0
 8003808:	d10e      	bne.n	8003828 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800380a:	4b06      	ldr	r3, [pc, #24]	@ (8003824 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800380c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800380e:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8003812:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003816:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800381a:	4a02      	ldr	r2, [pc, #8]	@ (8003824 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800381c:	430b      	orrs	r3, r1
 800381e:	6593      	str	r3, [r2, #88]	@ 0x58
 8003820:	e006      	b.n	8003830 <HAL_RCCEx_PeriphCLKConfig+0x604>
 8003822:	bf00      	nop
 8003824:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003828:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800382c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003830:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003834:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003838:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 800383c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003840:	2300      	movs	r3, #0
 8003842:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8003846:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 800384a:	460b      	mov	r3, r1
 800384c:	4313      	orrs	r3, r2
 800384e:	d037      	beq.n	80038c0 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8003850:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003854:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003856:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800385a:	d00e      	beq.n	800387a <HAL_RCCEx_PeriphCLKConfig+0x64e>
 800385c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003860:	d816      	bhi.n	8003890 <HAL_RCCEx_PeriphCLKConfig+0x664>
 8003862:	2b00      	cmp	r3, #0
 8003864:	d018      	beq.n	8003898 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 8003866:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800386a:	d111      	bne.n	8003890 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800386c:	4bc4      	ldr	r3, [pc, #784]	@ (8003b80 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800386e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003870:	4ac3      	ldr	r2, [pc, #780]	@ (8003b80 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003872:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003876:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8003878:	e00f      	b.n	800389a <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800387a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800387e:	3308      	adds	r3, #8
 8003880:	2101      	movs	r1, #1
 8003882:	4618      	mov	r0, r3
 8003884:	f001 f930 	bl	8004ae8 <RCCEx_PLL2_Config>
 8003888:	4603      	mov	r3, r0
 800388a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800388e:	e004      	b.n	800389a <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003890:	2301      	movs	r3, #1
 8003892:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003896:	e000      	b.n	800389a <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 8003898:	bf00      	nop
    }

    if (ret == HAL_OK)
 800389a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d10a      	bne.n	80038b8 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80038a2:	4bb7      	ldr	r3, [pc, #732]	@ (8003b80 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80038a4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80038a6:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 80038aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80038ae:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80038b0:	4ab3      	ldr	r2, [pc, #716]	@ (8003b80 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80038b2:	430b      	orrs	r3, r1
 80038b4:	6513      	str	r3, [r2, #80]	@ 0x50
 80038b6:	e003      	b.n	80038c0 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80038b8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80038bc:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80038c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80038c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038c8:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 80038cc:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80038d0:	2300      	movs	r3, #0
 80038d2:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80038d6:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 80038da:	460b      	mov	r3, r1
 80038dc:	4313      	orrs	r3, r2
 80038de:	d039      	beq.n	8003954 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 80038e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80038e4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80038e6:	2b03      	cmp	r3, #3
 80038e8:	d81c      	bhi.n	8003924 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 80038ea:	a201      	add	r2, pc, #4	@ (adr r2, 80038f0 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 80038ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038f0:	0800392d 	.word	0x0800392d
 80038f4:	08003901 	.word	0x08003901
 80038f8:	0800390f 	.word	0x0800390f
 80038fc:	0800392d 	.word	0x0800392d
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003900:	4b9f      	ldr	r3, [pc, #636]	@ (8003b80 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003902:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003904:	4a9e      	ldr	r2, [pc, #632]	@ (8003b80 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003906:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800390a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 800390c:	e00f      	b.n	800392e <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800390e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003912:	3308      	adds	r3, #8
 8003914:	2102      	movs	r1, #2
 8003916:	4618      	mov	r0, r3
 8003918:	f001 f8e6 	bl	8004ae8 <RCCEx_PLL2_Config>
 800391c:	4603      	mov	r3, r0
 800391e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 8003922:	e004      	b.n	800392e <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8003924:	2301      	movs	r3, #1
 8003926:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800392a:	e000      	b.n	800392e <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 800392c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800392e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003932:	2b00      	cmp	r3, #0
 8003934:	d10a      	bne.n	800394c <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8003936:	4b92      	ldr	r3, [pc, #584]	@ (8003b80 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003938:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800393a:	f023 0103 	bic.w	r1, r3, #3
 800393e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003942:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003944:	4a8e      	ldr	r2, [pc, #568]	@ (8003b80 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003946:	430b      	orrs	r3, r1
 8003948:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800394a:	e003      	b.n	8003954 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800394c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003950:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003954:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003958:	e9d3 2300 	ldrd	r2, r3, [r3]
 800395c:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8003960:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003964:	2300      	movs	r3, #0
 8003966:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800396a:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800396e:	460b      	mov	r3, r1
 8003970:	4313      	orrs	r3, r2
 8003972:	f000 8099 	beq.w	8003aa8 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003976:	4b83      	ldr	r3, [pc, #524]	@ (8003b84 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	4a82      	ldr	r2, [pc, #520]	@ (8003b84 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800397c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003980:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003982:	f7fe f9bd 	bl	8001d00 <HAL_GetTick>
 8003986:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800398a:	e00b      	b.n	80039a4 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800398c:	f7fe f9b8 	bl	8001d00 <HAL_GetTick>
 8003990:	4602      	mov	r2, r0
 8003992:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8003996:	1ad3      	subs	r3, r2, r3
 8003998:	2b64      	cmp	r3, #100	@ 0x64
 800399a:	d903      	bls.n	80039a4 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 800399c:	2303      	movs	r3, #3
 800399e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80039a2:	e005      	b.n	80039b0 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80039a4:	4b77      	ldr	r3, [pc, #476]	@ (8003b84 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d0ed      	beq.n	800398c <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 80039b0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d173      	bne.n	8003aa0 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80039b8:	4b71      	ldr	r3, [pc, #452]	@ (8003b80 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80039ba:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80039bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80039c0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80039c4:	4053      	eors	r3, r2
 80039c6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d015      	beq.n	80039fa <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80039ce:	4b6c      	ldr	r3, [pc, #432]	@ (8003b80 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80039d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80039d2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80039d6:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80039da:	4b69      	ldr	r3, [pc, #420]	@ (8003b80 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80039dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80039de:	4a68      	ldr	r2, [pc, #416]	@ (8003b80 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80039e0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80039e4:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80039e6:	4b66      	ldr	r3, [pc, #408]	@ (8003b80 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80039e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80039ea:	4a65      	ldr	r2, [pc, #404]	@ (8003b80 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80039ec:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80039f0:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80039f2:	4a63      	ldr	r2, [pc, #396]	@ (8003b80 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80039f4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80039f8:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80039fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80039fe:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8003a02:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003a06:	d118      	bne.n	8003a3a <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a08:	f7fe f97a 	bl	8001d00 <HAL_GetTick>
 8003a0c:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003a10:	e00d      	b.n	8003a2e <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a12:	f7fe f975 	bl	8001d00 <HAL_GetTick>
 8003a16:	4602      	mov	r2, r0
 8003a18:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8003a1c:	1ad2      	subs	r2, r2, r3
 8003a1e:	f241 3388 	movw	r3, #5000	@ 0x1388
 8003a22:	429a      	cmp	r2, r3
 8003a24:	d903      	bls.n	8003a2e <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 8003a26:	2303      	movs	r3, #3
 8003a28:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
            break;
 8003a2c:	e005      	b.n	8003a3a <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003a2e:	4b54      	ldr	r3, [pc, #336]	@ (8003b80 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003a30:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a32:	f003 0302 	and.w	r3, r3, #2
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d0eb      	beq.n	8003a12 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 8003a3a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d129      	bne.n	8003a96 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003a42:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003a46:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8003a4a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003a4e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003a52:	d10e      	bne.n	8003a72 <HAL_RCCEx_PeriphCLKConfig+0x846>
 8003a54:	4b4a      	ldr	r3, [pc, #296]	@ (8003b80 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003a56:	691b      	ldr	r3, [r3, #16]
 8003a58:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8003a5c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003a60:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8003a64:	091a      	lsrs	r2, r3, #4
 8003a66:	4b48      	ldr	r3, [pc, #288]	@ (8003b88 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8003a68:	4013      	ands	r3, r2
 8003a6a:	4a45      	ldr	r2, [pc, #276]	@ (8003b80 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003a6c:	430b      	orrs	r3, r1
 8003a6e:	6113      	str	r3, [r2, #16]
 8003a70:	e005      	b.n	8003a7e <HAL_RCCEx_PeriphCLKConfig+0x852>
 8003a72:	4b43      	ldr	r3, [pc, #268]	@ (8003b80 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003a74:	691b      	ldr	r3, [r3, #16]
 8003a76:	4a42      	ldr	r2, [pc, #264]	@ (8003b80 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003a78:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8003a7c:	6113      	str	r3, [r2, #16]
 8003a7e:	4b40      	ldr	r3, [pc, #256]	@ (8003b80 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003a80:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8003a82:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003a86:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8003a8a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a8e:	4a3c      	ldr	r2, [pc, #240]	@ (8003b80 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003a90:	430b      	orrs	r3, r1
 8003a92:	6713      	str	r3, [r2, #112]	@ 0x70
 8003a94:	e008      	b.n	8003aa8 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003a96:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003a9a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 8003a9e:	e003      	b.n	8003aa8 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003aa0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003aa4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8003aa8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003aac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ab0:	f002 0301 	and.w	r3, r2, #1
 8003ab4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003ab8:	2300      	movs	r3, #0
 8003aba:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8003abe:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8003ac2:	460b      	mov	r3, r1
 8003ac4:	4313      	orrs	r3, r2
 8003ac6:	f000 808f 	beq.w	8003be8 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8003aca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003ace:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003ad0:	2b28      	cmp	r3, #40	@ 0x28
 8003ad2:	d871      	bhi.n	8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 8003ad4:	a201      	add	r2, pc, #4	@ (adr r2, 8003adc <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 8003ad6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ada:	bf00      	nop
 8003adc:	08003bc1 	.word	0x08003bc1
 8003ae0:	08003bb9 	.word	0x08003bb9
 8003ae4:	08003bb9 	.word	0x08003bb9
 8003ae8:	08003bb9 	.word	0x08003bb9
 8003aec:	08003bb9 	.word	0x08003bb9
 8003af0:	08003bb9 	.word	0x08003bb9
 8003af4:	08003bb9 	.word	0x08003bb9
 8003af8:	08003bb9 	.word	0x08003bb9
 8003afc:	08003b8d 	.word	0x08003b8d
 8003b00:	08003bb9 	.word	0x08003bb9
 8003b04:	08003bb9 	.word	0x08003bb9
 8003b08:	08003bb9 	.word	0x08003bb9
 8003b0c:	08003bb9 	.word	0x08003bb9
 8003b10:	08003bb9 	.word	0x08003bb9
 8003b14:	08003bb9 	.word	0x08003bb9
 8003b18:	08003bb9 	.word	0x08003bb9
 8003b1c:	08003ba3 	.word	0x08003ba3
 8003b20:	08003bb9 	.word	0x08003bb9
 8003b24:	08003bb9 	.word	0x08003bb9
 8003b28:	08003bb9 	.word	0x08003bb9
 8003b2c:	08003bb9 	.word	0x08003bb9
 8003b30:	08003bb9 	.word	0x08003bb9
 8003b34:	08003bb9 	.word	0x08003bb9
 8003b38:	08003bb9 	.word	0x08003bb9
 8003b3c:	08003bc1 	.word	0x08003bc1
 8003b40:	08003bb9 	.word	0x08003bb9
 8003b44:	08003bb9 	.word	0x08003bb9
 8003b48:	08003bb9 	.word	0x08003bb9
 8003b4c:	08003bb9 	.word	0x08003bb9
 8003b50:	08003bb9 	.word	0x08003bb9
 8003b54:	08003bb9 	.word	0x08003bb9
 8003b58:	08003bb9 	.word	0x08003bb9
 8003b5c:	08003bc1 	.word	0x08003bc1
 8003b60:	08003bb9 	.word	0x08003bb9
 8003b64:	08003bb9 	.word	0x08003bb9
 8003b68:	08003bb9 	.word	0x08003bb9
 8003b6c:	08003bb9 	.word	0x08003bb9
 8003b70:	08003bb9 	.word	0x08003bb9
 8003b74:	08003bb9 	.word	0x08003bb9
 8003b78:	08003bb9 	.word	0x08003bb9
 8003b7c:	08003bc1 	.word	0x08003bc1
 8003b80:	58024400 	.word	0x58024400
 8003b84:	58024800 	.word	0x58024800
 8003b88:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003b8c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003b90:	3308      	adds	r3, #8
 8003b92:	2101      	movs	r1, #1
 8003b94:	4618      	mov	r0, r3
 8003b96:	f000 ffa7 	bl	8004ae8 <RCCEx_PLL2_Config>
 8003b9a:	4603      	mov	r3, r0
 8003b9c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8003ba0:	e00f      	b.n	8003bc2 <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003ba2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003ba6:	3328      	adds	r3, #40	@ 0x28
 8003ba8:	2101      	movs	r1, #1
 8003baa:	4618      	mov	r0, r3
 8003bac:	f001 f84e 	bl	8004c4c <RCCEx_PLL3_Config>
 8003bb0:	4603      	mov	r3, r0
 8003bb2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8003bb6:	e004      	b.n	8003bc2 <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003bb8:	2301      	movs	r3, #1
 8003bba:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003bbe:	e000      	b.n	8003bc2 <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 8003bc0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003bc2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d10a      	bne.n	8003be0 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8003bca:	4bbf      	ldr	r3, [pc, #764]	@ (8003ec8 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8003bcc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003bce:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8003bd2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003bd6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003bd8:	4abb      	ldr	r2, [pc, #748]	@ (8003ec8 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8003bda:	430b      	orrs	r3, r1
 8003bdc:	6553      	str	r3, [r2, #84]	@ 0x54
 8003bde:	e003      	b.n	8003be8 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003be0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003be4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8003be8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003bec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bf0:	f002 0302 	and.w	r3, r2, #2
 8003bf4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003bf8:	2300      	movs	r3, #0
 8003bfa:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003bfe:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8003c02:	460b      	mov	r3, r1
 8003c04:	4313      	orrs	r3, r2
 8003c06:	d041      	beq.n	8003c8c <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8003c08:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003c0c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003c0e:	2b05      	cmp	r3, #5
 8003c10:	d824      	bhi.n	8003c5c <HAL_RCCEx_PeriphCLKConfig+0xa30>
 8003c12:	a201      	add	r2, pc, #4	@ (adr r2, 8003c18 <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 8003c14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c18:	08003c65 	.word	0x08003c65
 8003c1c:	08003c31 	.word	0x08003c31
 8003c20:	08003c47 	.word	0x08003c47
 8003c24:	08003c65 	.word	0x08003c65
 8003c28:	08003c65 	.word	0x08003c65
 8003c2c:	08003c65 	.word	0x08003c65
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003c30:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003c34:	3308      	adds	r3, #8
 8003c36:	2101      	movs	r1, #1
 8003c38:	4618      	mov	r0, r3
 8003c3a:	f000 ff55 	bl	8004ae8 <RCCEx_PLL2_Config>
 8003c3e:	4603      	mov	r3, r0
 8003c40:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8003c44:	e00f      	b.n	8003c66 <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003c46:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003c4a:	3328      	adds	r3, #40	@ 0x28
 8003c4c:	2101      	movs	r1, #1
 8003c4e:	4618      	mov	r0, r3
 8003c50:	f000 fffc 	bl	8004c4c <RCCEx_PLL3_Config>
 8003c54:	4603      	mov	r3, r0
 8003c56:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8003c5a:	e004      	b.n	8003c66 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003c5c:	2301      	movs	r3, #1
 8003c5e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003c62:	e000      	b.n	8003c66 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 8003c64:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003c66:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d10a      	bne.n	8003c84 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8003c6e:	4b96      	ldr	r3, [pc, #600]	@ (8003ec8 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8003c70:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003c72:	f023 0107 	bic.w	r1, r3, #7
 8003c76:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003c7a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003c7c:	4a92      	ldr	r2, [pc, #584]	@ (8003ec8 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8003c7e:	430b      	orrs	r3, r1
 8003c80:	6553      	str	r3, [r2, #84]	@ 0x54
 8003c82:	e003      	b.n	8003c8c <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c84:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003c88:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003c8c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003c90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c94:	f002 0304 	and.w	r3, r2, #4
 8003c98:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003c9c:	2300      	movs	r3, #0
 8003c9e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003ca2:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003ca6:	460b      	mov	r3, r1
 8003ca8:	4313      	orrs	r3, r2
 8003caa:	d044      	beq.n	8003d36 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8003cac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003cb0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003cb4:	2b05      	cmp	r3, #5
 8003cb6:	d825      	bhi.n	8003d04 <HAL_RCCEx_PeriphCLKConfig+0xad8>
 8003cb8:	a201      	add	r2, pc, #4	@ (adr r2, 8003cc0 <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 8003cba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cbe:	bf00      	nop
 8003cc0:	08003d0d 	.word	0x08003d0d
 8003cc4:	08003cd9 	.word	0x08003cd9
 8003cc8:	08003cef 	.word	0x08003cef
 8003ccc:	08003d0d 	.word	0x08003d0d
 8003cd0:	08003d0d 	.word	0x08003d0d
 8003cd4:	08003d0d 	.word	0x08003d0d
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003cd8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003cdc:	3308      	adds	r3, #8
 8003cde:	2101      	movs	r1, #1
 8003ce0:	4618      	mov	r0, r3
 8003ce2:	f000 ff01 	bl	8004ae8 <RCCEx_PLL2_Config>
 8003ce6:	4603      	mov	r3, r0
 8003ce8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8003cec:	e00f      	b.n	8003d0e <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003cee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003cf2:	3328      	adds	r3, #40	@ 0x28
 8003cf4:	2101      	movs	r1, #1
 8003cf6:	4618      	mov	r0, r3
 8003cf8:	f000 ffa8 	bl	8004c4c <RCCEx_PLL3_Config>
 8003cfc:	4603      	mov	r3, r0
 8003cfe:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8003d02:	e004      	b.n	8003d0e <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003d04:	2301      	movs	r3, #1
 8003d06:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003d0a:	e000      	b.n	8003d0e <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 8003d0c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003d0e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d10b      	bne.n	8003d2e <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003d16:	4b6c      	ldr	r3, [pc, #432]	@ (8003ec8 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8003d18:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d1a:	f023 0107 	bic.w	r1, r3, #7
 8003d1e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003d22:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d26:	4a68      	ldr	r2, [pc, #416]	@ (8003ec8 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8003d28:	430b      	orrs	r3, r1
 8003d2a:	6593      	str	r3, [r2, #88]	@ 0x58
 8003d2c:	e003      	b.n	8003d36 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d2e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003d32:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003d36:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003d3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d3e:	f002 0320 	and.w	r3, r2, #32
 8003d42:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003d46:	2300      	movs	r3, #0
 8003d48:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8003d4c:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8003d50:	460b      	mov	r3, r1
 8003d52:	4313      	orrs	r3, r2
 8003d54:	d055      	beq.n	8003e02 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8003d56:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003d5a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003d5e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003d62:	d033      	beq.n	8003dcc <HAL_RCCEx_PeriphCLKConfig+0xba0>
 8003d64:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003d68:	d82c      	bhi.n	8003dc4 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8003d6a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003d6e:	d02f      	beq.n	8003dd0 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 8003d70:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003d74:	d826      	bhi.n	8003dc4 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8003d76:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003d7a:	d02b      	beq.n	8003dd4 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 8003d7c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003d80:	d820      	bhi.n	8003dc4 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8003d82:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003d86:	d012      	beq.n	8003dae <HAL_RCCEx_PeriphCLKConfig+0xb82>
 8003d88:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003d8c:	d81a      	bhi.n	8003dc4 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d022      	beq.n	8003dd8 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 8003d92:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003d96:	d115      	bne.n	8003dc4 <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003d98:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003d9c:	3308      	adds	r3, #8
 8003d9e:	2100      	movs	r1, #0
 8003da0:	4618      	mov	r0, r3
 8003da2:	f000 fea1 	bl	8004ae8 <RCCEx_PLL2_Config>
 8003da6:	4603      	mov	r3, r0
 8003da8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8003dac:	e015      	b.n	8003dda <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003dae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003db2:	3328      	adds	r3, #40	@ 0x28
 8003db4:	2102      	movs	r1, #2
 8003db6:	4618      	mov	r0, r3
 8003db8:	f000 ff48 	bl	8004c4c <RCCEx_PLL3_Config>
 8003dbc:	4603      	mov	r3, r0
 8003dbe:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8003dc2:	e00a      	b.n	8003dda <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003dc4:	2301      	movs	r3, #1
 8003dc6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003dca:	e006      	b.n	8003dda <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8003dcc:	bf00      	nop
 8003dce:	e004      	b.n	8003dda <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8003dd0:	bf00      	nop
 8003dd2:	e002      	b.n	8003dda <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8003dd4:	bf00      	nop
 8003dd6:	e000      	b.n	8003dda <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8003dd8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003dda:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d10b      	bne.n	8003dfa <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003de2:	4b39      	ldr	r3, [pc, #228]	@ (8003ec8 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8003de4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003de6:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8003dea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003dee:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003df2:	4a35      	ldr	r2, [pc, #212]	@ (8003ec8 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8003df4:	430b      	orrs	r3, r1
 8003df6:	6553      	str	r3, [r2, #84]	@ 0x54
 8003df8:	e003      	b.n	8003e02 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003dfa:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003dfe:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8003e02:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003e06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e0a:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8003e0e:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003e12:	2300      	movs	r3, #0
 8003e14:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003e18:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8003e1c:	460b      	mov	r3, r1
 8003e1e:	4313      	orrs	r3, r2
 8003e20:	d058      	beq.n	8003ed4 <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8003e22:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003e26:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003e2a:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8003e2e:	d033      	beq.n	8003e98 <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 8003e30:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8003e34:	d82c      	bhi.n	8003e90 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8003e36:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003e3a:	d02f      	beq.n	8003e9c <HAL_RCCEx_PeriphCLKConfig+0xc70>
 8003e3c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003e40:	d826      	bhi.n	8003e90 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8003e42:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003e46:	d02b      	beq.n	8003ea0 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 8003e48:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003e4c:	d820      	bhi.n	8003e90 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8003e4e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003e52:	d012      	beq.n	8003e7a <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 8003e54:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003e58:	d81a      	bhi.n	8003e90 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d022      	beq.n	8003ea4 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 8003e5e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003e62:	d115      	bne.n	8003e90 <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003e64:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003e68:	3308      	adds	r3, #8
 8003e6a:	2100      	movs	r1, #0
 8003e6c:	4618      	mov	r0, r3
 8003e6e:	f000 fe3b 	bl	8004ae8 <RCCEx_PLL2_Config>
 8003e72:	4603      	mov	r3, r0
 8003e74:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8003e78:	e015      	b.n	8003ea6 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003e7a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003e7e:	3328      	adds	r3, #40	@ 0x28
 8003e80:	2102      	movs	r1, #2
 8003e82:	4618      	mov	r0, r3
 8003e84:	f000 fee2 	bl	8004c4c <RCCEx_PLL3_Config>
 8003e88:	4603      	mov	r3, r0
 8003e8a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8003e8e:	e00a      	b.n	8003ea6 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003e90:	2301      	movs	r3, #1
 8003e92:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003e96:	e006      	b.n	8003ea6 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8003e98:	bf00      	nop
 8003e9a:	e004      	b.n	8003ea6 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8003e9c:	bf00      	nop
 8003e9e:	e002      	b.n	8003ea6 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8003ea0:	bf00      	nop
 8003ea2:	e000      	b.n	8003ea6 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8003ea4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003ea6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d10e      	bne.n	8003ecc <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003eae:	4b06      	ldr	r3, [pc, #24]	@ (8003ec8 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8003eb0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003eb2:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8003eb6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003eba:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003ebe:	4a02      	ldr	r2, [pc, #8]	@ (8003ec8 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8003ec0:	430b      	orrs	r3, r1
 8003ec2:	6593      	str	r3, [r2, #88]	@ 0x58
 8003ec4:	e006      	b.n	8003ed4 <HAL_RCCEx_PeriphCLKConfig+0xca8>
 8003ec6:	bf00      	nop
 8003ec8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ecc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003ed0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8003ed4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003ed8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003edc:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8003ee0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003ee4:	2300      	movs	r3, #0
 8003ee6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8003eea:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8003eee:	460b      	mov	r3, r1
 8003ef0:	4313      	orrs	r3, r2
 8003ef2:	d055      	beq.n	8003fa0 <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8003ef4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003ef8:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003efc:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8003f00:	d033      	beq.n	8003f6a <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 8003f02:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8003f06:	d82c      	bhi.n	8003f62 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8003f08:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003f0c:	d02f      	beq.n	8003f6e <HAL_RCCEx_PeriphCLKConfig+0xd42>
 8003f0e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003f12:	d826      	bhi.n	8003f62 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8003f14:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8003f18:	d02b      	beq.n	8003f72 <HAL_RCCEx_PeriphCLKConfig+0xd46>
 8003f1a:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8003f1e:	d820      	bhi.n	8003f62 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8003f20:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003f24:	d012      	beq.n	8003f4c <HAL_RCCEx_PeriphCLKConfig+0xd20>
 8003f26:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003f2a:	d81a      	bhi.n	8003f62 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d022      	beq.n	8003f76 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 8003f30:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003f34:	d115      	bne.n	8003f62 <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003f36:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003f3a:	3308      	adds	r3, #8
 8003f3c:	2100      	movs	r1, #0
 8003f3e:	4618      	mov	r0, r3
 8003f40:	f000 fdd2 	bl	8004ae8 <RCCEx_PLL2_Config>
 8003f44:	4603      	mov	r3, r0
 8003f46:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8003f4a:	e015      	b.n	8003f78 <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003f4c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003f50:	3328      	adds	r3, #40	@ 0x28
 8003f52:	2102      	movs	r1, #2
 8003f54:	4618      	mov	r0, r3
 8003f56:	f000 fe79 	bl	8004c4c <RCCEx_PLL3_Config>
 8003f5a:	4603      	mov	r3, r0
 8003f5c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8003f60:	e00a      	b.n	8003f78 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003f62:	2301      	movs	r3, #1
 8003f64:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003f68:	e006      	b.n	8003f78 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8003f6a:	bf00      	nop
 8003f6c:	e004      	b.n	8003f78 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8003f6e:	bf00      	nop
 8003f70:	e002      	b.n	8003f78 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8003f72:	bf00      	nop
 8003f74:	e000      	b.n	8003f78 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8003f76:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003f78:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d10b      	bne.n	8003f98 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8003f80:	4ba0      	ldr	r3, [pc, #640]	@ (8004204 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8003f82:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f84:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8003f88:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003f8c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003f90:	4a9c      	ldr	r2, [pc, #624]	@ (8004204 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8003f92:	430b      	orrs	r3, r1
 8003f94:	6593      	str	r3, [r2, #88]	@ 0x58
 8003f96:	e003      	b.n	8003fa0 <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f98:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003f9c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 8003fa0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003fa4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fa8:	f002 0308 	and.w	r3, r2, #8
 8003fac:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003fb0:	2300      	movs	r3, #0
 8003fb2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8003fb6:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8003fba:	460b      	mov	r3, r1
 8003fbc:	4313      	orrs	r3, r2
 8003fbe:	d01e      	beq.n	8003ffe <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 8003fc0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003fc4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003fc8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003fcc:	d10c      	bne.n	8003fe8 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8003fce:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003fd2:	3328      	adds	r3, #40	@ 0x28
 8003fd4:	2102      	movs	r1, #2
 8003fd6:	4618      	mov	r0, r3
 8003fd8:	f000 fe38 	bl	8004c4c <RCCEx_PLL3_Config>
 8003fdc:	4603      	mov	r3, r0
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d002      	beq.n	8003fe8 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 8003fe2:	2301      	movs	r3, #1
 8003fe4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 8003fe8:	4b86      	ldr	r3, [pc, #536]	@ (8004204 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8003fea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003fec:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003ff0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003ff4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003ff8:	4a82      	ldr	r2, [pc, #520]	@ (8004204 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8003ffa:	430b      	orrs	r3, r1
 8003ffc:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003ffe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004002:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004006:	f002 0310 	and.w	r3, r2, #16
 800400a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800400e:	2300      	movs	r3, #0
 8004010:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004014:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8004018:	460b      	mov	r3, r1
 800401a:	4313      	orrs	r3, r2
 800401c:	d01e      	beq.n	800405c <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800401e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004022:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004026:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800402a:	d10c      	bne.n	8004046 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800402c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004030:	3328      	adds	r3, #40	@ 0x28
 8004032:	2102      	movs	r1, #2
 8004034:	4618      	mov	r0, r3
 8004036:	f000 fe09 	bl	8004c4c <RCCEx_PLL3_Config>
 800403a:	4603      	mov	r3, r0
 800403c:	2b00      	cmp	r3, #0
 800403e:	d002      	beq.n	8004046 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 8004040:	2301      	movs	r3, #1
 8004042:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004046:	4b6f      	ldr	r3, [pc, #444]	@ (8004204 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004048:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800404a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800404e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004052:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004056:	4a6b      	ldr	r2, [pc, #428]	@ (8004204 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004058:	430b      	orrs	r3, r1
 800405a:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800405c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004060:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004064:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8004068:	67bb      	str	r3, [r7, #120]	@ 0x78
 800406a:	2300      	movs	r3, #0
 800406c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800406e:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8004072:	460b      	mov	r3, r1
 8004074:	4313      	orrs	r3, r2
 8004076:	d03e      	beq.n	80040f6 <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8004078:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800407c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8004080:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004084:	d022      	beq.n	80040cc <HAL_RCCEx_PeriphCLKConfig+0xea0>
 8004086:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800408a:	d81b      	bhi.n	80040c4 <HAL_RCCEx_PeriphCLKConfig+0xe98>
 800408c:	2b00      	cmp	r3, #0
 800408e:	d003      	beq.n	8004098 <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 8004090:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004094:	d00b      	beq.n	80040ae <HAL_RCCEx_PeriphCLKConfig+0xe82>
 8004096:	e015      	b.n	80040c4 <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004098:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800409c:	3308      	adds	r3, #8
 800409e:	2100      	movs	r1, #0
 80040a0:	4618      	mov	r0, r3
 80040a2:	f000 fd21 	bl	8004ae8 <RCCEx_PLL2_Config>
 80040a6:	4603      	mov	r3, r0
 80040a8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 80040ac:	e00f      	b.n	80040ce <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80040ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80040b2:	3328      	adds	r3, #40	@ 0x28
 80040b4:	2102      	movs	r1, #2
 80040b6:	4618      	mov	r0, r3
 80040b8:	f000 fdc8 	bl	8004c4c <RCCEx_PLL3_Config>
 80040bc:	4603      	mov	r3, r0
 80040be:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 80040c2:	e004      	b.n	80040ce <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80040c4:	2301      	movs	r3, #1
 80040c6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80040ca:	e000      	b.n	80040ce <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 80040cc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80040ce:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d10b      	bne.n	80040ee <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80040d6:	4b4b      	ldr	r3, [pc, #300]	@ (8004204 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80040d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80040da:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 80040de:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80040e2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80040e6:	4a47      	ldr	r2, [pc, #284]	@ (8004204 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80040e8:	430b      	orrs	r3, r1
 80040ea:	6593      	str	r3, [r2, #88]	@ 0x58
 80040ec:	e003      	b.n	80040f6 <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80040ee:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80040f2:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80040f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80040fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040fe:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8004102:	673b      	str	r3, [r7, #112]	@ 0x70
 8004104:	2300      	movs	r3, #0
 8004106:	677b      	str	r3, [r7, #116]	@ 0x74
 8004108:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 800410c:	460b      	mov	r3, r1
 800410e:	4313      	orrs	r3, r2
 8004110:	d03b      	beq.n	800418a <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8004112:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004116:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800411a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800411e:	d01f      	beq.n	8004160 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 8004120:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004124:	d818      	bhi.n	8004158 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 8004126:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800412a:	d003      	beq.n	8004134 <HAL_RCCEx_PeriphCLKConfig+0xf08>
 800412c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004130:	d007      	beq.n	8004142 <HAL_RCCEx_PeriphCLKConfig+0xf16>
 8004132:	e011      	b.n	8004158 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004134:	4b33      	ldr	r3, [pc, #204]	@ (8004204 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004136:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004138:	4a32      	ldr	r2, [pc, #200]	@ (8004204 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800413a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800413e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8004140:	e00f      	b.n	8004162 <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004142:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004146:	3328      	adds	r3, #40	@ 0x28
 8004148:	2101      	movs	r1, #1
 800414a:	4618      	mov	r0, r3
 800414c:	f000 fd7e 	bl	8004c4c <RCCEx_PLL3_Config>
 8004150:	4603      	mov	r3, r0
 8004152:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 8004156:	e004      	b.n	8004162 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004158:	2301      	movs	r3, #1
 800415a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800415e:	e000      	b.n	8004162 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 8004160:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004162:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004166:	2b00      	cmp	r3, #0
 8004168:	d10b      	bne.n	8004182 <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800416a:	4b26      	ldr	r3, [pc, #152]	@ (8004204 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800416c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800416e:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8004172:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004176:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800417a:	4a22      	ldr	r2, [pc, #136]	@ (8004204 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800417c:	430b      	orrs	r3, r1
 800417e:	6553      	str	r3, [r2, #84]	@ 0x54
 8004180:	e003      	b.n	800418a <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004182:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004186:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800418a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800418e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004192:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8004196:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004198:	2300      	movs	r3, #0
 800419a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800419c:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 80041a0:	460b      	mov	r3, r1
 80041a2:	4313      	orrs	r3, r2
 80041a4:	d034      	beq.n	8004210 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 80041a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80041aa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d003      	beq.n	80041b8 <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 80041b0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80041b4:	d007      	beq.n	80041c6 <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 80041b6:	e011      	b.n	80041dc <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80041b8:	4b12      	ldr	r3, [pc, #72]	@ (8004204 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80041ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041bc:	4a11      	ldr	r2, [pc, #68]	@ (8004204 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80041be:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80041c2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80041c4:	e00e      	b.n	80041e4 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80041c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80041ca:	3308      	adds	r3, #8
 80041cc:	2102      	movs	r1, #2
 80041ce:	4618      	mov	r0, r3
 80041d0:	f000 fc8a 	bl	8004ae8 <RCCEx_PLL2_Config>
 80041d4:	4603      	mov	r3, r0
 80041d6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80041da:	e003      	b.n	80041e4 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 80041dc:	2301      	movs	r3, #1
 80041de:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80041e2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80041e4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d10d      	bne.n	8004208 <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80041ec:	4b05      	ldr	r3, [pc, #20]	@ (8004204 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80041ee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80041f0:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80041f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80041f8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80041fa:	4a02      	ldr	r2, [pc, #8]	@ (8004204 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80041fc:	430b      	orrs	r3, r1
 80041fe:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004200:	e006      	b.n	8004210 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 8004202:	bf00      	nop
 8004204:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004208:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800420c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004210:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004214:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004218:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 800421c:	663b      	str	r3, [r7, #96]	@ 0x60
 800421e:	2300      	movs	r3, #0
 8004220:	667b      	str	r3, [r7, #100]	@ 0x64
 8004222:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8004226:	460b      	mov	r3, r1
 8004228:	4313      	orrs	r3, r2
 800422a:	d00c      	beq.n	8004246 <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800422c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004230:	3328      	adds	r3, #40	@ 0x28
 8004232:	2102      	movs	r1, #2
 8004234:	4618      	mov	r0, r3
 8004236:	f000 fd09 	bl	8004c4c <RCCEx_PLL3_Config>
 800423a:	4603      	mov	r3, r0
 800423c:	2b00      	cmp	r3, #0
 800423e:	d002      	beq.n	8004246 <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 8004240:	2301      	movs	r3, #1
 8004242:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8004246:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800424a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800424e:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8004252:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004254:	2300      	movs	r3, #0
 8004256:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004258:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 800425c:	460b      	mov	r3, r1
 800425e:	4313      	orrs	r3, r2
 8004260:	d036      	beq.n	80042d0 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 8004262:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004266:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004268:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800426c:	d018      	beq.n	80042a0 <HAL_RCCEx_PeriphCLKConfig+0x1074>
 800426e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004272:	d811      	bhi.n	8004298 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8004274:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004278:	d014      	beq.n	80042a4 <HAL_RCCEx_PeriphCLKConfig+0x1078>
 800427a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800427e:	d80b      	bhi.n	8004298 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8004280:	2b00      	cmp	r3, #0
 8004282:	d011      	beq.n	80042a8 <HAL_RCCEx_PeriphCLKConfig+0x107c>
 8004284:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004288:	d106      	bne.n	8004298 <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800428a:	4bb7      	ldr	r3, [pc, #732]	@ (8004568 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800428c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800428e:	4ab6      	ldr	r2, [pc, #728]	@ (8004568 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004290:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004294:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8004296:	e008      	b.n	80042aa <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004298:	2301      	movs	r3, #1
 800429a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800429e:	e004      	b.n	80042aa <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 80042a0:	bf00      	nop
 80042a2:	e002      	b.n	80042aa <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 80042a4:	bf00      	nop
 80042a6:	e000      	b.n	80042aa <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 80042a8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80042aa:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d10a      	bne.n	80042c8 <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80042b2:	4bad      	ldr	r3, [pc, #692]	@ (8004568 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80042b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80042b6:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80042ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80042be:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80042c0:	4aa9      	ldr	r2, [pc, #676]	@ (8004568 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80042c2:	430b      	orrs	r3, r1
 80042c4:	6553      	str	r3, [r2, #84]	@ 0x54
 80042c6:	e003      	b.n	80042d0 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80042c8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80042cc:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80042d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80042d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042d8:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 80042dc:	653b      	str	r3, [r7, #80]	@ 0x50
 80042de:	2300      	movs	r3, #0
 80042e0:	657b      	str	r3, [r7, #84]	@ 0x54
 80042e2:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 80042e6:	460b      	mov	r3, r1
 80042e8:	4313      	orrs	r3, r2
 80042ea:	d009      	beq.n	8004300 <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80042ec:	4b9e      	ldr	r3, [pc, #632]	@ (8004568 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80042ee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80042f0:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 80042f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80042f8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80042fa:	4a9b      	ldr	r2, [pc, #620]	@ (8004568 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80042fc:	430b      	orrs	r3, r1
 80042fe:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004300:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004304:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004308:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 800430c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800430e:	2300      	movs	r3, #0
 8004310:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004312:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8004316:	460b      	mov	r3, r1
 8004318:	4313      	orrs	r3, r2
 800431a:	d009      	beq.n	8004330 <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800431c:	4b92      	ldr	r3, [pc, #584]	@ (8004568 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800431e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004320:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8004324:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004328:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800432a:	4a8f      	ldr	r2, [pc, #572]	@ (8004568 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800432c:	430b      	orrs	r3, r1
 800432e:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8004330:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004334:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004338:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 800433c:	643b      	str	r3, [r7, #64]	@ 0x40
 800433e:	2300      	movs	r3, #0
 8004340:	647b      	str	r3, [r7, #68]	@ 0x44
 8004342:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8004346:	460b      	mov	r3, r1
 8004348:	4313      	orrs	r3, r2
 800434a:	d00e      	beq.n	800436a <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800434c:	4b86      	ldr	r3, [pc, #536]	@ (8004568 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800434e:	691b      	ldr	r3, [r3, #16]
 8004350:	4a85      	ldr	r2, [pc, #532]	@ (8004568 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004352:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8004356:	6113      	str	r3, [r2, #16]
 8004358:	4b83      	ldr	r3, [pc, #524]	@ (8004568 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800435a:	6919      	ldr	r1, [r3, #16]
 800435c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004360:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8004364:	4a80      	ldr	r2, [pc, #512]	@ (8004568 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004366:	430b      	orrs	r3, r1
 8004368:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800436a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800436e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004372:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8004376:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004378:	2300      	movs	r3, #0
 800437a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800437c:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8004380:	460b      	mov	r3, r1
 8004382:	4313      	orrs	r3, r2
 8004384:	d009      	beq.n	800439a <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8004386:	4b78      	ldr	r3, [pc, #480]	@ (8004568 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004388:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800438a:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800438e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004392:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004394:	4a74      	ldr	r2, [pc, #464]	@ (8004568 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004396:	430b      	orrs	r3, r1
 8004398:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800439a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800439e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043a2:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 80043a6:	633b      	str	r3, [r7, #48]	@ 0x30
 80043a8:	2300      	movs	r3, #0
 80043aa:	637b      	str	r3, [r7, #52]	@ 0x34
 80043ac:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 80043b0:	460b      	mov	r3, r1
 80043b2:	4313      	orrs	r3, r2
 80043b4:	d00a      	beq.n	80043cc <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80043b6:	4b6c      	ldr	r3, [pc, #432]	@ (8004568 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80043b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80043ba:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 80043be:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80043c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80043c6:	4a68      	ldr	r2, [pc, #416]	@ (8004568 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80043c8:	430b      	orrs	r3, r1
 80043ca:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 80043cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80043d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043d4:	2100      	movs	r1, #0
 80043d6:	62b9      	str	r1, [r7, #40]	@ 0x28
 80043d8:	f003 0301 	and.w	r3, r3, #1
 80043dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80043de:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 80043e2:	460b      	mov	r3, r1
 80043e4:	4313      	orrs	r3, r2
 80043e6:	d011      	beq.n	800440c <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80043e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80043ec:	3308      	adds	r3, #8
 80043ee:	2100      	movs	r1, #0
 80043f0:	4618      	mov	r0, r3
 80043f2:	f000 fb79 	bl	8004ae8 <RCCEx_PLL2_Config>
 80043f6:	4603      	mov	r3, r0
 80043f8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 80043fc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004400:	2b00      	cmp	r3, #0
 8004402:	d003      	beq.n	800440c <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004404:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004408:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800440c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004410:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004414:	2100      	movs	r1, #0
 8004416:	6239      	str	r1, [r7, #32]
 8004418:	f003 0302 	and.w	r3, r3, #2
 800441c:	627b      	str	r3, [r7, #36]	@ 0x24
 800441e:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8004422:	460b      	mov	r3, r1
 8004424:	4313      	orrs	r3, r2
 8004426:	d011      	beq.n	800444c <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004428:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800442c:	3308      	adds	r3, #8
 800442e:	2101      	movs	r1, #1
 8004430:	4618      	mov	r0, r3
 8004432:	f000 fb59 	bl	8004ae8 <RCCEx_PLL2_Config>
 8004436:	4603      	mov	r3, r0
 8004438:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800443c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004440:	2b00      	cmp	r3, #0
 8004442:	d003      	beq.n	800444c <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004444:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004448:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800444c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004450:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004454:	2100      	movs	r1, #0
 8004456:	61b9      	str	r1, [r7, #24]
 8004458:	f003 0304 	and.w	r3, r3, #4
 800445c:	61fb      	str	r3, [r7, #28]
 800445e:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8004462:	460b      	mov	r3, r1
 8004464:	4313      	orrs	r3, r2
 8004466:	d011      	beq.n	800448c <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004468:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800446c:	3308      	adds	r3, #8
 800446e:	2102      	movs	r1, #2
 8004470:	4618      	mov	r0, r3
 8004472:	f000 fb39 	bl	8004ae8 <RCCEx_PLL2_Config>
 8004476:	4603      	mov	r3, r0
 8004478:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800447c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004480:	2b00      	cmp	r3, #0
 8004482:	d003      	beq.n	800448c <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004484:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004488:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800448c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004490:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004494:	2100      	movs	r1, #0
 8004496:	6139      	str	r1, [r7, #16]
 8004498:	f003 0308 	and.w	r3, r3, #8
 800449c:	617b      	str	r3, [r7, #20]
 800449e:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80044a2:	460b      	mov	r3, r1
 80044a4:	4313      	orrs	r3, r2
 80044a6:	d011      	beq.n	80044cc <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80044a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80044ac:	3328      	adds	r3, #40	@ 0x28
 80044ae:	2100      	movs	r1, #0
 80044b0:	4618      	mov	r0, r3
 80044b2:	f000 fbcb 	bl	8004c4c <RCCEx_PLL3_Config>
 80044b6:	4603      	mov	r3, r0
 80044b8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  
    if (ret == HAL_OK)
 80044bc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d003      	beq.n	80044cc <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80044c4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80044c8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 80044cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80044d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044d4:	2100      	movs	r1, #0
 80044d6:	60b9      	str	r1, [r7, #8]
 80044d8:	f003 0310 	and.w	r3, r3, #16
 80044dc:	60fb      	str	r3, [r7, #12]
 80044de:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80044e2:	460b      	mov	r3, r1
 80044e4:	4313      	orrs	r3, r2
 80044e6:	d011      	beq.n	800450c <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80044e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80044ec:	3328      	adds	r3, #40	@ 0x28
 80044ee:	2101      	movs	r1, #1
 80044f0:	4618      	mov	r0, r3
 80044f2:	f000 fbab 	bl	8004c4c <RCCEx_PLL3_Config>
 80044f6:	4603      	mov	r3, r0
 80044f8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 80044fc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004500:	2b00      	cmp	r3, #0
 8004502:	d003      	beq.n	800450c <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004504:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004508:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800450c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004510:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004514:	2100      	movs	r1, #0
 8004516:	6039      	str	r1, [r7, #0]
 8004518:	f003 0320 	and.w	r3, r3, #32
 800451c:	607b      	str	r3, [r7, #4]
 800451e:	e9d7 1200 	ldrd	r1, r2, [r7]
 8004522:	460b      	mov	r3, r1
 8004524:	4313      	orrs	r3, r2
 8004526:	d011      	beq.n	800454c <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004528:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800452c:	3328      	adds	r3, #40	@ 0x28
 800452e:	2102      	movs	r1, #2
 8004530:	4618      	mov	r0, r3
 8004532:	f000 fb8b 	bl	8004c4c <RCCEx_PLL3_Config>
 8004536:	4603      	mov	r3, r0
 8004538:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800453c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004540:	2b00      	cmp	r3, #0
 8004542:	d003      	beq.n	800454c <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004544:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004548:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }

  if (status == HAL_OK)
 800454c:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 8004550:	2b00      	cmp	r3, #0
 8004552:	d101      	bne.n	8004558 <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 8004554:	2300      	movs	r3, #0
 8004556:	e000      	b.n	800455a <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 8004558:	2301      	movs	r3, #1
}
 800455a:	4618      	mov	r0, r3
 800455c:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 8004560:	46bd      	mov	sp, r7
 8004562:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004566:	bf00      	nop
 8004568:	58024400 	.word	0x58024400

0800456c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800456c:	b580      	push	{r7, lr}
 800456e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8004570:	f7fe fe00 	bl	8003174 <HAL_RCC_GetHCLKFreq>
 8004574:	4602      	mov	r2, r0
 8004576:	4b06      	ldr	r3, [pc, #24]	@ (8004590 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8004578:	6a1b      	ldr	r3, [r3, #32]
 800457a:	091b      	lsrs	r3, r3, #4
 800457c:	f003 0307 	and.w	r3, r3, #7
 8004580:	4904      	ldr	r1, [pc, #16]	@ (8004594 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8004582:	5ccb      	ldrb	r3, [r1, r3]
 8004584:	f003 031f 	and.w	r3, r3, #31
 8004588:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800458c:	4618      	mov	r0, r3
 800458e:	bd80      	pop	{r7, pc}
 8004590:	58024400 	.word	0x58024400
 8004594:	0801c58c 	.word	0x0801c58c

08004598 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8004598:	b480      	push	{r7}
 800459a:	b089      	sub	sp, #36	@ 0x24
 800459c:	af00      	add	r7, sp, #0
 800459e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80045a0:	4ba1      	ldr	r3, [pc, #644]	@ (8004828 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80045a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80045a4:	f003 0303 	and.w	r3, r3, #3
 80045a8:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 80045aa:	4b9f      	ldr	r3, [pc, #636]	@ (8004828 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80045ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80045ae:	0b1b      	lsrs	r3, r3, #12
 80045b0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80045b4:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80045b6:	4b9c      	ldr	r3, [pc, #624]	@ (8004828 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80045b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045ba:	091b      	lsrs	r3, r3, #4
 80045bc:	f003 0301 	and.w	r3, r3, #1
 80045c0:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 80045c2:	4b99      	ldr	r3, [pc, #612]	@ (8004828 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80045c4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80045c6:	08db      	lsrs	r3, r3, #3
 80045c8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80045cc:	693a      	ldr	r2, [r7, #16]
 80045ce:	fb02 f303 	mul.w	r3, r2, r3
 80045d2:	ee07 3a90 	vmov	s15, r3
 80045d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80045da:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80045de:	697b      	ldr	r3, [r7, #20]
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	f000 8111 	beq.w	8004808 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80045e6:	69bb      	ldr	r3, [r7, #24]
 80045e8:	2b02      	cmp	r3, #2
 80045ea:	f000 8083 	beq.w	80046f4 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80045ee:	69bb      	ldr	r3, [r7, #24]
 80045f0:	2b02      	cmp	r3, #2
 80045f2:	f200 80a1 	bhi.w	8004738 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80045f6:	69bb      	ldr	r3, [r7, #24]
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d003      	beq.n	8004604 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80045fc:	69bb      	ldr	r3, [r7, #24]
 80045fe:	2b01      	cmp	r3, #1
 8004600:	d056      	beq.n	80046b0 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8004602:	e099      	b.n	8004738 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004604:	4b88      	ldr	r3, [pc, #544]	@ (8004828 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	f003 0320 	and.w	r3, r3, #32
 800460c:	2b00      	cmp	r3, #0
 800460e:	d02d      	beq.n	800466c <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004610:	4b85      	ldr	r3, [pc, #532]	@ (8004828 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	08db      	lsrs	r3, r3, #3
 8004616:	f003 0303 	and.w	r3, r3, #3
 800461a:	4a84      	ldr	r2, [pc, #528]	@ (800482c <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800461c:	fa22 f303 	lsr.w	r3, r2, r3
 8004620:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004622:	68bb      	ldr	r3, [r7, #8]
 8004624:	ee07 3a90 	vmov	s15, r3
 8004628:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800462c:	697b      	ldr	r3, [r7, #20]
 800462e:	ee07 3a90 	vmov	s15, r3
 8004632:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004636:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800463a:	4b7b      	ldr	r3, [pc, #492]	@ (8004828 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800463c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800463e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004642:	ee07 3a90 	vmov	s15, r3
 8004646:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800464a:	ed97 6a03 	vldr	s12, [r7, #12]
 800464e:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8004830 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004652:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004656:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800465a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800465e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004662:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004666:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800466a:	e087      	b.n	800477c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800466c:	697b      	ldr	r3, [r7, #20]
 800466e:	ee07 3a90 	vmov	s15, r3
 8004672:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004676:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8004834 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800467a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800467e:	4b6a      	ldr	r3, [pc, #424]	@ (8004828 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004680:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004682:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004686:	ee07 3a90 	vmov	s15, r3
 800468a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800468e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004692:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8004830 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004696:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800469a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800469e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80046a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80046a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80046aa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80046ae:	e065      	b.n	800477c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80046b0:	697b      	ldr	r3, [r7, #20]
 80046b2:	ee07 3a90 	vmov	s15, r3
 80046b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80046ba:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8004838 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80046be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80046c2:	4b59      	ldr	r3, [pc, #356]	@ (8004828 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80046c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80046c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80046ca:	ee07 3a90 	vmov	s15, r3
 80046ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80046d2:	ed97 6a03 	vldr	s12, [r7, #12]
 80046d6:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8004830 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80046da:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80046de:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80046e2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80046e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80046ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80046ee:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80046f2:	e043      	b.n	800477c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80046f4:	697b      	ldr	r3, [r7, #20]
 80046f6:	ee07 3a90 	vmov	s15, r3
 80046fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80046fe:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800483c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8004702:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004706:	4b48      	ldr	r3, [pc, #288]	@ (8004828 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004708:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800470a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800470e:	ee07 3a90 	vmov	s15, r3
 8004712:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004716:	ed97 6a03 	vldr	s12, [r7, #12]
 800471a:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8004830 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800471e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004722:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004726:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800472a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800472e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004732:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004736:	e021      	b.n	800477c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004738:	697b      	ldr	r3, [r7, #20]
 800473a:	ee07 3a90 	vmov	s15, r3
 800473e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004742:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8004838 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8004746:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800474a:	4b37      	ldr	r3, [pc, #220]	@ (8004828 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800474c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800474e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004752:	ee07 3a90 	vmov	s15, r3
 8004756:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800475a:	ed97 6a03 	vldr	s12, [r7, #12]
 800475e:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8004830 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004762:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004766:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800476a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800476e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004772:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004776:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800477a:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800477c:	4b2a      	ldr	r3, [pc, #168]	@ (8004828 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800477e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004780:	0a5b      	lsrs	r3, r3, #9
 8004782:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004786:	ee07 3a90 	vmov	s15, r3
 800478a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800478e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004792:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004796:	edd7 6a07 	vldr	s13, [r7, #28]
 800479a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800479e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80047a2:	ee17 2a90 	vmov	r2, s15
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 80047aa:	4b1f      	ldr	r3, [pc, #124]	@ (8004828 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80047ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80047ae:	0c1b      	lsrs	r3, r3, #16
 80047b0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80047b4:	ee07 3a90 	vmov	s15, r3
 80047b8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80047bc:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80047c0:	ee37 7a87 	vadd.f32	s14, s15, s14
 80047c4:	edd7 6a07 	vldr	s13, [r7, #28]
 80047c8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80047cc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80047d0:	ee17 2a90 	vmov	r2, s15
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 80047d8:	4b13      	ldr	r3, [pc, #76]	@ (8004828 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80047da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80047dc:	0e1b      	lsrs	r3, r3, #24
 80047de:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80047e2:	ee07 3a90 	vmov	s15, r3
 80047e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80047ea:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80047ee:	ee37 7a87 	vadd.f32	s14, s15, s14
 80047f2:	edd7 6a07 	vldr	s13, [r7, #28]
 80047f6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80047fa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80047fe:	ee17 2a90 	vmov	r2, s15
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8004806:	e008      	b.n	800481a <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	2200      	movs	r2, #0
 800480c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	2200      	movs	r2, #0
 8004812:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	2200      	movs	r2, #0
 8004818:	609a      	str	r2, [r3, #8]
}
 800481a:	bf00      	nop
 800481c:	3724      	adds	r7, #36	@ 0x24
 800481e:	46bd      	mov	sp, r7
 8004820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004824:	4770      	bx	lr
 8004826:	bf00      	nop
 8004828:	58024400 	.word	0x58024400
 800482c:	03d09000 	.word	0x03d09000
 8004830:	46000000 	.word	0x46000000
 8004834:	4c742400 	.word	0x4c742400
 8004838:	4a742400 	.word	0x4a742400
 800483c:	4bbebc20 	.word	0x4bbebc20

08004840 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8004840:	b480      	push	{r7}
 8004842:	b089      	sub	sp, #36	@ 0x24
 8004844:	af00      	add	r7, sp, #0
 8004846:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004848:	4ba1      	ldr	r3, [pc, #644]	@ (8004ad0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800484a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800484c:	f003 0303 	and.w	r3, r3, #3
 8004850:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8004852:	4b9f      	ldr	r3, [pc, #636]	@ (8004ad0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004854:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004856:	0d1b      	lsrs	r3, r3, #20
 8004858:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800485c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800485e:	4b9c      	ldr	r3, [pc, #624]	@ (8004ad0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004860:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004862:	0a1b      	lsrs	r3, r3, #8
 8004864:	f003 0301 	and.w	r3, r3, #1
 8004868:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800486a:	4b99      	ldr	r3, [pc, #612]	@ (8004ad0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800486c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800486e:	08db      	lsrs	r3, r3, #3
 8004870:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004874:	693a      	ldr	r2, [r7, #16]
 8004876:	fb02 f303 	mul.w	r3, r2, r3
 800487a:	ee07 3a90 	vmov	s15, r3
 800487e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004882:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8004886:	697b      	ldr	r3, [r7, #20]
 8004888:	2b00      	cmp	r3, #0
 800488a:	f000 8111 	beq.w	8004ab0 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800488e:	69bb      	ldr	r3, [r7, #24]
 8004890:	2b02      	cmp	r3, #2
 8004892:	f000 8083 	beq.w	800499c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8004896:	69bb      	ldr	r3, [r7, #24]
 8004898:	2b02      	cmp	r3, #2
 800489a:	f200 80a1 	bhi.w	80049e0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800489e:	69bb      	ldr	r3, [r7, #24]
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d003      	beq.n	80048ac <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80048a4:	69bb      	ldr	r3, [r7, #24]
 80048a6:	2b01      	cmp	r3, #1
 80048a8:	d056      	beq.n	8004958 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80048aa:	e099      	b.n	80049e0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80048ac:	4b88      	ldr	r3, [pc, #544]	@ (8004ad0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	f003 0320 	and.w	r3, r3, #32
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d02d      	beq.n	8004914 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80048b8:	4b85      	ldr	r3, [pc, #532]	@ (8004ad0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	08db      	lsrs	r3, r3, #3
 80048be:	f003 0303 	and.w	r3, r3, #3
 80048c2:	4a84      	ldr	r2, [pc, #528]	@ (8004ad4 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80048c4:	fa22 f303 	lsr.w	r3, r2, r3
 80048c8:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80048ca:	68bb      	ldr	r3, [r7, #8]
 80048cc:	ee07 3a90 	vmov	s15, r3
 80048d0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80048d4:	697b      	ldr	r3, [r7, #20]
 80048d6:	ee07 3a90 	vmov	s15, r3
 80048da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80048de:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80048e2:	4b7b      	ldr	r3, [pc, #492]	@ (8004ad0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80048e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80048ea:	ee07 3a90 	vmov	s15, r3
 80048ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80048f2:	ed97 6a03 	vldr	s12, [r7, #12]
 80048f6:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8004ad8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80048fa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80048fe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004902:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004906:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800490a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800490e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8004912:	e087      	b.n	8004a24 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004914:	697b      	ldr	r3, [r7, #20]
 8004916:	ee07 3a90 	vmov	s15, r3
 800491a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800491e:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8004adc <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8004922:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004926:	4b6a      	ldr	r3, [pc, #424]	@ (8004ad0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004928:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800492a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800492e:	ee07 3a90 	vmov	s15, r3
 8004932:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004936:	ed97 6a03 	vldr	s12, [r7, #12]
 800493a:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8004ad8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800493e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004942:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004946:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800494a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800494e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004952:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004956:	e065      	b.n	8004a24 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004958:	697b      	ldr	r3, [r7, #20]
 800495a:	ee07 3a90 	vmov	s15, r3
 800495e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004962:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8004ae0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004966:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800496a:	4b59      	ldr	r3, [pc, #356]	@ (8004ad0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800496c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800496e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004972:	ee07 3a90 	vmov	s15, r3
 8004976:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800497a:	ed97 6a03 	vldr	s12, [r7, #12]
 800497e:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8004ad8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004982:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004986:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800498a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800498e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004992:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004996:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800499a:	e043      	b.n	8004a24 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800499c:	697b      	ldr	r3, [r7, #20]
 800499e:	ee07 3a90 	vmov	s15, r3
 80049a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80049a6:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8004ae4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80049aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80049ae:	4b48      	ldr	r3, [pc, #288]	@ (8004ad0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80049b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80049b6:	ee07 3a90 	vmov	s15, r3
 80049ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80049be:	ed97 6a03 	vldr	s12, [r7, #12]
 80049c2:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8004ad8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80049c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80049ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80049ce:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80049d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80049d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80049da:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80049de:	e021      	b.n	8004a24 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80049e0:	697b      	ldr	r3, [r7, #20]
 80049e2:	ee07 3a90 	vmov	s15, r3
 80049e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80049ea:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8004ae0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80049ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80049f2:	4b37      	ldr	r3, [pc, #220]	@ (8004ad0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80049f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80049fa:	ee07 3a90 	vmov	s15, r3
 80049fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004a02:	ed97 6a03 	vldr	s12, [r7, #12]
 8004a06:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8004ad8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004a0a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004a0e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004a12:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004a16:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004a1a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004a1e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004a22:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8004a24:	4b2a      	ldr	r3, [pc, #168]	@ (8004ad0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004a26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a28:	0a5b      	lsrs	r3, r3, #9
 8004a2a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004a2e:	ee07 3a90 	vmov	s15, r3
 8004a32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a36:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004a3a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004a3e:	edd7 6a07 	vldr	s13, [r7, #28]
 8004a42:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004a46:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004a4a:	ee17 2a90 	vmov	r2, s15
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8004a52:	4b1f      	ldr	r3, [pc, #124]	@ (8004ad0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004a54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a56:	0c1b      	lsrs	r3, r3, #16
 8004a58:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004a5c:	ee07 3a90 	vmov	s15, r3
 8004a60:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a64:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004a68:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004a6c:	edd7 6a07 	vldr	s13, [r7, #28]
 8004a70:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004a74:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004a78:	ee17 2a90 	vmov	r2, s15
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8004a80:	4b13      	ldr	r3, [pc, #76]	@ (8004ad0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004a82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a84:	0e1b      	lsrs	r3, r3, #24
 8004a86:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004a8a:	ee07 3a90 	vmov	s15, r3
 8004a8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a92:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004a96:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004a9a:	edd7 6a07 	vldr	s13, [r7, #28]
 8004a9e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004aa2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004aa6:	ee17 2a90 	vmov	r2, s15
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8004aae:	e008      	b.n	8004ac2 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	2200      	movs	r2, #0
 8004ab4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	2200      	movs	r2, #0
 8004aba:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	2200      	movs	r2, #0
 8004ac0:	609a      	str	r2, [r3, #8]
}
 8004ac2:	bf00      	nop
 8004ac4:	3724      	adds	r7, #36	@ 0x24
 8004ac6:	46bd      	mov	sp, r7
 8004ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004acc:	4770      	bx	lr
 8004ace:	bf00      	nop
 8004ad0:	58024400 	.word	0x58024400
 8004ad4:	03d09000 	.word	0x03d09000
 8004ad8:	46000000 	.word	0x46000000
 8004adc:	4c742400 	.word	0x4c742400
 8004ae0:	4a742400 	.word	0x4a742400
 8004ae4:	4bbebc20 	.word	0x4bbebc20

08004ae8 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8004ae8:	b580      	push	{r7, lr}
 8004aea:	b084      	sub	sp, #16
 8004aec:	af00      	add	r7, sp, #0
 8004aee:	6078      	str	r0, [r7, #4]
 8004af0:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004af2:	2300      	movs	r3, #0
 8004af4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004af6:	4b53      	ldr	r3, [pc, #332]	@ (8004c44 <RCCEx_PLL2_Config+0x15c>)
 8004af8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004afa:	f003 0303 	and.w	r3, r3, #3
 8004afe:	2b03      	cmp	r3, #3
 8004b00:	d101      	bne.n	8004b06 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8004b02:	2301      	movs	r3, #1
 8004b04:	e099      	b.n	8004c3a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8004b06:	4b4f      	ldr	r3, [pc, #316]	@ (8004c44 <RCCEx_PLL2_Config+0x15c>)
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	4a4e      	ldr	r2, [pc, #312]	@ (8004c44 <RCCEx_PLL2_Config+0x15c>)
 8004b0c:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004b10:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004b12:	f7fd f8f5 	bl	8001d00 <HAL_GetTick>
 8004b16:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004b18:	e008      	b.n	8004b2c <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004b1a:	f7fd f8f1 	bl	8001d00 <HAL_GetTick>
 8004b1e:	4602      	mov	r2, r0
 8004b20:	68bb      	ldr	r3, [r7, #8]
 8004b22:	1ad3      	subs	r3, r2, r3
 8004b24:	2b02      	cmp	r3, #2
 8004b26:	d901      	bls.n	8004b2c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004b28:	2303      	movs	r3, #3
 8004b2a:	e086      	b.n	8004c3a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004b2c:	4b45      	ldr	r3, [pc, #276]	@ (8004c44 <RCCEx_PLL2_Config+0x15c>)
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d1f0      	bne.n	8004b1a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8004b38:	4b42      	ldr	r3, [pc, #264]	@ (8004c44 <RCCEx_PLL2_Config+0x15c>)
 8004b3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b3c:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	031b      	lsls	r3, r3, #12
 8004b46:	493f      	ldr	r1, [pc, #252]	@ (8004c44 <RCCEx_PLL2_Config+0x15c>)
 8004b48:	4313      	orrs	r3, r2
 8004b4a:	628b      	str	r3, [r1, #40]	@ 0x28
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	685b      	ldr	r3, [r3, #4]
 8004b50:	3b01      	subs	r3, #1
 8004b52:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	689b      	ldr	r3, [r3, #8]
 8004b5a:	3b01      	subs	r3, #1
 8004b5c:	025b      	lsls	r3, r3, #9
 8004b5e:	b29b      	uxth	r3, r3
 8004b60:	431a      	orrs	r2, r3
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	68db      	ldr	r3, [r3, #12]
 8004b66:	3b01      	subs	r3, #1
 8004b68:	041b      	lsls	r3, r3, #16
 8004b6a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8004b6e:	431a      	orrs	r2, r3
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	691b      	ldr	r3, [r3, #16]
 8004b74:	3b01      	subs	r3, #1
 8004b76:	061b      	lsls	r3, r3, #24
 8004b78:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8004b7c:	4931      	ldr	r1, [pc, #196]	@ (8004c44 <RCCEx_PLL2_Config+0x15c>)
 8004b7e:	4313      	orrs	r3, r2
 8004b80:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8004b82:	4b30      	ldr	r3, [pc, #192]	@ (8004c44 <RCCEx_PLL2_Config+0x15c>)
 8004b84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b86:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	695b      	ldr	r3, [r3, #20]
 8004b8e:	492d      	ldr	r1, [pc, #180]	@ (8004c44 <RCCEx_PLL2_Config+0x15c>)
 8004b90:	4313      	orrs	r3, r2
 8004b92:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8004b94:	4b2b      	ldr	r3, [pc, #172]	@ (8004c44 <RCCEx_PLL2_Config+0x15c>)
 8004b96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b98:	f023 0220 	bic.w	r2, r3, #32
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	699b      	ldr	r3, [r3, #24]
 8004ba0:	4928      	ldr	r1, [pc, #160]	@ (8004c44 <RCCEx_PLL2_Config+0x15c>)
 8004ba2:	4313      	orrs	r3, r2
 8004ba4:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8004ba6:	4b27      	ldr	r3, [pc, #156]	@ (8004c44 <RCCEx_PLL2_Config+0x15c>)
 8004ba8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004baa:	4a26      	ldr	r2, [pc, #152]	@ (8004c44 <RCCEx_PLL2_Config+0x15c>)
 8004bac:	f023 0310 	bic.w	r3, r3, #16
 8004bb0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8004bb2:	4b24      	ldr	r3, [pc, #144]	@ (8004c44 <RCCEx_PLL2_Config+0x15c>)
 8004bb4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004bb6:	4b24      	ldr	r3, [pc, #144]	@ (8004c48 <RCCEx_PLL2_Config+0x160>)
 8004bb8:	4013      	ands	r3, r2
 8004bba:	687a      	ldr	r2, [r7, #4]
 8004bbc:	69d2      	ldr	r2, [r2, #28]
 8004bbe:	00d2      	lsls	r2, r2, #3
 8004bc0:	4920      	ldr	r1, [pc, #128]	@ (8004c44 <RCCEx_PLL2_Config+0x15c>)
 8004bc2:	4313      	orrs	r3, r2
 8004bc4:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8004bc6:	4b1f      	ldr	r3, [pc, #124]	@ (8004c44 <RCCEx_PLL2_Config+0x15c>)
 8004bc8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004bca:	4a1e      	ldr	r2, [pc, #120]	@ (8004c44 <RCCEx_PLL2_Config+0x15c>)
 8004bcc:	f043 0310 	orr.w	r3, r3, #16
 8004bd0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8004bd2:	683b      	ldr	r3, [r7, #0]
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d106      	bne.n	8004be6 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8004bd8:	4b1a      	ldr	r3, [pc, #104]	@ (8004c44 <RCCEx_PLL2_Config+0x15c>)
 8004bda:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004bdc:	4a19      	ldr	r2, [pc, #100]	@ (8004c44 <RCCEx_PLL2_Config+0x15c>)
 8004bde:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8004be2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004be4:	e00f      	b.n	8004c06 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8004be6:	683b      	ldr	r3, [r7, #0]
 8004be8:	2b01      	cmp	r3, #1
 8004bea:	d106      	bne.n	8004bfa <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8004bec:	4b15      	ldr	r3, [pc, #84]	@ (8004c44 <RCCEx_PLL2_Config+0x15c>)
 8004bee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004bf0:	4a14      	ldr	r2, [pc, #80]	@ (8004c44 <RCCEx_PLL2_Config+0x15c>)
 8004bf2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004bf6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004bf8:	e005      	b.n	8004c06 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8004bfa:	4b12      	ldr	r3, [pc, #72]	@ (8004c44 <RCCEx_PLL2_Config+0x15c>)
 8004bfc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004bfe:	4a11      	ldr	r2, [pc, #68]	@ (8004c44 <RCCEx_PLL2_Config+0x15c>)
 8004c00:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8004c04:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8004c06:	4b0f      	ldr	r3, [pc, #60]	@ (8004c44 <RCCEx_PLL2_Config+0x15c>)
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	4a0e      	ldr	r2, [pc, #56]	@ (8004c44 <RCCEx_PLL2_Config+0x15c>)
 8004c0c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004c10:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004c12:	f7fd f875 	bl	8001d00 <HAL_GetTick>
 8004c16:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004c18:	e008      	b.n	8004c2c <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004c1a:	f7fd f871 	bl	8001d00 <HAL_GetTick>
 8004c1e:	4602      	mov	r2, r0
 8004c20:	68bb      	ldr	r3, [r7, #8]
 8004c22:	1ad3      	subs	r3, r2, r3
 8004c24:	2b02      	cmp	r3, #2
 8004c26:	d901      	bls.n	8004c2c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004c28:	2303      	movs	r3, #3
 8004c2a:	e006      	b.n	8004c3a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004c2c:	4b05      	ldr	r3, [pc, #20]	@ (8004c44 <RCCEx_PLL2_Config+0x15c>)
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d0f0      	beq.n	8004c1a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8004c38:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c3a:	4618      	mov	r0, r3
 8004c3c:	3710      	adds	r7, #16
 8004c3e:	46bd      	mov	sp, r7
 8004c40:	bd80      	pop	{r7, pc}
 8004c42:	bf00      	nop
 8004c44:	58024400 	.word	0x58024400
 8004c48:	ffff0007 	.word	0xffff0007

08004c4c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8004c4c:	b580      	push	{r7, lr}
 8004c4e:	b084      	sub	sp, #16
 8004c50:	af00      	add	r7, sp, #0
 8004c52:	6078      	str	r0, [r7, #4]
 8004c54:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004c56:	2300      	movs	r3, #0
 8004c58:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004c5a:	4b53      	ldr	r3, [pc, #332]	@ (8004da8 <RCCEx_PLL3_Config+0x15c>)
 8004c5c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c5e:	f003 0303 	and.w	r3, r3, #3
 8004c62:	2b03      	cmp	r3, #3
 8004c64:	d101      	bne.n	8004c6a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8004c66:	2301      	movs	r3, #1
 8004c68:	e099      	b.n	8004d9e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8004c6a:	4b4f      	ldr	r3, [pc, #316]	@ (8004da8 <RCCEx_PLL3_Config+0x15c>)
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	4a4e      	ldr	r2, [pc, #312]	@ (8004da8 <RCCEx_PLL3_Config+0x15c>)
 8004c70:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004c74:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004c76:	f7fd f843 	bl	8001d00 <HAL_GetTick>
 8004c7a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004c7c:	e008      	b.n	8004c90 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8004c7e:	f7fd f83f 	bl	8001d00 <HAL_GetTick>
 8004c82:	4602      	mov	r2, r0
 8004c84:	68bb      	ldr	r3, [r7, #8]
 8004c86:	1ad3      	subs	r3, r2, r3
 8004c88:	2b02      	cmp	r3, #2
 8004c8a:	d901      	bls.n	8004c90 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004c8c:	2303      	movs	r3, #3
 8004c8e:	e086      	b.n	8004d9e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004c90:	4b45      	ldr	r3, [pc, #276]	@ (8004da8 <RCCEx_PLL3_Config+0x15c>)
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d1f0      	bne.n	8004c7e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8004c9c:	4b42      	ldr	r3, [pc, #264]	@ (8004da8 <RCCEx_PLL3_Config+0x15c>)
 8004c9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ca0:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	051b      	lsls	r3, r3, #20
 8004caa:	493f      	ldr	r1, [pc, #252]	@ (8004da8 <RCCEx_PLL3_Config+0x15c>)
 8004cac:	4313      	orrs	r3, r2
 8004cae:	628b      	str	r3, [r1, #40]	@ 0x28
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	685b      	ldr	r3, [r3, #4]
 8004cb4:	3b01      	subs	r3, #1
 8004cb6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	689b      	ldr	r3, [r3, #8]
 8004cbe:	3b01      	subs	r3, #1
 8004cc0:	025b      	lsls	r3, r3, #9
 8004cc2:	b29b      	uxth	r3, r3
 8004cc4:	431a      	orrs	r2, r3
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	68db      	ldr	r3, [r3, #12]
 8004cca:	3b01      	subs	r3, #1
 8004ccc:	041b      	lsls	r3, r3, #16
 8004cce:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8004cd2:	431a      	orrs	r2, r3
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	691b      	ldr	r3, [r3, #16]
 8004cd8:	3b01      	subs	r3, #1
 8004cda:	061b      	lsls	r3, r3, #24
 8004cdc:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8004ce0:	4931      	ldr	r1, [pc, #196]	@ (8004da8 <RCCEx_PLL3_Config+0x15c>)
 8004ce2:	4313      	orrs	r3, r2
 8004ce4:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8004ce6:	4b30      	ldr	r3, [pc, #192]	@ (8004da8 <RCCEx_PLL3_Config+0x15c>)
 8004ce8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004cea:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	695b      	ldr	r3, [r3, #20]
 8004cf2:	492d      	ldr	r1, [pc, #180]	@ (8004da8 <RCCEx_PLL3_Config+0x15c>)
 8004cf4:	4313      	orrs	r3, r2
 8004cf6:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8004cf8:	4b2b      	ldr	r3, [pc, #172]	@ (8004da8 <RCCEx_PLL3_Config+0x15c>)
 8004cfa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004cfc:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	699b      	ldr	r3, [r3, #24]
 8004d04:	4928      	ldr	r1, [pc, #160]	@ (8004da8 <RCCEx_PLL3_Config+0x15c>)
 8004d06:	4313      	orrs	r3, r2
 8004d08:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8004d0a:	4b27      	ldr	r3, [pc, #156]	@ (8004da8 <RCCEx_PLL3_Config+0x15c>)
 8004d0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d0e:	4a26      	ldr	r2, [pc, #152]	@ (8004da8 <RCCEx_PLL3_Config+0x15c>)
 8004d10:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004d14:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8004d16:	4b24      	ldr	r3, [pc, #144]	@ (8004da8 <RCCEx_PLL3_Config+0x15c>)
 8004d18:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004d1a:	4b24      	ldr	r3, [pc, #144]	@ (8004dac <RCCEx_PLL3_Config+0x160>)
 8004d1c:	4013      	ands	r3, r2
 8004d1e:	687a      	ldr	r2, [r7, #4]
 8004d20:	69d2      	ldr	r2, [r2, #28]
 8004d22:	00d2      	lsls	r2, r2, #3
 8004d24:	4920      	ldr	r1, [pc, #128]	@ (8004da8 <RCCEx_PLL3_Config+0x15c>)
 8004d26:	4313      	orrs	r3, r2
 8004d28:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8004d2a:	4b1f      	ldr	r3, [pc, #124]	@ (8004da8 <RCCEx_PLL3_Config+0x15c>)
 8004d2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d2e:	4a1e      	ldr	r2, [pc, #120]	@ (8004da8 <RCCEx_PLL3_Config+0x15c>)
 8004d30:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004d34:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8004d36:	683b      	ldr	r3, [r7, #0]
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d106      	bne.n	8004d4a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8004d3c:	4b1a      	ldr	r3, [pc, #104]	@ (8004da8 <RCCEx_PLL3_Config+0x15c>)
 8004d3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d40:	4a19      	ldr	r2, [pc, #100]	@ (8004da8 <RCCEx_PLL3_Config+0x15c>)
 8004d42:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8004d46:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004d48:	e00f      	b.n	8004d6a <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8004d4a:	683b      	ldr	r3, [r7, #0]
 8004d4c:	2b01      	cmp	r3, #1
 8004d4e:	d106      	bne.n	8004d5e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8004d50:	4b15      	ldr	r3, [pc, #84]	@ (8004da8 <RCCEx_PLL3_Config+0x15c>)
 8004d52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d54:	4a14      	ldr	r2, [pc, #80]	@ (8004da8 <RCCEx_PLL3_Config+0x15c>)
 8004d56:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004d5a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004d5c:	e005      	b.n	8004d6a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8004d5e:	4b12      	ldr	r3, [pc, #72]	@ (8004da8 <RCCEx_PLL3_Config+0x15c>)
 8004d60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d62:	4a11      	ldr	r2, [pc, #68]	@ (8004da8 <RCCEx_PLL3_Config+0x15c>)
 8004d64:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004d68:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8004d6a:	4b0f      	ldr	r3, [pc, #60]	@ (8004da8 <RCCEx_PLL3_Config+0x15c>)
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	4a0e      	ldr	r2, [pc, #56]	@ (8004da8 <RCCEx_PLL3_Config+0x15c>)
 8004d70:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004d74:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004d76:	f7fc ffc3 	bl	8001d00 <HAL_GetTick>
 8004d7a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004d7c:	e008      	b.n	8004d90 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8004d7e:	f7fc ffbf 	bl	8001d00 <HAL_GetTick>
 8004d82:	4602      	mov	r2, r0
 8004d84:	68bb      	ldr	r3, [r7, #8]
 8004d86:	1ad3      	subs	r3, r2, r3
 8004d88:	2b02      	cmp	r3, #2
 8004d8a:	d901      	bls.n	8004d90 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004d8c:	2303      	movs	r3, #3
 8004d8e:	e006      	b.n	8004d9e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004d90:	4b05      	ldr	r3, [pc, #20]	@ (8004da8 <RCCEx_PLL3_Config+0x15c>)
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d0f0      	beq.n	8004d7e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8004d9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d9e:	4618      	mov	r0, r3
 8004da0:	3710      	adds	r7, #16
 8004da2:	46bd      	mov	sp, r7
 8004da4:	bd80      	pop	{r7, pc}
 8004da6:	bf00      	nop
 8004da8:	58024400 	.word	0x58024400
 8004dac:	ffff0007 	.word	0xffff0007

08004db0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004db0:	b480      	push	{r7}
 8004db2:	b085      	sub	sp, #20
 8004db4:	af00      	add	r7, sp, #0
 8004db6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004dbe:	b2db      	uxtb	r3, r3
 8004dc0:	2b01      	cmp	r3, #1
 8004dc2:	d001      	beq.n	8004dc8 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004dc4:	2301      	movs	r3, #1
 8004dc6:	e056      	b.n	8004e76 <HAL_TIM_Base_Start+0xc6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	2202      	movs	r2, #2
 8004dcc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	4a2b      	ldr	r2, [pc, #172]	@ (8004e84 <HAL_TIM_Base_Start+0xd4>)
 8004dd6:	4293      	cmp	r3, r2
 8004dd8:	d02c      	beq.n	8004e34 <HAL_TIM_Base_Start+0x84>
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004de2:	d027      	beq.n	8004e34 <HAL_TIM_Base_Start+0x84>
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	4a27      	ldr	r2, [pc, #156]	@ (8004e88 <HAL_TIM_Base_Start+0xd8>)
 8004dea:	4293      	cmp	r3, r2
 8004dec:	d022      	beq.n	8004e34 <HAL_TIM_Base_Start+0x84>
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	4a26      	ldr	r2, [pc, #152]	@ (8004e8c <HAL_TIM_Base_Start+0xdc>)
 8004df4:	4293      	cmp	r3, r2
 8004df6:	d01d      	beq.n	8004e34 <HAL_TIM_Base_Start+0x84>
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	4a24      	ldr	r2, [pc, #144]	@ (8004e90 <HAL_TIM_Base_Start+0xe0>)
 8004dfe:	4293      	cmp	r3, r2
 8004e00:	d018      	beq.n	8004e34 <HAL_TIM_Base_Start+0x84>
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	4a23      	ldr	r2, [pc, #140]	@ (8004e94 <HAL_TIM_Base_Start+0xe4>)
 8004e08:	4293      	cmp	r3, r2
 8004e0a:	d013      	beq.n	8004e34 <HAL_TIM_Base_Start+0x84>
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	4a21      	ldr	r2, [pc, #132]	@ (8004e98 <HAL_TIM_Base_Start+0xe8>)
 8004e12:	4293      	cmp	r3, r2
 8004e14:	d00e      	beq.n	8004e34 <HAL_TIM_Base_Start+0x84>
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	4a20      	ldr	r2, [pc, #128]	@ (8004e9c <HAL_TIM_Base_Start+0xec>)
 8004e1c:	4293      	cmp	r3, r2
 8004e1e:	d009      	beq.n	8004e34 <HAL_TIM_Base_Start+0x84>
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	4a1e      	ldr	r2, [pc, #120]	@ (8004ea0 <HAL_TIM_Base_Start+0xf0>)
 8004e26:	4293      	cmp	r3, r2
 8004e28:	d004      	beq.n	8004e34 <HAL_TIM_Base_Start+0x84>
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	4a1d      	ldr	r2, [pc, #116]	@ (8004ea4 <HAL_TIM_Base_Start+0xf4>)
 8004e30:	4293      	cmp	r3, r2
 8004e32:	d115      	bne.n	8004e60 <HAL_TIM_Base_Start+0xb0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	689a      	ldr	r2, [r3, #8]
 8004e3a:	4b1b      	ldr	r3, [pc, #108]	@ (8004ea8 <HAL_TIM_Base_Start+0xf8>)
 8004e3c:	4013      	ands	r3, r2
 8004e3e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	2b06      	cmp	r3, #6
 8004e44:	d015      	beq.n	8004e72 <HAL_TIM_Base_Start+0xc2>
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004e4c:	d011      	beq.n	8004e72 <HAL_TIM_Base_Start+0xc2>
    {
      __HAL_TIM_ENABLE(htim);
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	681a      	ldr	r2, [r3, #0]
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	f042 0201 	orr.w	r2, r2, #1
 8004e5c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e5e:	e008      	b.n	8004e72 <HAL_TIM_Base_Start+0xc2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	681a      	ldr	r2, [r3, #0]
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	f042 0201 	orr.w	r2, r2, #1
 8004e6e:	601a      	str	r2, [r3, #0]
 8004e70:	e000      	b.n	8004e74 <HAL_TIM_Base_Start+0xc4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e72:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004e74:	2300      	movs	r3, #0
}
 8004e76:	4618      	mov	r0, r3
 8004e78:	3714      	adds	r7, #20
 8004e7a:	46bd      	mov	sp, r7
 8004e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e80:	4770      	bx	lr
 8004e82:	bf00      	nop
 8004e84:	40010000 	.word	0x40010000
 8004e88:	40000400 	.word	0x40000400
 8004e8c:	40000800 	.word	0x40000800
 8004e90:	40000c00 	.word	0x40000c00
 8004e94:	40010400 	.word	0x40010400
 8004e98:	40001800 	.word	0x40001800
 8004e9c:	40014000 	.word	0x40014000
 8004ea0:	4000e000 	.word	0x4000e000
 8004ea4:	4000e400 	.word	0x4000e400
 8004ea8:	00010007 	.word	0x00010007

08004eac <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004eac:	b580      	push	{r7, lr}
 8004eae:	b082      	sub	sp, #8
 8004eb0:	af00      	add	r7, sp, #0
 8004eb2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d101      	bne.n	8004ebe <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004eba:	2301      	movs	r3, #1
 8004ebc:	e049      	b.n	8004f52 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004ec4:	b2db      	uxtb	r3, r3
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d106      	bne.n	8004ed8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	2200      	movs	r2, #0
 8004ece:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004ed2:	6878      	ldr	r0, [r7, #4]
 8004ed4:	f7fc fbcc 	bl	8001670 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	2202      	movs	r2, #2
 8004edc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681a      	ldr	r2, [r3, #0]
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	3304      	adds	r3, #4
 8004ee8:	4619      	mov	r1, r3
 8004eea:	4610      	mov	r0, r2
 8004eec:	f000 f94a 	bl	8005184 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	2201      	movs	r2, #1
 8004ef4:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	2201      	movs	r2, #1
 8004efc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	2201      	movs	r2, #1
 8004f04:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	2201      	movs	r2, #1
 8004f0c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	2201      	movs	r2, #1
 8004f14:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	2201      	movs	r2, #1
 8004f1c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	2201      	movs	r2, #1
 8004f24:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	2201      	movs	r2, #1
 8004f2c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	2201      	movs	r2, #1
 8004f34:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	2201      	movs	r2, #1
 8004f3c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	2201      	movs	r2, #1
 8004f44:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	2201      	movs	r2, #1
 8004f4c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004f50:	2300      	movs	r3, #0
}
 8004f52:	4618      	mov	r0, r3
 8004f54:	3708      	adds	r7, #8
 8004f56:	46bd      	mov	sp, r7
 8004f58:	bd80      	pop	{r7, pc}
	...

08004f5c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004f5c:	b580      	push	{r7, lr}
 8004f5e:	b086      	sub	sp, #24
 8004f60:	af00      	add	r7, sp, #0
 8004f62:	60f8      	str	r0, [r7, #12]
 8004f64:	60b9      	str	r1, [r7, #8]
 8004f66:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004f68:	2300      	movs	r3, #0
 8004f6a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004f72:	2b01      	cmp	r3, #1
 8004f74:	d101      	bne.n	8004f7a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004f76:	2302      	movs	r3, #2
 8004f78:	e0ff      	b.n	800517a <HAL_TIM_PWM_ConfigChannel+0x21e>
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	2201      	movs	r2, #1
 8004f7e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	2b14      	cmp	r3, #20
 8004f86:	f200 80f0 	bhi.w	800516a <HAL_TIM_PWM_ConfigChannel+0x20e>
 8004f8a:	a201      	add	r2, pc, #4	@ (adr r2, 8004f90 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004f8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f90:	08004fe5 	.word	0x08004fe5
 8004f94:	0800516b 	.word	0x0800516b
 8004f98:	0800516b 	.word	0x0800516b
 8004f9c:	0800516b 	.word	0x0800516b
 8004fa0:	08005025 	.word	0x08005025
 8004fa4:	0800516b 	.word	0x0800516b
 8004fa8:	0800516b 	.word	0x0800516b
 8004fac:	0800516b 	.word	0x0800516b
 8004fb0:	08005067 	.word	0x08005067
 8004fb4:	0800516b 	.word	0x0800516b
 8004fb8:	0800516b 	.word	0x0800516b
 8004fbc:	0800516b 	.word	0x0800516b
 8004fc0:	080050a7 	.word	0x080050a7
 8004fc4:	0800516b 	.word	0x0800516b
 8004fc8:	0800516b 	.word	0x0800516b
 8004fcc:	0800516b 	.word	0x0800516b
 8004fd0:	080050e9 	.word	0x080050e9
 8004fd4:	0800516b 	.word	0x0800516b
 8004fd8:	0800516b 	.word	0x0800516b
 8004fdc:	0800516b 	.word	0x0800516b
 8004fe0:	08005129 	.word	0x08005129
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	68b9      	ldr	r1, [r7, #8]
 8004fea:	4618      	mov	r0, r3
 8004fec:	f000 f97c 	bl	80052e8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	699a      	ldr	r2, [r3, #24]
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	f042 0208 	orr.w	r2, r2, #8
 8004ffe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	699a      	ldr	r2, [r3, #24]
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	f022 0204 	bic.w	r2, r2, #4
 800500e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	6999      	ldr	r1, [r3, #24]
 8005016:	68bb      	ldr	r3, [r7, #8]
 8005018:	691a      	ldr	r2, [r3, #16]
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	430a      	orrs	r2, r1
 8005020:	619a      	str	r2, [r3, #24]
      break;
 8005022:	e0a5      	b.n	8005170 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	68b9      	ldr	r1, [r7, #8]
 800502a:	4618      	mov	r0, r3
 800502c:	f000 f9ec 	bl	8005408 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	699a      	ldr	r2, [r3, #24]
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800503e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	699a      	ldr	r2, [r3, #24]
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800504e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	6999      	ldr	r1, [r3, #24]
 8005056:	68bb      	ldr	r3, [r7, #8]
 8005058:	691b      	ldr	r3, [r3, #16]
 800505a:	021a      	lsls	r2, r3, #8
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	430a      	orrs	r2, r1
 8005062:	619a      	str	r2, [r3, #24]
      break;
 8005064:	e084      	b.n	8005170 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	68b9      	ldr	r1, [r7, #8]
 800506c:	4618      	mov	r0, r3
 800506e:	f000 fa55 	bl	800551c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	69da      	ldr	r2, [r3, #28]
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	f042 0208 	orr.w	r2, r2, #8
 8005080:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	69da      	ldr	r2, [r3, #28]
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	f022 0204 	bic.w	r2, r2, #4
 8005090:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	69d9      	ldr	r1, [r3, #28]
 8005098:	68bb      	ldr	r3, [r7, #8]
 800509a:	691a      	ldr	r2, [r3, #16]
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	430a      	orrs	r2, r1
 80050a2:	61da      	str	r2, [r3, #28]
      break;
 80050a4:	e064      	b.n	8005170 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	68b9      	ldr	r1, [r7, #8]
 80050ac:	4618      	mov	r0, r3
 80050ae:	f000 fabd 	bl	800562c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	69da      	ldr	r2, [r3, #28]
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80050c0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	69da      	ldr	r2, [r3, #28]
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80050d0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	69d9      	ldr	r1, [r3, #28]
 80050d8:	68bb      	ldr	r3, [r7, #8]
 80050da:	691b      	ldr	r3, [r3, #16]
 80050dc:	021a      	lsls	r2, r3, #8
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	430a      	orrs	r2, r1
 80050e4:	61da      	str	r2, [r3, #28]
      break;
 80050e6:	e043      	b.n	8005170 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	68b9      	ldr	r1, [r7, #8]
 80050ee:	4618      	mov	r0, r3
 80050f0:	f000 fb06 	bl	8005700 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	f042 0208 	orr.w	r2, r2, #8
 8005102:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	f022 0204 	bic.w	r2, r2, #4
 8005112:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800511a:	68bb      	ldr	r3, [r7, #8]
 800511c:	691a      	ldr	r2, [r3, #16]
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	430a      	orrs	r2, r1
 8005124:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8005126:	e023      	b.n	8005170 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	68b9      	ldr	r1, [r7, #8]
 800512e:	4618      	mov	r0, r3
 8005130:	f000 fb4a 	bl	80057c8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005142:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005152:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800515a:	68bb      	ldr	r3, [r7, #8]
 800515c:	691b      	ldr	r3, [r3, #16]
 800515e:	021a      	lsls	r2, r3, #8
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	430a      	orrs	r2, r1
 8005166:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8005168:	e002      	b.n	8005170 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800516a:	2301      	movs	r3, #1
 800516c:	75fb      	strb	r3, [r7, #23]
      break;
 800516e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	2200      	movs	r2, #0
 8005174:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005178:	7dfb      	ldrb	r3, [r7, #23]
}
 800517a:	4618      	mov	r0, r3
 800517c:	3718      	adds	r7, #24
 800517e:	46bd      	mov	sp, r7
 8005180:	bd80      	pop	{r7, pc}
 8005182:	bf00      	nop

08005184 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005184:	b480      	push	{r7}
 8005186:	b085      	sub	sp, #20
 8005188:	af00      	add	r7, sp, #0
 800518a:	6078      	str	r0, [r7, #4]
 800518c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	4a4a      	ldr	r2, [pc, #296]	@ (80052c0 <TIM_Base_SetConfig+0x13c>)
 8005198:	4293      	cmp	r3, r2
 800519a:	d013      	beq.n	80051c4 <TIM_Base_SetConfig+0x40>
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80051a2:	d00f      	beq.n	80051c4 <TIM_Base_SetConfig+0x40>
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	4a47      	ldr	r2, [pc, #284]	@ (80052c4 <TIM_Base_SetConfig+0x140>)
 80051a8:	4293      	cmp	r3, r2
 80051aa:	d00b      	beq.n	80051c4 <TIM_Base_SetConfig+0x40>
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	4a46      	ldr	r2, [pc, #280]	@ (80052c8 <TIM_Base_SetConfig+0x144>)
 80051b0:	4293      	cmp	r3, r2
 80051b2:	d007      	beq.n	80051c4 <TIM_Base_SetConfig+0x40>
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	4a45      	ldr	r2, [pc, #276]	@ (80052cc <TIM_Base_SetConfig+0x148>)
 80051b8:	4293      	cmp	r3, r2
 80051ba:	d003      	beq.n	80051c4 <TIM_Base_SetConfig+0x40>
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	4a44      	ldr	r2, [pc, #272]	@ (80052d0 <TIM_Base_SetConfig+0x14c>)
 80051c0:	4293      	cmp	r3, r2
 80051c2:	d108      	bne.n	80051d6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80051ca:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80051cc:	683b      	ldr	r3, [r7, #0]
 80051ce:	685b      	ldr	r3, [r3, #4]
 80051d0:	68fa      	ldr	r2, [r7, #12]
 80051d2:	4313      	orrs	r3, r2
 80051d4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	4a39      	ldr	r2, [pc, #228]	@ (80052c0 <TIM_Base_SetConfig+0x13c>)
 80051da:	4293      	cmp	r3, r2
 80051dc:	d027      	beq.n	800522e <TIM_Base_SetConfig+0xaa>
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80051e4:	d023      	beq.n	800522e <TIM_Base_SetConfig+0xaa>
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	4a36      	ldr	r2, [pc, #216]	@ (80052c4 <TIM_Base_SetConfig+0x140>)
 80051ea:	4293      	cmp	r3, r2
 80051ec:	d01f      	beq.n	800522e <TIM_Base_SetConfig+0xaa>
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	4a35      	ldr	r2, [pc, #212]	@ (80052c8 <TIM_Base_SetConfig+0x144>)
 80051f2:	4293      	cmp	r3, r2
 80051f4:	d01b      	beq.n	800522e <TIM_Base_SetConfig+0xaa>
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	4a34      	ldr	r2, [pc, #208]	@ (80052cc <TIM_Base_SetConfig+0x148>)
 80051fa:	4293      	cmp	r3, r2
 80051fc:	d017      	beq.n	800522e <TIM_Base_SetConfig+0xaa>
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	4a33      	ldr	r2, [pc, #204]	@ (80052d0 <TIM_Base_SetConfig+0x14c>)
 8005202:	4293      	cmp	r3, r2
 8005204:	d013      	beq.n	800522e <TIM_Base_SetConfig+0xaa>
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	4a32      	ldr	r2, [pc, #200]	@ (80052d4 <TIM_Base_SetConfig+0x150>)
 800520a:	4293      	cmp	r3, r2
 800520c:	d00f      	beq.n	800522e <TIM_Base_SetConfig+0xaa>
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	4a31      	ldr	r2, [pc, #196]	@ (80052d8 <TIM_Base_SetConfig+0x154>)
 8005212:	4293      	cmp	r3, r2
 8005214:	d00b      	beq.n	800522e <TIM_Base_SetConfig+0xaa>
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	4a30      	ldr	r2, [pc, #192]	@ (80052dc <TIM_Base_SetConfig+0x158>)
 800521a:	4293      	cmp	r3, r2
 800521c:	d007      	beq.n	800522e <TIM_Base_SetConfig+0xaa>
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	4a2f      	ldr	r2, [pc, #188]	@ (80052e0 <TIM_Base_SetConfig+0x15c>)
 8005222:	4293      	cmp	r3, r2
 8005224:	d003      	beq.n	800522e <TIM_Base_SetConfig+0xaa>
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	4a2e      	ldr	r2, [pc, #184]	@ (80052e4 <TIM_Base_SetConfig+0x160>)
 800522a:	4293      	cmp	r3, r2
 800522c:	d108      	bne.n	8005240 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005234:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005236:	683b      	ldr	r3, [r7, #0]
 8005238:	68db      	ldr	r3, [r3, #12]
 800523a:	68fa      	ldr	r2, [r7, #12]
 800523c:	4313      	orrs	r3, r2
 800523e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005246:	683b      	ldr	r3, [r7, #0]
 8005248:	695b      	ldr	r3, [r3, #20]
 800524a:	4313      	orrs	r3, r2
 800524c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	68fa      	ldr	r2, [r7, #12]
 8005252:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005254:	683b      	ldr	r3, [r7, #0]
 8005256:	689a      	ldr	r2, [r3, #8]
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800525c:	683b      	ldr	r3, [r7, #0]
 800525e:	681a      	ldr	r2, [r3, #0]
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	4a16      	ldr	r2, [pc, #88]	@ (80052c0 <TIM_Base_SetConfig+0x13c>)
 8005268:	4293      	cmp	r3, r2
 800526a:	d00f      	beq.n	800528c <TIM_Base_SetConfig+0x108>
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	4a18      	ldr	r2, [pc, #96]	@ (80052d0 <TIM_Base_SetConfig+0x14c>)
 8005270:	4293      	cmp	r3, r2
 8005272:	d00b      	beq.n	800528c <TIM_Base_SetConfig+0x108>
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	4a17      	ldr	r2, [pc, #92]	@ (80052d4 <TIM_Base_SetConfig+0x150>)
 8005278:	4293      	cmp	r3, r2
 800527a:	d007      	beq.n	800528c <TIM_Base_SetConfig+0x108>
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	4a16      	ldr	r2, [pc, #88]	@ (80052d8 <TIM_Base_SetConfig+0x154>)
 8005280:	4293      	cmp	r3, r2
 8005282:	d003      	beq.n	800528c <TIM_Base_SetConfig+0x108>
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	4a15      	ldr	r2, [pc, #84]	@ (80052dc <TIM_Base_SetConfig+0x158>)
 8005288:	4293      	cmp	r3, r2
 800528a:	d103      	bne.n	8005294 <TIM_Base_SetConfig+0x110>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800528c:	683b      	ldr	r3, [r7, #0]
 800528e:	691a      	ldr	r2, [r3, #16]
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	2201      	movs	r2, #1
 8005298:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	691b      	ldr	r3, [r3, #16]
 800529e:	f003 0301 	and.w	r3, r3, #1
 80052a2:	2b01      	cmp	r3, #1
 80052a4:	d105      	bne.n	80052b2 <TIM_Base_SetConfig+0x12e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	691b      	ldr	r3, [r3, #16]
 80052aa:	f023 0201 	bic.w	r2, r3, #1
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	611a      	str	r2, [r3, #16]
  }
}
 80052b2:	bf00      	nop
 80052b4:	3714      	adds	r7, #20
 80052b6:	46bd      	mov	sp, r7
 80052b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052bc:	4770      	bx	lr
 80052be:	bf00      	nop
 80052c0:	40010000 	.word	0x40010000
 80052c4:	40000400 	.word	0x40000400
 80052c8:	40000800 	.word	0x40000800
 80052cc:	40000c00 	.word	0x40000c00
 80052d0:	40010400 	.word	0x40010400
 80052d4:	40014000 	.word	0x40014000
 80052d8:	40014400 	.word	0x40014400
 80052dc:	40014800 	.word	0x40014800
 80052e0:	4000e000 	.word	0x4000e000
 80052e4:	4000e400 	.word	0x4000e400

080052e8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80052e8:	b480      	push	{r7}
 80052ea:	b087      	sub	sp, #28
 80052ec:	af00      	add	r7, sp, #0
 80052ee:	6078      	str	r0, [r7, #4]
 80052f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	6a1b      	ldr	r3, [r3, #32]
 80052f6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	6a1b      	ldr	r3, [r3, #32]
 80052fc:	f023 0201 	bic.w	r2, r3, #1
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	685b      	ldr	r3, [r3, #4]
 8005308:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	699b      	ldr	r3, [r3, #24]
 800530e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005310:	68fa      	ldr	r2, [r7, #12]
 8005312:	4b37      	ldr	r3, [pc, #220]	@ (80053f0 <TIM_OC1_SetConfig+0x108>)
 8005314:	4013      	ands	r3, r2
 8005316:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	f023 0303 	bic.w	r3, r3, #3
 800531e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005320:	683b      	ldr	r3, [r7, #0]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	68fa      	ldr	r2, [r7, #12]
 8005326:	4313      	orrs	r3, r2
 8005328:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800532a:	697b      	ldr	r3, [r7, #20]
 800532c:	f023 0302 	bic.w	r3, r3, #2
 8005330:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005332:	683b      	ldr	r3, [r7, #0]
 8005334:	689b      	ldr	r3, [r3, #8]
 8005336:	697a      	ldr	r2, [r7, #20]
 8005338:	4313      	orrs	r3, r2
 800533a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	4a2d      	ldr	r2, [pc, #180]	@ (80053f4 <TIM_OC1_SetConfig+0x10c>)
 8005340:	4293      	cmp	r3, r2
 8005342:	d00f      	beq.n	8005364 <TIM_OC1_SetConfig+0x7c>
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	4a2c      	ldr	r2, [pc, #176]	@ (80053f8 <TIM_OC1_SetConfig+0x110>)
 8005348:	4293      	cmp	r3, r2
 800534a:	d00b      	beq.n	8005364 <TIM_OC1_SetConfig+0x7c>
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	4a2b      	ldr	r2, [pc, #172]	@ (80053fc <TIM_OC1_SetConfig+0x114>)
 8005350:	4293      	cmp	r3, r2
 8005352:	d007      	beq.n	8005364 <TIM_OC1_SetConfig+0x7c>
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	4a2a      	ldr	r2, [pc, #168]	@ (8005400 <TIM_OC1_SetConfig+0x118>)
 8005358:	4293      	cmp	r3, r2
 800535a:	d003      	beq.n	8005364 <TIM_OC1_SetConfig+0x7c>
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	4a29      	ldr	r2, [pc, #164]	@ (8005404 <TIM_OC1_SetConfig+0x11c>)
 8005360:	4293      	cmp	r3, r2
 8005362:	d10c      	bne.n	800537e <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005364:	697b      	ldr	r3, [r7, #20]
 8005366:	f023 0308 	bic.w	r3, r3, #8
 800536a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800536c:	683b      	ldr	r3, [r7, #0]
 800536e:	68db      	ldr	r3, [r3, #12]
 8005370:	697a      	ldr	r2, [r7, #20]
 8005372:	4313      	orrs	r3, r2
 8005374:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005376:	697b      	ldr	r3, [r7, #20]
 8005378:	f023 0304 	bic.w	r3, r3, #4
 800537c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	4a1c      	ldr	r2, [pc, #112]	@ (80053f4 <TIM_OC1_SetConfig+0x10c>)
 8005382:	4293      	cmp	r3, r2
 8005384:	d00f      	beq.n	80053a6 <TIM_OC1_SetConfig+0xbe>
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	4a1b      	ldr	r2, [pc, #108]	@ (80053f8 <TIM_OC1_SetConfig+0x110>)
 800538a:	4293      	cmp	r3, r2
 800538c:	d00b      	beq.n	80053a6 <TIM_OC1_SetConfig+0xbe>
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	4a1a      	ldr	r2, [pc, #104]	@ (80053fc <TIM_OC1_SetConfig+0x114>)
 8005392:	4293      	cmp	r3, r2
 8005394:	d007      	beq.n	80053a6 <TIM_OC1_SetConfig+0xbe>
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	4a19      	ldr	r2, [pc, #100]	@ (8005400 <TIM_OC1_SetConfig+0x118>)
 800539a:	4293      	cmp	r3, r2
 800539c:	d003      	beq.n	80053a6 <TIM_OC1_SetConfig+0xbe>
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	4a18      	ldr	r2, [pc, #96]	@ (8005404 <TIM_OC1_SetConfig+0x11c>)
 80053a2:	4293      	cmp	r3, r2
 80053a4:	d111      	bne.n	80053ca <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80053a6:	693b      	ldr	r3, [r7, #16]
 80053a8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80053ac:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80053ae:	693b      	ldr	r3, [r7, #16]
 80053b0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80053b4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80053b6:	683b      	ldr	r3, [r7, #0]
 80053b8:	695b      	ldr	r3, [r3, #20]
 80053ba:	693a      	ldr	r2, [r7, #16]
 80053bc:	4313      	orrs	r3, r2
 80053be:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80053c0:	683b      	ldr	r3, [r7, #0]
 80053c2:	699b      	ldr	r3, [r3, #24]
 80053c4:	693a      	ldr	r2, [r7, #16]
 80053c6:	4313      	orrs	r3, r2
 80053c8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	693a      	ldr	r2, [r7, #16]
 80053ce:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	68fa      	ldr	r2, [r7, #12]
 80053d4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80053d6:	683b      	ldr	r3, [r7, #0]
 80053d8:	685a      	ldr	r2, [r3, #4]
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	697a      	ldr	r2, [r7, #20]
 80053e2:	621a      	str	r2, [r3, #32]
}
 80053e4:	bf00      	nop
 80053e6:	371c      	adds	r7, #28
 80053e8:	46bd      	mov	sp, r7
 80053ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ee:	4770      	bx	lr
 80053f0:	fffeff8f 	.word	0xfffeff8f
 80053f4:	40010000 	.word	0x40010000
 80053f8:	40010400 	.word	0x40010400
 80053fc:	40014000 	.word	0x40014000
 8005400:	40014400 	.word	0x40014400
 8005404:	40014800 	.word	0x40014800

08005408 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005408:	b480      	push	{r7}
 800540a:	b087      	sub	sp, #28
 800540c:	af00      	add	r7, sp, #0
 800540e:	6078      	str	r0, [r7, #4]
 8005410:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	6a1b      	ldr	r3, [r3, #32]
 8005416:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	6a1b      	ldr	r3, [r3, #32]
 800541c:	f023 0210 	bic.w	r2, r3, #16
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	685b      	ldr	r3, [r3, #4]
 8005428:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	699b      	ldr	r3, [r3, #24]
 800542e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005430:	68fa      	ldr	r2, [r7, #12]
 8005432:	4b34      	ldr	r3, [pc, #208]	@ (8005504 <TIM_OC2_SetConfig+0xfc>)
 8005434:	4013      	ands	r3, r2
 8005436:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800543e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005440:	683b      	ldr	r3, [r7, #0]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	021b      	lsls	r3, r3, #8
 8005446:	68fa      	ldr	r2, [r7, #12]
 8005448:	4313      	orrs	r3, r2
 800544a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800544c:	697b      	ldr	r3, [r7, #20]
 800544e:	f023 0320 	bic.w	r3, r3, #32
 8005452:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005454:	683b      	ldr	r3, [r7, #0]
 8005456:	689b      	ldr	r3, [r3, #8]
 8005458:	011b      	lsls	r3, r3, #4
 800545a:	697a      	ldr	r2, [r7, #20]
 800545c:	4313      	orrs	r3, r2
 800545e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	4a29      	ldr	r2, [pc, #164]	@ (8005508 <TIM_OC2_SetConfig+0x100>)
 8005464:	4293      	cmp	r3, r2
 8005466:	d003      	beq.n	8005470 <TIM_OC2_SetConfig+0x68>
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	4a28      	ldr	r2, [pc, #160]	@ (800550c <TIM_OC2_SetConfig+0x104>)
 800546c:	4293      	cmp	r3, r2
 800546e:	d10d      	bne.n	800548c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005470:	697b      	ldr	r3, [r7, #20]
 8005472:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005476:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005478:	683b      	ldr	r3, [r7, #0]
 800547a:	68db      	ldr	r3, [r3, #12]
 800547c:	011b      	lsls	r3, r3, #4
 800547e:	697a      	ldr	r2, [r7, #20]
 8005480:	4313      	orrs	r3, r2
 8005482:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005484:	697b      	ldr	r3, [r7, #20]
 8005486:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800548a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	4a1e      	ldr	r2, [pc, #120]	@ (8005508 <TIM_OC2_SetConfig+0x100>)
 8005490:	4293      	cmp	r3, r2
 8005492:	d00f      	beq.n	80054b4 <TIM_OC2_SetConfig+0xac>
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	4a1d      	ldr	r2, [pc, #116]	@ (800550c <TIM_OC2_SetConfig+0x104>)
 8005498:	4293      	cmp	r3, r2
 800549a:	d00b      	beq.n	80054b4 <TIM_OC2_SetConfig+0xac>
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	4a1c      	ldr	r2, [pc, #112]	@ (8005510 <TIM_OC2_SetConfig+0x108>)
 80054a0:	4293      	cmp	r3, r2
 80054a2:	d007      	beq.n	80054b4 <TIM_OC2_SetConfig+0xac>
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	4a1b      	ldr	r2, [pc, #108]	@ (8005514 <TIM_OC2_SetConfig+0x10c>)
 80054a8:	4293      	cmp	r3, r2
 80054aa:	d003      	beq.n	80054b4 <TIM_OC2_SetConfig+0xac>
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	4a1a      	ldr	r2, [pc, #104]	@ (8005518 <TIM_OC2_SetConfig+0x110>)
 80054b0:	4293      	cmp	r3, r2
 80054b2:	d113      	bne.n	80054dc <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80054b4:	693b      	ldr	r3, [r7, #16]
 80054b6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80054ba:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80054bc:	693b      	ldr	r3, [r7, #16]
 80054be:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80054c2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80054c4:	683b      	ldr	r3, [r7, #0]
 80054c6:	695b      	ldr	r3, [r3, #20]
 80054c8:	009b      	lsls	r3, r3, #2
 80054ca:	693a      	ldr	r2, [r7, #16]
 80054cc:	4313      	orrs	r3, r2
 80054ce:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80054d0:	683b      	ldr	r3, [r7, #0]
 80054d2:	699b      	ldr	r3, [r3, #24]
 80054d4:	009b      	lsls	r3, r3, #2
 80054d6:	693a      	ldr	r2, [r7, #16]
 80054d8:	4313      	orrs	r3, r2
 80054da:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	693a      	ldr	r2, [r7, #16]
 80054e0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	68fa      	ldr	r2, [r7, #12]
 80054e6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80054e8:	683b      	ldr	r3, [r7, #0]
 80054ea:	685a      	ldr	r2, [r3, #4]
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	697a      	ldr	r2, [r7, #20]
 80054f4:	621a      	str	r2, [r3, #32]
}
 80054f6:	bf00      	nop
 80054f8:	371c      	adds	r7, #28
 80054fa:	46bd      	mov	sp, r7
 80054fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005500:	4770      	bx	lr
 8005502:	bf00      	nop
 8005504:	feff8fff 	.word	0xfeff8fff
 8005508:	40010000 	.word	0x40010000
 800550c:	40010400 	.word	0x40010400
 8005510:	40014000 	.word	0x40014000
 8005514:	40014400 	.word	0x40014400
 8005518:	40014800 	.word	0x40014800

0800551c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800551c:	b480      	push	{r7}
 800551e:	b087      	sub	sp, #28
 8005520:	af00      	add	r7, sp, #0
 8005522:	6078      	str	r0, [r7, #4]
 8005524:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	6a1b      	ldr	r3, [r3, #32]
 800552a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	6a1b      	ldr	r3, [r3, #32]
 8005530:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	685b      	ldr	r3, [r3, #4]
 800553c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	69db      	ldr	r3, [r3, #28]
 8005542:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005544:	68fa      	ldr	r2, [r7, #12]
 8005546:	4b33      	ldr	r3, [pc, #204]	@ (8005614 <TIM_OC3_SetConfig+0xf8>)
 8005548:	4013      	ands	r3, r2
 800554a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	f023 0303 	bic.w	r3, r3, #3
 8005552:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005554:	683b      	ldr	r3, [r7, #0]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	68fa      	ldr	r2, [r7, #12]
 800555a:	4313      	orrs	r3, r2
 800555c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800555e:	697b      	ldr	r3, [r7, #20]
 8005560:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005564:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005566:	683b      	ldr	r3, [r7, #0]
 8005568:	689b      	ldr	r3, [r3, #8]
 800556a:	021b      	lsls	r3, r3, #8
 800556c:	697a      	ldr	r2, [r7, #20]
 800556e:	4313      	orrs	r3, r2
 8005570:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	4a28      	ldr	r2, [pc, #160]	@ (8005618 <TIM_OC3_SetConfig+0xfc>)
 8005576:	4293      	cmp	r3, r2
 8005578:	d003      	beq.n	8005582 <TIM_OC3_SetConfig+0x66>
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	4a27      	ldr	r2, [pc, #156]	@ (800561c <TIM_OC3_SetConfig+0x100>)
 800557e:	4293      	cmp	r3, r2
 8005580:	d10d      	bne.n	800559e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005582:	697b      	ldr	r3, [r7, #20]
 8005584:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005588:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800558a:	683b      	ldr	r3, [r7, #0]
 800558c:	68db      	ldr	r3, [r3, #12]
 800558e:	021b      	lsls	r3, r3, #8
 8005590:	697a      	ldr	r2, [r7, #20]
 8005592:	4313      	orrs	r3, r2
 8005594:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005596:	697b      	ldr	r3, [r7, #20]
 8005598:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800559c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	4a1d      	ldr	r2, [pc, #116]	@ (8005618 <TIM_OC3_SetConfig+0xfc>)
 80055a2:	4293      	cmp	r3, r2
 80055a4:	d00f      	beq.n	80055c6 <TIM_OC3_SetConfig+0xaa>
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	4a1c      	ldr	r2, [pc, #112]	@ (800561c <TIM_OC3_SetConfig+0x100>)
 80055aa:	4293      	cmp	r3, r2
 80055ac:	d00b      	beq.n	80055c6 <TIM_OC3_SetConfig+0xaa>
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	4a1b      	ldr	r2, [pc, #108]	@ (8005620 <TIM_OC3_SetConfig+0x104>)
 80055b2:	4293      	cmp	r3, r2
 80055b4:	d007      	beq.n	80055c6 <TIM_OC3_SetConfig+0xaa>
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	4a1a      	ldr	r2, [pc, #104]	@ (8005624 <TIM_OC3_SetConfig+0x108>)
 80055ba:	4293      	cmp	r3, r2
 80055bc:	d003      	beq.n	80055c6 <TIM_OC3_SetConfig+0xaa>
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	4a19      	ldr	r2, [pc, #100]	@ (8005628 <TIM_OC3_SetConfig+0x10c>)
 80055c2:	4293      	cmp	r3, r2
 80055c4:	d113      	bne.n	80055ee <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80055c6:	693b      	ldr	r3, [r7, #16]
 80055c8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80055cc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80055ce:	693b      	ldr	r3, [r7, #16]
 80055d0:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80055d4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80055d6:	683b      	ldr	r3, [r7, #0]
 80055d8:	695b      	ldr	r3, [r3, #20]
 80055da:	011b      	lsls	r3, r3, #4
 80055dc:	693a      	ldr	r2, [r7, #16]
 80055de:	4313      	orrs	r3, r2
 80055e0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80055e2:	683b      	ldr	r3, [r7, #0]
 80055e4:	699b      	ldr	r3, [r3, #24]
 80055e6:	011b      	lsls	r3, r3, #4
 80055e8:	693a      	ldr	r2, [r7, #16]
 80055ea:	4313      	orrs	r3, r2
 80055ec:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	693a      	ldr	r2, [r7, #16]
 80055f2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	68fa      	ldr	r2, [r7, #12]
 80055f8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80055fa:	683b      	ldr	r3, [r7, #0]
 80055fc:	685a      	ldr	r2, [r3, #4]
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	697a      	ldr	r2, [r7, #20]
 8005606:	621a      	str	r2, [r3, #32]
}
 8005608:	bf00      	nop
 800560a:	371c      	adds	r7, #28
 800560c:	46bd      	mov	sp, r7
 800560e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005612:	4770      	bx	lr
 8005614:	fffeff8f 	.word	0xfffeff8f
 8005618:	40010000 	.word	0x40010000
 800561c:	40010400 	.word	0x40010400
 8005620:	40014000 	.word	0x40014000
 8005624:	40014400 	.word	0x40014400
 8005628:	40014800 	.word	0x40014800

0800562c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800562c:	b480      	push	{r7}
 800562e:	b087      	sub	sp, #28
 8005630:	af00      	add	r7, sp, #0
 8005632:	6078      	str	r0, [r7, #4]
 8005634:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	6a1b      	ldr	r3, [r3, #32]
 800563a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	6a1b      	ldr	r3, [r3, #32]
 8005640:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	685b      	ldr	r3, [r3, #4]
 800564c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	69db      	ldr	r3, [r3, #28]
 8005652:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005654:	68fa      	ldr	r2, [r7, #12]
 8005656:	4b24      	ldr	r3, [pc, #144]	@ (80056e8 <TIM_OC4_SetConfig+0xbc>)
 8005658:	4013      	ands	r3, r2
 800565a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005662:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005664:	683b      	ldr	r3, [r7, #0]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	021b      	lsls	r3, r3, #8
 800566a:	68fa      	ldr	r2, [r7, #12]
 800566c:	4313      	orrs	r3, r2
 800566e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005670:	693b      	ldr	r3, [r7, #16]
 8005672:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005676:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005678:	683b      	ldr	r3, [r7, #0]
 800567a:	689b      	ldr	r3, [r3, #8]
 800567c:	031b      	lsls	r3, r3, #12
 800567e:	693a      	ldr	r2, [r7, #16]
 8005680:	4313      	orrs	r3, r2
 8005682:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	4a19      	ldr	r2, [pc, #100]	@ (80056ec <TIM_OC4_SetConfig+0xc0>)
 8005688:	4293      	cmp	r3, r2
 800568a:	d00f      	beq.n	80056ac <TIM_OC4_SetConfig+0x80>
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	4a18      	ldr	r2, [pc, #96]	@ (80056f0 <TIM_OC4_SetConfig+0xc4>)
 8005690:	4293      	cmp	r3, r2
 8005692:	d00b      	beq.n	80056ac <TIM_OC4_SetConfig+0x80>
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	4a17      	ldr	r2, [pc, #92]	@ (80056f4 <TIM_OC4_SetConfig+0xc8>)
 8005698:	4293      	cmp	r3, r2
 800569a:	d007      	beq.n	80056ac <TIM_OC4_SetConfig+0x80>
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	4a16      	ldr	r2, [pc, #88]	@ (80056f8 <TIM_OC4_SetConfig+0xcc>)
 80056a0:	4293      	cmp	r3, r2
 80056a2:	d003      	beq.n	80056ac <TIM_OC4_SetConfig+0x80>
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	4a15      	ldr	r2, [pc, #84]	@ (80056fc <TIM_OC4_SetConfig+0xd0>)
 80056a8:	4293      	cmp	r3, r2
 80056aa:	d109      	bne.n	80056c0 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80056ac:	697b      	ldr	r3, [r7, #20]
 80056ae:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80056b2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80056b4:	683b      	ldr	r3, [r7, #0]
 80056b6:	695b      	ldr	r3, [r3, #20]
 80056b8:	019b      	lsls	r3, r3, #6
 80056ba:	697a      	ldr	r2, [r7, #20]
 80056bc:	4313      	orrs	r3, r2
 80056be:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	697a      	ldr	r2, [r7, #20]
 80056c4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	68fa      	ldr	r2, [r7, #12]
 80056ca:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80056cc:	683b      	ldr	r3, [r7, #0]
 80056ce:	685a      	ldr	r2, [r3, #4]
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	693a      	ldr	r2, [r7, #16]
 80056d8:	621a      	str	r2, [r3, #32]
}
 80056da:	bf00      	nop
 80056dc:	371c      	adds	r7, #28
 80056de:	46bd      	mov	sp, r7
 80056e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e4:	4770      	bx	lr
 80056e6:	bf00      	nop
 80056e8:	feff8fff 	.word	0xfeff8fff
 80056ec:	40010000 	.word	0x40010000
 80056f0:	40010400 	.word	0x40010400
 80056f4:	40014000 	.word	0x40014000
 80056f8:	40014400 	.word	0x40014400
 80056fc:	40014800 	.word	0x40014800

08005700 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005700:	b480      	push	{r7}
 8005702:	b087      	sub	sp, #28
 8005704:	af00      	add	r7, sp, #0
 8005706:	6078      	str	r0, [r7, #4]
 8005708:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	6a1b      	ldr	r3, [r3, #32]
 800570e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	6a1b      	ldr	r3, [r3, #32]
 8005714:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	685b      	ldr	r3, [r3, #4]
 8005720:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005726:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005728:	68fa      	ldr	r2, [r7, #12]
 800572a:	4b21      	ldr	r3, [pc, #132]	@ (80057b0 <TIM_OC5_SetConfig+0xb0>)
 800572c:	4013      	ands	r3, r2
 800572e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005730:	683b      	ldr	r3, [r7, #0]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	68fa      	ldr	r2, [r7, #12]
 8005736:	4313      	orrs	r3, r2
 8005738:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800573a:	693b      	ldr	r3, [r7, #16]
 800573c:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8005740:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005742:	683b      	ldr	r3, [r7, #0]
 8005744:	689b      	ldr	r3, [r3, #8]
 8005746:	041b      	lsls	r3, r3, #16
 8005748:	693a      	ldr	r2, [r7, #16]
 800574a:	4313      	orrs	r3, r2
 800574c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	4a18      	ldr	r2, [pc, #96]	@ (80057b4 <TIM_OC5_SetConfig+0xb4>)
 8005752:	4293      	cmp	r3, r2
 8005754:	d00f      	beq.n	8005776 <TIM_OC5_SetConfig+0x76>
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	4a17      	ldr	r2, [pc, #92]	@ (80057b8 <TIM_OC5_SetConfig+0xb8>)
 800575a:	4293      	cmp	r3, r2
 800575c:	d00b      	beq.n	8005776 <TIM_OC5_SetConfig+0x76>
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	4a16      	ldr	r2, [pc, #88]	@ (80057bc <TIM_OC5_SetConfig+0xbc>)
 8005762:	4293      	cmp	r3, r2
 8005764:	d007      	beq.n	8005776 <TIM_OC5_SetConfig+0x76>
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	4a15      	ldr	r2, [pc, #84]	@ (80057c0 <TIM_OC5_SetConfig+0xc0>)
 800576a:	4293      	cmp	r3, r2
 800576c:	d003      	beq.n	8005776 <TIM_OC5_SetConfig+0x76>
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	4a14      	ldr	r2, [pc, #80]	@ (80057c4 <TIM_OC5_SetConfig+0xc4>)
 8005772:	4293      	cmp	r3, r2
 8005774:	d109      	bne.n	800578a <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005776:	697b      	ldr	r3, [r7, #20]
 8005778:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800577c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800577e:	683b      	ldr	r3, [r7, #0]
 8005780:	695b      	ldr	r3, [r3, #20]
 8005782:	021b      	lsls	r3, r3, #8
 8005784:	697a      	ldr	r2, [r7, #20]
 8005786:	4313      	orrs	r3, r2
 8005788:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	697a      	ldr	r2, [r7, #20]
 800578e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	68fa      	ldr	r2, [r7, #12]
 8005794:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005796:	683b      	ldr	r3, [r7, #0]
 8005798:	685a      	ldr	r2, [r3, #4]
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	693a      	ldr	r2, [r7, #16]
 80057a2:	621a      	str	r2, [r3, #32]
}
 80057a4:	bf00      	nop
 80057a6:	371c      	adds	r7, #28
 80057a8:	46bd      	mov	sp, r7
 80057aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ae:	4770      	bx	lr
 80057b0:	fffeff8f 	.word	0xfffeff8f
 80057b4:	40010000 	.word	0x40010000
 80057b8:	40010400 	.word	0x40010400
 80057bc:	40014000 	.word	0x40014000
 80057c0:	40014400 	.word	0x40014400
 80057c4:	40014800 	.word	0x40014800

080057c8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80057c8:	b480      	push	{r7}
 80057ca:	b087      	sub	sp, #28
 80057cc:	af00      	add	r7, sp, #0
 80057ce:	6078      	str	r0, [r7, #4]
 80057d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	6a1b      	ldr	r3, [r3, #32]
 80057d6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	6a1b      	ldr	r3, [r3, #32]
 80057dc:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	685b      	ldr	r3, [r3, #4]
 80057e8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80057ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80057f0:	68fa      	ldr	r2, [r7, #12]
 80057f2:	4b22      	ldr	r3, [pc, #136]	@ (800587c <TIM_OC6_SetConfig+0xb4>)
 80057f4:	4013      	ands	r3, r2
 80057f6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80057f8:	683b      	ldr	r3, [r7, #0]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	021b      	lsls	r3, r3, #8
 80057fe:	68fa      	ldr	r2, [r7, #12]
 8005800:	4313      	orrs	r3, r2
 8005802:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005804:	693b      	ldr	r3, [r7, #16]
 8005806:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800580a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800580c:	683b      	ldr	r3, [r7, #0]
 800580e:	689b      	ldr	r3, [r3, #8]
 8005810:	051b      	lsls	r3, r3, #20
 8005812:	693a      	ldr	r2, [r7, #16]
 8005814:	4313      	orrs	r3, r2
 8005816:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	4a19      	ldr	r2, [pc, #100]	@ (8005880 <TIM_OC6_SetConfig+0xb8>)
 800581c:	4293      	cmp	r3, r2
 800581e:	d00f      	beq.n	8005840 <TIM_OC6_SetConfig+0x78>
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	4a18      	ldr	r2, [pc, #96]	@ (8005884 <TIM_OC6_SetConfig+0xbc>)
 8005824:	4293      	cmp	r3, r2
 8005826:	d00b      	beq.n	8005840 <TIM_OC6_SetConfig+0x78>
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	4a17      	ldr	r2, [pc, #92]	@ (8005888 <TIM_OC6_SetConfig+0xc0>)
 800582c:	4293      	cmp	r3, r2
 800582e:	d007      	beq.n	8005840 <TIM_OC6_SetConfig+0x78>
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	4a16      	ldr	r2, [pc, #88]	@ (800588c <TIM_OC6_SetConfig+0xc4>)
 8005834:	4293      	cmp	r3, r2
 8005836:	d003      	beq.n	8005840 <TIM_OC6_SetConfig+0x78>
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	4a15      	ldr	r2, [pc, #84]	@ (8005890 <TIM_OC6_SetConfig+0xc8>)
 800583c:	4293      	cmp	r3, r2
 800583e:	d109      	bne.n	8005854 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005840:	697b      	ldr	r3, [r7, #20]
 8005842:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005846:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005848:	683b      	ldr	r3, [r7, #0]
 800584a:	695b      	ldr	r3, [r3, #20]
 800584c:	029b      	lsls	r3, r3, #10
 800584e:	697a      	ldr	r2, [r7, #20]
 8005850:	4313      	orrs	r3, r2
 8005852:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	697a      	ldr	r2, [r7, #20]
 8005858:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	68fa      	ldr	r2, [r7, #12]
 800585e:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005860:	683b      	ldr	r3, [r7, #0]
 8005862:	685a      	ldr	r2, [r3, #4]
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	693a      	ldr	r2, [r7, #16]
 800586c:	621a      	str	r2, [r3, #32]
}
 800586e:	bf00      	nop
 8005870:	371c      	adds	r7, #28
 8005872:	46bd      	mov	sp, r7
 8005874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005878:	4770      	bx	lr
 800587a:	bf00      	nop
 800587c:	feff8fff 	.word	0xfeff8fff
 8005880:	40010000 	.word	0x40010000
 8005884:	40010400 	.word	0x40010400
 8005888:	40014000 	.word	0x40014000
 800588c:	40014400 	.word	0x40014400
 8005890:	40014800 	.word	0x40014800

08005894 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005894:	b480      	push	{r7}
 8005896:	b085      	sub	sp, #20
 8005898:	af00      	add	r7, sp, #0
 800589a:	6078      	str	r0, [r7, #4]
 800589c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80058a4:	2b01      	cmp	r3, #1
 80058a6:	d101      	bne.n	80058ac <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80058a8:	2302      	movs	r3, #2
 80058aa:	e077      	b.n	800599c <HAL_TIMEx_MasterConfigSynchronization+0x108>
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	2201      	movs	r2, #1
 80058b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	2202      	movs	r2, #2
 80058b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	685b      	ldr	r3, [r3, #4]
 80058c2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	689b      	ldr	r3, [r3, #8]
 80058ca:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	4a35      	ldr	r2, [pc, #212]	@ (80059a8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80058d2:	4293      	cmp	r3, r2
 80058d4:	d004      	beq.n	80058e0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	4a34      	ldr	r2, [pc, #208]	@ (80059ac <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80058dc:	4293      	cmp	r3, r2
 80058de:	d108      	bne.n	80058f2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80058e6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80058e8:	683b      	ldr	r3, [r7, #0]
 80058ea:	685b      	ldr	r3, [r3, #4]
 80058ec:	68fa      	ldr	r2, [r7, #12]
 80058ee:	4313      	orrs	r3, r2
 80058f0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80058f8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80058fa:	683b      	ldr	r3, [r7, #0]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	68fa      	ldr	r2, [r7, #12]
 8005900:	4313      	orrs	r3, r2
 8005902:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	68fa      	ldr	r2, [r7, #12]
 800590a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	4a25      	ldr	r2, [pc, #148]	@ (80059a8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8005912:	4293      	cmp	r3, r2
 8005914:	d02c      	beq.n	8005970 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800591e:	d027      	beq.n	8005970 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	4a22      	ldr	r2, [pc, #136]	@ (80059b0 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8005926:	4293      	cmp	r3, r2
 8005928:	d022      	beq.n	8005970 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	4a21      	ldr	r2, [pc, #132]	@ (80059b4 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8005930:	4293      	cmp	r3, r2
 8005932:	d01d      	beq.n	8005970 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	4a1f      	ldr	r2, [pc, #124]	@ (80059b8 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800593a:	4293      	cmp	r3, r2
 800593c:	d018      	beq.n	8005970 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	4a1a      	ldr	r2, [pc, #104]	@ (80059ac <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8005944:	4293      	cmp	r3, r2
 8005946:	d013      	beq.n	8005970 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	4a1b      	ldr	r2, [pc, #108]	@ (80059bc <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800594e:	4293      	cmp	r3, r2
 8005950:	d00e      	beq.n	8005970 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	4a1a      	ldr	r2, [pc, #104]	@ (80059c0 <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
 8005958:	4293      	cmp	r3, r2
 800595a:	d009      	beq.n	8005970 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	4a18      	ldr	r2, [pc, #96]	@ (80059c4 <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 8005962:	4293      	cmp	r3, r2
 8005964:	d004      	beq.n	8005970 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	4a17      	ldr	r2, [pc, #92]	@ (80059c8 <HAL_TIMEx_MasterConfigSynchronization+0x134>)
 800596c:	4293      	cmp	r3, r2
 800596e:	d10c      	bne.n	800598a <HAL_TIMEx_MasterConfigSynchronization+0xf6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005970:	68bb      	ldr	r3, [r7, #8]
 8005972:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005976:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005978:	683b      	ldr	r3, [r7, #0]
 800597a:	689b      	ldr	r3, [r3, #8]
 800597c:	68ba      	ldr	r2, [r7, #8]
 800597e:	4313      	orrs	r3, r2
 8005980:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	68ba      	ldr	r2, [r7, #8]
 8005988:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	2201      	movs	r2, #1
 800598e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	2200      	movs	r2, #0
 8005996:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800599a:	2300      	movs	r3, #0
}
 800599c:	4618      	mov	r0, r3
 800599e:	3714      	adds	r7, #20
 80059a0:	46bd      	mov	sp, r7
 80059a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059a6:	4770      	bx	lr
 80059a8:	40010000 	.word	0x40010000
 80059ac:	40010400 	.word	0x40010400
 80059b0:	40000400 	.word	0x40000400
 80059b4:	40000800 	.word	0x40000800
 80059b8:	40000c00 	.word	0x40000c00
 80059bc:	40001800 	.word	0x40001800
 80059c0:	40014000 	.word	0x40014000
 80059c4:	4000e000 	.word	0x4000e000
 80059c8:	4000e400 	.word	0x4000e400

080059cc <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80059cc:	b480      	push	{r7}
 80059ce:	b085      	sub	sp, #20
 80059d0:	af00      	add	r7, sp, #0
 80059d2:	6078      	str	r0, [r7, #4]
 80059d4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80059d6:	2300      	movs	r3, #0
 80059d8:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));
#endif /* TIM_BDTR_BKBID */

  /* Check input state */
  __HAL_LOCK(htim);
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80059e0:	2b01      	cmp	r3, #1
 80059e2:	d101      	bne.n	80059e8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80059e4:	2302      	movs	r3, #2
 80059e6:	e073      	b.n	8005ad0 <HAL_TIMEx_ConfigBreakDeadTime+0x104>
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	2201      	movs	r2, #1
 80059ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80059f6:	683b      	ldr	r3, [r7, #0]
 80059f8:	68db      	ldr	r3, [r3, #12]
 80059fa:	4313      	orrs	r3, r2
 80059fc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005a04:	683b      	ldr	r3, [r7, #0]
 8005a06:	689b      	ldr	r3, [r3, #8]
 8005a08:	4313      	orrs	r3, r2
 8005a0a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8005a12:	683b      	ldr	r3, [r7, #0]
 8005a14:	685b      	ldr	r3, [r3, #4]
 8005a16:	4313      	orrs	r3, r2
 8005a18:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8005a20:	683b      	ldr	r3, [r7, #0]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	4313      	orrs	r3, r2
 8005a26:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005a2e:	683b      	ldr	r3, [r7, #0]
 8005a30:	691b      	ldr	r3, [r3, #16]
 8005a32:	4313      	orrs	r3, r2
 8005a34:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8005a3c:	683b      	ldr	r3, [r7, #0]
 8005a3e:	695b      	ldr	r3, [r3, #20]
 8005a40:	4313      	orrs	r3, r2
 8005a42:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8005a4a:	683b      	ldr	r3, [r7, #0]
 8005a4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a4e:	4313      	orrs	r3, r2
 8005a50:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8005a58:	683b      	ldr	r3, [r7, #0]
 8005a5a:	699b      	ldr	r3, [r3, #24]
 8005a5c:	041b      	lsls	r3, r3, #16
 8005a5e:	4313      	orrs	r3, r2
 8005a60:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8005a68:	683b      	ldr	r3, [r7, #0]
 8005a6a:	69db      	ldr	r3, [r3, #28]
 8005a6c:	4313      	orrs	r3, r2
 8005a6e:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKBID */

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	4a19      	ldr	r2, [pc, #100]	@ (8005adc <HAL_TIMEx_ConfigBreakDeadTime+0x110>)
 8005a76:	4293      	cmp	r3, r2
 8005a78:	d004      	beq.n	8005a84 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	4a18      	ldr	r2, [pc, #96]	@ (8005ae0 <HAL_TIMEx_ConfigBreakDeadTime+0x114>)
 8005a80:	4293      	cmp	r3, r2
 8005a82:	d11c      	bne.n	8005abe <HAL_TIMEx_ConfigBreakDeadTime+0xf2>
#if defined(TIM_BDTR_BKBID)
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));
#endif /* TIM_BDTR_BKBID */

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8005a8a:	683b      	ldr	r3, [r7, #0]
 8005a8c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a8e:	051b      	lsls	r3, r3, #20
 8005a90:	4313      	orrs	r3, r2
 8005a92:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8005a9a:	683b      	ldr	r3, [r7, #0]
 8005a9c:	6a1b      	ldr	r3, [r3, #32]
 8005a9e:	4313      	orrs	r3, r2
 8005aa0:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8005aa8:	683b      	ldr	r3, [r7, #0]
 8005aaa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005aac:	4313      	orrs	r3, r2
 8005aae:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8005ab6:	683b      	ldr	r3, [r7, #0]
 8005ab8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005aba:	4313      	orrs	r3, r2
 8005abc:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	68fa      	ldr	r2, [r7, #12]
 8005ac4:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	2200      	movs	r2, #0
 8005aca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005ace:	2300      	movs	r3, #0
}
 8005ad0:	4618      	mov	r0, r3
 8005ad2:	3714      	adds	r7, #20
 8005ad4:	46bd      	mov	sp, r7
 8005ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ada:	4770      	bx	lr
 8005adc:	40010000 	.word	0x40010000
 8005ae0:	40010400 	.word	0x40010400

08005ae4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005ae4:	b580      	push	{r7, lr}
 8005ae6:	b082      	sub	sp, #8
 8005ae8:	af00      	add	r7, sp, #0
 8005aea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d101      	bne.n	8005af6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005af2:	2301      	movs	r3, #1
 8005af4:	e042      	b.n	8005b7c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d106      	bne.n	8005b0e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	2200      	movs	r2, #0
 8005b04:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005b08:	6878      	ldr	r0, [r7, #4]
 8005b0a:	f7fb feb1 	bl	8001870 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	2224      	movs	r2, #36	@ 0x24
 8005b12:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	681a      	ldr	r2, [r3, #0]
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	f022 0201 	bic.w	r2, r2, #1
 8005b24:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d002      	beq.n	8005b34 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8005b2e:	6878      	ldr	r0, [r7, #4]
 8005b30:	f000 ff22 	bl	8006978 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005b34:	6878      	ldr	r0, [r7, #4]
 8005b36:	f000 f8b3 	bl	8005ca0 <UART_SetConfig>
 8005b3a:	4603      	mov	r3, r0
 8005b3c:	2b01      	cmp	r3, #1
 8005b3e:	d101      	bne.n	8005b44 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8005b40:	2301      	movs	r3, #1
 8005b42:	e01b      	b.n	8005b7c <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	685a      	ldr	r2, [r3, #4]
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005b52:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	689a      	ldr	r2, [r3, #8]
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005b62:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	681a      	ldr	r2, [r3, #0]
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	f042 0201 	orr.w	r2, r2, #1
 8005b72:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005b74:	6878      	ldr	r0, [r7, #4]
 8005b76:	f000 ffa1 	bl	8006abc <UART_CheckIdleState>
 8005b7a:	4603      	mov	r3, r0
}
 8005b7c:	4618      	mov	r0, r3
 8005b7e:	3708      	adds	r7, #8
 8005b80:	46bd      	mov	sp, r7
 8005b82:	bd80      	pop	{r7, pc}

08005b84 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005b84:	b580      	push	{r7, lr}
 8005b86:	b08a      	sub	sp, #40	@ 0x28
 8005b88:	af02      	add	r7, sp, #8
 8005b8a:	60f8      	str	r0, [r7, #12]
 8005b8c:	60b9      	str	r1, [r7, #8]
 8005b8e:	603b      	str	r3, [r7, #0]
 8005b90:	4613      	mov	r3, r2
 8005b92:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005b9a:	2b20      	cmp	r3, #32
 8005b9c:	d17b      	bne.n	8005c96 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8005b9e:	68bb      	ldr	r3, [r7, #8]
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d002      	beq.n	8005baa <HAL_UART_Transmit+0x26>
 8005ba4:	88fb      	ldrh	r3, [r7, #6]
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d101      	bne.n	8005bae <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8005baa:	2301      	movs	r3, #1
 8005bac:	e074      	b.n	8005c98 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	2200      	movs	r2, #0
 8005bb2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	2221      	movs	r2, #33	@ 0x21
 8005bba:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005bbe:	f7fc f89f 	bl	8001d00 <HAL_GetTick>
 8005bc2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	88fa      	ldrh	r2, [r7, #6]
 8005bc8:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	88fa      	ldrh	r2, [r7, #6]
 8005bd0:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	689b      	ldr	r3, [r3, #8]
 8005bd8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005bdc:	d108      	bne.n	8005bf0 <HAL_UART_Transmit+0x6c>
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	691b      	ldr	r3, [r3, #16]
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d104      	bne.n	8005bf0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8005be6:	2300      	movs	r3, #0
 8005be8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005bea:	68bb      	ldr	r3, [r7, #8]
 8005bec:	61bb      	str	r3, [r7, #24]
 8005bee:	e003      	b.n	8005bf8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005bf0:	68bb      	ldr	r3, [r7, #8]
 8005bf2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005bf4:	2300      	movs	r3, #0
 8005bf6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005bf8:	e030      	b.n	8005c5c <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005bfa:	683b      	ldr	r3, [r7, #0]
 8005bfc:	9300      	str	r3, [sp, #0]
 8005bfe:	697b      	ldr	r3, [r7, #20]
 8005c00:	2200      	movs	r2, #0
 8005c02:	2180      	movs	r1, #128	@ 0x80
 8005c04:	68f8      	ldr	r0, [r7, #12]
 8005c06:	f001 f803 	bl	8006c10 <UART_WaitOnFlagUntilTimeout>
 8005c0a:	4603      	mov	r3, r0
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d005      	beq.n	8005c1c <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	2220      	movs	r2, #32
 8005c14:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8005c18:	2303      	movs	r3, #3
 8005c1a:	e03d      	b.n	8005c98 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8005c1c:	69fb      	ldr	r3, [r7, #28]
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d10b      	bne.n	8005c3a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005c22:	69bb      	ldr	r3, [r7, #24]
 8005c24:	881b      	ldrh	r3, [r3, #0]
 8005c26:	461a      	mov	r2, r3
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005c30:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8005c32:	69bb      	ldr	r3, [r7, #24]
 8005c34:	3302      	adds	r3, #2
 8005c36:	61bb      	str	r3, [r7, #24]
 8005c38:	e007      	b.n	8005c4a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005c3a:	69fb      	ldr	r3, [r7, #28]
 8005c3c:	781a      	ldrb	r2, [r3, #0]
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8005c44:	69fb      	ldr	r3, [r7, #28]
 8005c46:	3301      	adds	r3, #1
 8005c48:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8005c50:	b29b      	uxth	r3, r3
 8005c52:	3b01      	subs	r3, #1
 8005c54:	b29a      	uxth	r2, r3
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8005c62:	b29b      	uxth	r3, r3
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d1c8      	bne.n	8005bfa <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005c68:	683b      	ldr	r3, [r7, #0]
 8005c6a:	9300      	str	r3, [sp, #0]
 8005c6c:	697b      	ldr	r3, [r7, #20]
 8005c6e:	2200      	movs	r2, #0
 8005c70:	2140      	movs	r1, #64	@ 0x40
 8005c72:	68f8      	ldr	r0, [r7, #12]
 8005c74:	f000 ffcc 	bl	8006c10 <UART_WaitOnFlagUntilTimeout>
 8005c78:	4603      	mov	r3, r0
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d005      	beq.n	8005c8a <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	2220      	movs	r2, #32
 8005c82:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8005c86:	2303      	movs	r3, #3
 8005c88:	e006      	b.n	8005c98 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	2220      	movs	r2, #32
 8005c8e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8005c92:	2300      	movs	r3, #0
 8005c94:	e000      	b.n	8005c98 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8005c96:	2302      	movs	r3, #2
  }
}
 8005c98:	4618      	mov	r0, r3
 8005c9a:	3720      	adds	r7, #32
 8005c9c:	46bd      	mov	sp, r7
 8005c9e:	bd80      	pop	{r7, pc}

08005ca0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005ca0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005ca4:	b092      	sub	sp, #72	@ 0x48
 8005ca6:	af00      	add	r7, sp, #0
 8005ca8:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005caa:	2300      	movs	r3, #0
 8005cac:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005cb0:	697b      	ldr	r3, [r7, #20]
 8005cb2:	689a      	ldr	r2, [r3, #8]
 8005cb4:	697b      	ldr	r3, [r7, #20]
 8005cb6:	691b      	ldr	r3, [r3, #16]
 8005cb8:	431a      	orrs	r2, r3
 8005cba:	697b      	ldr	r3, [r7, #20]
 8005cbc:	695b      	ldr	r3, [r3, #20]
 8005cbe:	431a      	orrs	r2, r3
 8005cc0:	697b      	ldr	r3, [r7, #20]
 8005cc2:	69db      	ldr	r3, [r3, #28]
 8005cc4:	4313      	orrs	r3, r2
 8005cc6:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005cc8:	697b      	ldr	r3, [r7, #20]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	681a      	ldr	r2, [r3, #0]
 8005cce:	4bbe      	ldr	r3, [pc, #760]	@ (8005fc8 <UART_SetConfig+0x328>)
 8005cd0:	4013      	ands	r3, r2
 8005cd2:	697a      	ldr	r2, [r7, #20]
 8005cd4:	6812      	ldr	r2, [r2, #0]
 8005cd6:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8005cd8:	430b      	orrs	r3, r1
 8005cda:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005cdc:	697b      	ldr	r3, [r7, #20]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	685b      	ldr	r3, [r3, #4]
 8005ce2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005ce6:	697b      	ldr	r3, [r7, #20]
 8005ce8:	68da      	ldr	r2, [r3, #12]
 8005cea:	697b      	ldr	r3, [r7, #20]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	430a      	orrs	r2, r1
 8005cf0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005cf2:	697b      	ldr	r3, [r7, #20]
 8005cf4:	699b      	ldr	r3, [r3, #24]
 8005cf6:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005cf8:	697b      	ldr	r3, [r7, #20]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	4ab3      	ldr	r2, [pc, #716]	@ (8005fcc <UART_SetConfig+0x32c>)
 8005cfe:	4293      	cmp	r3, r2
 8005d00:	d004      	beq.n	8005d0c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005d02:	697b      	ldr	r3, [r7, #20]
 8005d04:	6a1b      	ldr	r3, [r3, #32]
 8005d06:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005d08:	4313      	orrs	r3, r2
 8005d0a:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005d0c:	697b      	ldr	r3, [r7, #20]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	689a      	ldr	r2, [r3, #8]
 8005d12:	4baf      	ldr	r3, [pc, #700]	@ (8005fd0 <UART_SetConfig+0x330>)
 8005d14:	4013      	ands	r3, r2
 8005d16:	697a      	ldr	r2, [r7, #20]
 8005d18:	6812      	ldr	r2, [r2, #0]
 8005d1a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8005d1c:	430b      	orrs	r3, r1
 8005d1e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005d20:	697b      	ldr	r3, [r7, #20]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d26:	f023 010f 	bic.w	r1, r3, #15
 8005d2a:	697b      	ldr	r3, [r7, #20]
 8005d2c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005d2e:	697b      	ldr	r3, [r7, #20]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	430a      	orrs	r2, r1
 8005d34:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005d36:	697b      	ldr	r3, [r7, #20]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	4aa6      	ldr	r2, [pc, #664]	@ (8005fd4 <UART_SetConfig+0x334>)
 8005d3c:	4293      	cmp	r3, r2
 8005d3e:	d177      	bne.n	8005e30 <UART_SetConfig+0x190>
 8005d40:	4ba5      	ldr	r3, [pc, #660]	@ (8005fd8 <UART_SetConfig+0x338>)
 8005d42:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005d44:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005d48:	2b28      	cmp	r3, #40	@ 0x28
 8005d4a:	d86d      	bhi.n	8005e28 <UART_SetConfig+0x188>
 8005d4c:	a201      	add	r2, pc, #4	@ (adr r2, 8005d54 <UART_SetConfig+0xb4>)
 8005d4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d52:	bf00      	nop
 8005d54:	08005df9 	.word	0x08005df9
 8005d58:	08005e29 	.word	0x08005e29
 8005d5c:	08005e29 	.word	0x08005e29
 8005d60:	08005e29 	.word	0x08005e29
 8005d64:	08005e29 	.word	0x08005e29
 8005d68:	08005e29 	.word	0x08005e29
 8005d6c:	08005e29 	.word	0x08005e29
 8005d70:	08005e29 	.word	0x08005e29
 8005d74:	08005e01 	.word	0x08005e01
 8005d78:	08005e29 	.word	0x08005e29
 8005d7c:	08005e29 	.word	0x08005e29
 8005d80:	08005e29 	.word	0x08005e29
 8005d84:	08005e29 	.word	0x08005e29
 8005d88:	08005e29 	.word	0x08005e29
 8005d8c:	08005e29 	.word	0x08005e29
 8005d90:	08005e29 	.word	0x08005e29
 8005d94:	08005e09 	.word	0x08005e09
 8005d98:	08005e29 	.word	0x08005e29
 8005d9c:	08005e29 	.word	0x08005e29
 8005da0:	08005e29 	.word	0x08005e29
 8005da4:	08005e29 	.word	0x08005e29
 8005da8:	08005e29 	.word	0x08005e29
 8005dac:	08005e29 	.word	0x08005e29
 8005db0:	08005e29 	.word	0x08005e29
 8005db4:	08005e11 	.word	0x08005e11
 8005db8:	08005e29 	.word	0x08005e29
 8005dbc:	08005e29 	.word	0x08005e29
 8005dc0:	08005e29 	.word	0x08005e29
 8005dc4:	08005e29 	.word	0x08005e29
 8005dc8:	08005e29 	.word	0x08005e29
 8005dcc:	08005e29 	.word	0x08005e29
 8005dd0:	08005e29 	.word	0x08005e29
 8005dd4:	08005e19 	.word	0x08005e19
 8005dd8:	08005e29 	.word	0x08005e29
 8005ddc:	08005e29 	.word	0x08005e29
 8005de0:	08005e29 	.word	0x08005e29
 8005de4:	08005e29 	.word	0x08005e29
 8005de8:	08005e29 	.word	0x08005e29
 8005dec:	08005e29 	.word	0x08005e29
 8005df0:	08005e29 	.word	0x08005e29
 8005df4:	08005e21 	.word	0x08005e21
 8005df8:	2301      	movs	r3, #1
 8005dfa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005dfe:	e326      	b.n	800644e <UART_SetConfig+0x7ae>
 8005e00:	2304      	movs	r3, #4
 8005e02:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005e06:	e322      	b.n	800644e <UART_SetConfig+0x7ae>
 8005e08:	2308      	movs	r3, #8
 8005e0a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005e0e:	e31e      	b.n	800644e <UART_SetConfig+0x7ae>
 8005e10:	2310      	movs	r3, #16
 8005e12:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005e16:	e31a      	b.n	800644e <UART_SetConfig+0x7ae>
 8005e18:	2320      	movs	r3, #32
 8005e1a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005e1e:	e316      	b.n	800644e <UART_SetConfig+0x7ae>
 8005e20:	2340      	movs	r3, #64	@ 0x40
 8005e22:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005e26:	e312      	b.n	800644e <UART_SetConfig+0x7ae>
 8005e28:	2380      	movs	r3, #128	@ 0x80
 8005e2a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005e2e:	e30e      	b.n	800644e <UART_SetConfig+0x7ae>
 8005e30:	697b      	ldr	r3, [r7, #20]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	4a69      	ldr	r2, [pc, #420]	@ (8005fdc <UART_SetConfig+0x33c>)
 8005e36:	4293      	cmp	r3, r2
 8005e38:	d130      	bne.n	8005e9c <UART_SetConfig+0x1fc>
 8005e3a:	4b67      	ldr	r3, [pc, #412]	@ (8005fd8 <UART_SetConfig+0x338>)
 8005e3c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005e3e:	f003 0307 	and.w	r3, r3, #7
 8005e42:	2b05      	cmp	r3, #5
 8005e44:	d826      	bhi.n	8005e94 <UART_SetConfig+0x1f4>
 8005e46:	a201      	add	r2, pc, #4	@ (adr r2, 8005e4c <UART_SetConfig+0x1ac>)
 8005e48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e4c:	08005e65 	.word	0x08005e65
 8005e50:	08005e6d 	.word	0x08005e6d
 8005e54:	08005e75 	.word	0x08005e75
 8005e58:	08005e7d 	.word	0x08005e7d
 8005e5c:	08005e85 	.word	0x08005e85
 8005e60:	08005e8d 	.word	0x08005e8d
 8005e64:	2300      	movs	r3, #0
 8005e66:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005e6a:	e2f0      	b.n	800644e <UART_SetConfig+0x7ae>
 8005e6c:	2304      	movs	r3, #4
 8005e6e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005e72:	e2ec      	b.n	800644e <UART_SetConfig+0x7ae>
 8005e74:	2308      	movs	r3, #8
 8005e76:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005e7a:	e2e8      	b.n	800644e <UART_SetConfig+0x7ae>
 8005e7c:	2310      	movs	r3, #16
 8005e7e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005e82:	e2e4      	b.n	800644e <UART_SetConfig+0x7ae>
 8005e84:	2320      	movs	r3, #32
 8005e86:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005e8a:	e2e0      	b.n	800644e <UART_SetConfig+0x7ae>
 8005e8c:	2340      	movs	r3, #64	@ 0x40
 8005e8e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005e92:	e2dc      	b.n	800644e <UART_SetConfig+0x7ae>
 8005e94:	2380      	movs	r3, #128	@ 0x80
 8005e96:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005e9a:	e2d8      	b.n	800644e <UART_SetConfig+0x7ae>
 8005e9c:	697b      	ldr	r3, [r7, #20]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	4a4f      	ldr	r2, [pc, #316]	@ (8005fe0 <UART_SetConfig+0x340>)
 8005ea2:	4293      	cmp	r3, r2
 8005ea4:	d130      	bne.n	8005f08 <UART_SetConfig+0x268>
 8005ea6:	4b4c      	ldr	r3, [pc, #304]	@ (8005fd8 <UART_SetConfig+0x338>)
 8005ea8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005eaa:	f003 0307 	and.w	r3, r3, #7
 8005eae:	2b05      	cmp	r3, #5
 8005eb0:	d826      	bhi.n	8005f00 <UART_SetConfig+0x260>
 8005eb2:	a201      	add	r2, pc, #4	@ (adr r2, 8005eb8 <UART_SetConfig+0x218>)
 8005eb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005eb8:	08005ed1 	.word	0x08005ed1
 8005ebc:	08005ed9 	.word	0x08005ed9
 8005ec0:	08005ee1 	.word	0x08005ee1
 8005ec4:	08005ee9 	.word	0x08005ee9
 8005ec8:	08005ef1 	.word	0x08005ef1
 8005ecc:	08005ef9 	.word	0x08005ef9
 8005ed0:	2300      	movs	r3, #0
 8005ed2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005ed6:	e2ba      	b.n	800644e <UART_SetConfig+0x7ae>
 8005ed8:	2304      	movs	r3, #4
 8005eda:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005ede:	e2b6      	b.n	800644e <UART_SetConfig+0x7ae>
 8005ee0:	2308      	movs	r3, #8
 8005ee2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005ee6:	e2b2      	b.n	800644e <UART_SetConfig+0x7ae>
 8005ee8:	2310      	movs	r3, #16
 8005eea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005eee:	e2ae      	b.n	800644e <UART_SetConfig+0x7ae>
 8005ef0:	2320      	movs	r3, #32
 8005ef2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005ef6:	e2aa      	b.n	800644e <UART_SetConfig+0x7ae>
 8005ef8:	2340      	movs	r3, #64	@ 0x40
 8005efa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005efe:	e2a6      	b.n	800644e <UART_SetConfig+0x7ae>
 8005f00:	2380      	movs	r3, #128	@ 0x80
 8005f02:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005f06:	e2a2      	b.n	800644e <UART_SetConfig+0x7ae>
 8005f08:	697b      	ldr	r3, [r7, #20]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	4a35      	ldr	r2, [pc, #212]	@ (8005fe4 <UART_SetConfig+0x344>)
 8005f0e:	4293      	cmp	r3, r2
 8005f10:	d130      	bne.n	8005f74 <UART_SetConfig+0x2d4>
 8005f12:	4b31      	ldr	r3, [pc, #196]	@ (8005fd8 <UART_SetConfig+0x338>)
 8005f14:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005f16:	f003 0307 	and.w	r3, r3, #7
 8005f1a:	2b05      	cmp	r3, #5
 8005f1c:	d826      	bhi.n	8005f6c <UART_SetConfig+0x2cc>
 8005f1e:	a201      	add	r2, pc, #4	@ (adr r2, 8005f24 <UART_SetConfig+0x284>)
 8005f20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f24:	08005f3d 	.word	0x08005f3d
 8005f28:	08005f45 	.word	0x08005f45
 8005f2c:	08005f4d 	.word	0x08005f4d
 8005f30:	08005f55 	.word	0x08005f55
 8005f34:	08005f5d 	.word	0x08005f5d
 8005f38:	08005f65 	.word	0x08005f65
 8005f3c:	2300      	movs	r3, #0
 8005f3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005f42:	e284      	b.n	800644e <UART_SetConfig+0x7ae>
 8005f44:	2304      	movs	r3, #4
 8005f46:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005f4a:	e280      	b.n	800644e <UART_SetConfig+0x7ae>
 8005f4c:	2308      	movs	r3, #8
 8005f4e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005f52:	e27c      	b.n	800644e <UART_SetConfig+0x7ae>
 8005f54:	2310      	movs	r3, #16
 8005f56:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005f5a:	e278      	b.n	800644e <UART_SetConfig+0x7ae>
 8005f5c:	2320      	movs	r3, #32
 8005f5e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005f62:	e274      	b.n	800644e <UART_SetConfig+0x7ae>
 8005f64:	2340      	movs	r3, #64	@ 0x40
 8005f66:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005f6a:	e270      	b.n	800644e <UART_SetConfig+0x7ae>
 8005f6c:	2380      	movs	r3, #128	@ 0x80
 8005f6e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005f72:	e26c      	b.n	800644e <UART_SetConfig+0x7ae>
 8005f74:	697b      	ldr	r3, [r7, #20]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	4a1b      	ldr	r2, [pc, #108]	@ (8005fe8 <UART_SetConfig+0x348>)
 8005f7a:	4293      	cmp	r3, r2
 8005f7c:	d142      	bne.n	8006004 <UART_SetConfig+0x364>
 8005f7e:	4b16      	ldr	r3, [pc, #88]	@ (8005fd8 <UART_SetConfig+0x338>)
 8005f80:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005f82:	f003 0307 	and.w	r3, r3, #7
 8005f86:	2b05      	cmp	r3, #5
 8005f88:	d838      	bhi.n	8005ffc <UART_SetConfig+0x35c>
 8005f8a:	a201      	add	r2, pc, #4	@ (adr r2, 8005f90 <UART_SetConfig+0x2f0>)
 8005f8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f90:	08005fa9 	.word	0x08005fa9
 8005f94:	08005fb1 	.word	0x08005fb1
 8005f98:	08005fb9 	.word	0x08005fb9
 8005f9c:	08005fc1 	.word	0x08005fc1
 8005fa0:	08005fed 	.word	0x08005fed
 8005fa4:	08005ff5 	.word	0x08005ff5
 8005fa8:	2300      	movs	r3, #0
 8005faa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005fae:	e24e      	b.n	800644e <UART_SetConfig+0x7ae>
 8005fb0:	2304      	movs	r3, #4
 8005fb2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005fb6:	e24a      	b.n	800644e <UART_SetConfig+0x7ae>
 8005fb8:	2308      	movs	r3, #8
 8005fba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005fbe:	e246      	b.n	800644e <UART_SetConfig+0x7ae>
 8005fc0:	2310      	movs	r3, #16
 8005fc2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005fc6:	e242      	b.n	800644e <UART_SetConfig+0x7ae>
 8005fc8:	cfff69f3 	.word	0xcfff69f3
 8005fcc:	58000c00 	.word	0x58000c00
 8005fd0:	11fff4ff 	.word	0x11fff4ff
 8005fd4:	40011000 	.word	0x40011000
 8005fd8:	58024400 	.word	0x58024400
 8005fdc:	40004400 	.word	0x40004400
 8005fe0:	40004800 	.word	0x40004800
 8005fe4:	40004c00 	.word	0x40004c00
 8005fe8:	40005000 	.word	0x40005000
 8005fec:	2320      	movs	r3, #32
 8005fee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005ff2:	e22c      	b.n	800644e <UART_SetConfig+0x7ae>
 8005ff4:	2340      	movs	r3, #64	@ 0x40
 8005ff6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005ffa:	e228      	b.n	800644e <UART_SetConfig+0x7ae>
 8005ffc:	2380      	movs	r3, #128	@ 0x80
 8005ffe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006002:	e224      	b.n	800644e <UART_SetConfig+0x7ae>
 8006004:	697b      	ldr	r3, [r7, #20]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	4ab1      	ldr	r2, [pc, #708]	@ (80062d0 <UART_SetConfig+0x630>)
 800600a:	4293      	cmp	r3, r2
 800600c:	d176      	bne.n	80060fc <UART_SetConfig+0x45c>
 800600e:	4bb1      	ldr	r3, [pc, #708]	@ (80062d4 <UART_SetConfig+0x634>)
 8006010:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006012:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006016:	2b28      	cmp	r3, #40	@ 0x28
 8006018:	d86c      	bhi.n	80060f4 <UART_SetConfig+0x454>
 800601a:	a201      	add	r2, pc, #4	@ (adr r2, 8006020 <UART_SetConfig+0x380>)
 800601c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006020:	080060c5 	.word	0x080060c5
 8006024:	080060f5 	.word	0x080060f5
 8006028:	080060f5 	.word	0x080060f5
 800602c:	080060f5 	.word	0x080060f5
 8006030:	080060f5 	.word	0x080060f5
 8006034:	080060f5 	.word	0x080060f5
 8006038:	080060f5 	.word	0x080060f5
 800603c:	080060f5 	.word	0x080060f5
 8006040:	080060cd 	.word	0x080060cd
 8006044:	080060f5 	.word	0x080060f5
 8006048:	080060f5 	.word	0x080060f5
 800604c:	080060f5 	.word	0x080060f5
 8006050:	080060f5 	.word	0x080060f5
 8006054:	080060f5 	.word	0x080060f5
 8006058:	080060f5 	.word	0x080060f5
 800605c:	080060f5 	.word	0x080060f5
 8006060:	080060d5 	.word	0x080060d5
 8006064:	080060f5 	.word	0x080060f5
 8006068:	080060f5 	.word	0x080060f5
 800606c:	080060f5 	.word	0x080060f5
 8006070:	080060f5 	.word	0x080060f5
 8006074:	080060f5 	.word	0x080060f5
 8006078:	080060f5 	.word	0x080060f5
 800607c:	080060f5 	.word	0x080060f5
 8006080:	080060dd 	.word	0x080060dd
 8006084:	080060f5 	.word	0x080060f5
 8006088:	080060f5 	.word	0x080060f5
 800608c:	080060f5 	.word	0x080060f5
 8006090:	080060f5 	.word	0x080060f5
 8006094:	080060f5 	.word	0x080060f5
 8006098:	080060f5 	.word	0x080060f5
 800609c:	080060f5 	.word	0x080060f5
 80060a0:	080060e5 	.word	0x080060e5
 80060a4:	080060f5 	.word	0x080060f5
 80060a8:	080060f5 	.word	0x080060f5
 80060ac:	080060f5 	.word	0x080060f5
 80060b0:	080060f5 	.word	0x080060f5
 80060b4:	080060f5 	.word	0x080060f5
 80060b8:	080060f5 	.word	0x080060f5
 80060bc:	080060f5 	.word	0x080060f5
 80060c0:	080060ed 	.word	0x080060ed
 80060c4:	2301      	movs	r3, #1
 80060c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80060ca:	e1c0      	b.n	800644e <UART_SetConfig+0x7ae>
 80060cc:	2304      	movs	r3, #4
 80060ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80060d2:	e1bc      	b.n	800644e <UART_SetConfig+0x7ae>
 80060d4:	2308      	movs	r3, #8
 80060d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80060da:	e1b8      	b.n	800644e <UART_SetConfig+0x7ae>
 80060dc:	2310      	movs	r3, #16
 80060de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80060e2:	e1b4      	b.n	800644e <UART_SetConfig+0x7ae>
 80060e4:	2320      	movs	r3, #32
 80060e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80060ea:	e1b0      	b.n	800644e <UART_SetConfig+0x7ae>
 80060ec:	2340      	movs	r3, #64	@ 0x40
 80060ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80060f2:	e1ac      	b.n	800644e <UART_SetConfig+0x7ae>
 80060f4:	2380      	movs	r3, #128	@ 0x80
 80060f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80060fa:	e1a8      	b.n	800644e <UART_SetConfig+0x7ae>
 80060fc:	697b      	ldr	r3, [r7, #20]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	4a75      	ldr	r2, [pc, #468]	@ (80062d8 <UART_SetConfig+0x638>)
 8006102:	4293      	cmp	r3, r2
 8006104:	d130      	bne.n	8006168 <UART_SetConfig+0x4c8>
 8006106:	4b73      	ldr	r3, [pc, #460]	@ (80062d4 <UART_SetConfig+0x634>)
 8006108:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800610a:	f003 0307 	and.w	r3, r3, #7
 800610e:	2b05      	cmp	r3, #5
 8006110:	d826      	bhi.n	8006160 <UART_SetConfig+0x4c0>
 8006112:	a201      	add	r2, pc, #4	@ (adr r2, 8006118 <UART_SetConfig+0x478>)
 8006114:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006118:	08006131 	.word	0x08006131
 800611c:	08006139 	.word	0x08006139
 8006120:	08006141 	.word	0x08006141
 8006124:	08006149 	.word	0x08006149
 8006128:	08006151 	.word	0x08006151
 800612c:	08006159 	.word	0x08006159
 8006130:	2300      	movs	r3, #0
 8006132:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006136:	e18a      	b.n	800644e <UART_SetConfig+0x7ae>
 8006138:	2304      	movs	r3, #4
 800613a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800613e:	e186      	b.n	800644e <UART_SetConfig+0x7ae>
 8006140:	2308      	movs	r3, #8
 8006142:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006146:	e182      	b.n	800644e <UART_SetConfig+0x7ae>
 8006148:	2310      	movs	r3, #16
 800614a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800614e:	e17e      	b.n	800644e <UART_SetConfig+0x7ae>
 8006150:	2320      	movs	r3, #32
 8006152:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006156:	e17a      	b.n	800644e <UART_SetConfig+0x7ae>
 8006158:	2340      	movs	r3, #64	@ 0x40
 800615a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800615e:	e176      	b.n	800644e <UART_SetConfig+0x7ae>
 8006160:	2380      	movs	r3, #128	@ 0x80
 8006162:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006166:	e172      	b.n	800644e <UART_SetConfig+0x7ae>
 8006168:	697b      	ldr	r3, [r7, #20]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	4a5b      	ldr	r2, [pc, #364]	@ (80062dc <UART_SetConfig+0x63c>)
 800616e:	4293      	cmp	r3, r2
 8006170:	d130      	bne.n	80061d4 <UART_SetConfig+0x534>
 8006172:	4b58      	ldr	r3, [pc, #352]	@ (80062d4 <UART_SetConfig+0x634>)
 8006174:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006176:	f003 0307 	and.w	r3, r3, #7
 800617a:	2b05      	cmp	r3, #5
 800617c:	d826      	bhi.n	80061cc <UART_SetConfig+0x52c>
 800617e:	a201      	add	r2, pc, #4	@ (adr r2, 8006184 <UART_SetConfig+0x4e4>)
 8006180:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006184:	0800619d 	.word	0x0800619d
 8006188:	080061a5 	.word	0x080061a5
 800618c:	080061ad 	.word	0x080061ad
 8006190:	080061b5 	.word	0x080061b5
 8006194:	080061bd 	.word	0x080061bd
 8006198:	080061c5 	.word	0x080061c5
 800619c:	2300      	movs	r3, #0
 800619e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80061a2:	e154      	b.n	800644e <UART_SetConfig+0x7ae>
 80061a4:	2304      	movs	r3, #4
 80061a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80061aa:	e150      	b.n	800644e <UART_SetConfig+0x7ae>
 80061ac:	2308      	movs	r3, #8
 80061ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80061b2:	e14c      	b.n	800644e <UART_SetConfig+0x7ae>
 80061b4:	2310      	movs	r3, #16
 80061b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80061ba:	e148      	b.n	800644e <UART_SetConfig+0x7ae>
 80061bc:	2320      	movs	r3, #32
 80061be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80061c2:	e144      	b.n	800644e <UART_SetConfig+0x7ae>
 80061c4:	2340      	movs	r3, #64	@ 0x40
 80061c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80061ca:	e140      	b.n	800644e <UART_SetConfig+0x7ae>
 80061cc:	2380      	movs	r3, #128	@ 0x80
 80061ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80061d2:	e13c      	b.n	800644e <UART_SetConfig+0x7ae>
 80061d4:	697b      	ldr	r3, [r7, #20]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	4a41      	ldr	r2, [pc, #260]	@ (80062e0 <UART_SetConfig+0x640>)
 80061da:	4293      	cmp	r3, r2
 80061dc:	f040 8082 	bne.w	80062e4 <UART_SetConfig+0x644>
 80061e0:	4b3c      	ldr	r3, [pc, #240]	@ (80062d4 <UART_SetConfig+0x634>)
 80061e2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80061e4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80061e8:	2b28      	cmp	r3, #40	@ 0x28
 80061ea:	d86d      	bhi.n	80062c8 <UART_SetConfig+0x628>
 80061ec:	a201      	add	r2, pc, #4	@ (adr r2, 80061f4 <UART_SetConfig+0x554>)
 80061ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061f2:	bf00      	nop
 80061f4:	08006299 	.word	0x08006299
 80061f8:	080062c9 	.word	0x080062c9
 80061fc:	080062c9 	.word	0x080062c9
 8006200:	080062c9 	.word	0x080062c9
 8006204:	080062c9 	.word	0x080062c9
 8006208:	080062c9 	.word	0x080062c9
 800620c:	080062c9 	.word	0x080062c9
 8006210:	080062c9 	.word	0x080062c9
 8006214:	080062a1 	.word	0x080062a1
 8006218:	080062c9 	.word	0x080062c9
 800621c:	080062c9 	.word	0x080062c9
 8006220:	080062c9 	.word	0x080062c9
 8006224:	080062c9 	.word	0x080062c9
 8006228:	080062c9 	.word	0x080062c9
 800622c:	080062c9 	.word	0x080062c9
 8006230:	080062c9 	.word	0x080062c9
 8006234:	080062a9 	.word	0x080062a9
 8006238:	080062c9 	.word	0x080062c9
 800623c:	080062c9 	.word	0x080062c9
 8006240:	080062c9 	.word	0x080062c9
 8006244:	080062c9 	.word	0x080062c9
 8006248:	080062c9 	.word	0x080062c9
 800624c:	080062c9 	.word	0x080062c9
 8006250:	080062c9 	.word	0x080062c9
 8006254:	080062b1 	.word	0x080062b1
 8006258:	080062c9 	.word	0x080062c9
 800625c:	080062c9 	.word	0x080062c9
 8006260:	080062c9 	.word	0x080062c9
 8006264:	080062c9 	.word	0x080062c9
 8006268:	080062c9 	.word	0x080062c9
 800626c:	080062c9 	.word	0x080062c9
 8006270:	080062c9 	.word	0x080062c9
 8006274:	080062b9 	.word	0x080062b9
 8006278:	080062c9 	.word	0x080062c9
 800627c:	080062c9 	.word	0x080062c9
 8006280:	080062c9 	.word	0x080062c9
 8006284:	080062c9 	.word	0x080062c9
 8006288:	080062c9 	.word	0x080062c9
 800628c:	080062c9 	.word	0x080062c9
 8006290:	080062c9 	.word	0x080062c9
 8006294:	080062c1 	.word	0x080062c1
 8006298:	2301      	movs	r3, #1
 800629a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800629e:	e0d6      	b.n	800644e <UART_SetConfig+0x7ae>
 80062a0:	2304      	movs	r3, #4
 80062a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80062a6:	e0d2      	b.n	800644e <UART_SetConfig+0x7ae>
 80062a8:	2308      	movs	r3, #8
 80062aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80062ae:	e0ce      	b.n	800644e <UART_SetConfig+0x7ae>
 80062b0:	2310      	movs	r3, #16
 80062b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80062b6:	e0ca      	b.n	800644e <UART_SetConfig+0x7ae>
 80062b8:	2320      	movs	r3, #32
 80062ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80062be:	e0c6      	b.n	800644e <UART_SetConfig+0x7ae>
 80062c0:	2340      	movs	r3, #64	@ 0x40
 80062c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80062c6:	e0c2      	b.n	800644e <UART_SetConfig+0x7ae>
 80062c8:	2380      	movs	r3, #128	@ 0x80
 80062ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80062ce:	e0be      	b.n	800644e <UART_SetConfig+0x7ae>
 80062d0:	40011400 	.word	0x40011400
 80062d4:	58024400 	.word	0x58024400
 80062d8:	40007800 	.word	0x40007800
 80062dc:	40007c00 	.word	0x40007c00
 80062e0:	40011800 	.word	0x40011800
 80062e4:	697b      	ldr	r3, [r7, #20]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	4aad      	ldr	r2, [pc, #692]	@ (80065a0 <UART_SetConfig+0x900>)
 80062ea:	4293      	cmp	r3, r2
 80062ec:	d176      	bne.n	80063dc <UART_SetConfig+0x73c>
 80062ee:	4bad      	ldr	r3, [pc, #692]	@ (80065a4 <UART_SetConfig+0x904>)
 80062f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80062f2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80062f6:	2b28      	cmp	r3, #40	@ 0x28
 80062f8:	d86c      	bhi.n	80063d4 <UART_SetConfig+0x734>
 80062fa:	a201      	add	r2, pc, #4	@ (adr r2, 8006300 <UART_SetConfig+0x660>)
 80062fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006300:	080063a5 	.word	0x080063a5
 8006304:	080063d5 	.word	0x080063d5
 8006308:	080063d5 	.word	0x080063d5
 800630c:	080063d5 	.word	0x080063d5
 8006310:	080063d5 	.word	0x080063d5
 8006314:	080063d5 	.word	0x080063d5
 8006318:	080063d5 	.word	0x080063d5
 800631c:	080063d5 	.word	0x080063d5
 8006320:	080063ad 	.word	0x080063ad
 8006324:	080063d5 	.word	0x080063d5
 8006328:	080063d5 	.word	0x080063d5
 800632c:	080063d5 	.word	0x080063d5
 8006330:	080063d5 	.word	0x080063d5
 8006334:	080063d5 	.word	0x080063d5
 8006338:	080063d5 	.word	0x080063d5
 800633c:	080063d5 	.word	0x080063d5
 8006340:	080063b5 	.word	0x080063b5
 8006344:	080063d5 	.word	0x080063d5
 8006348:	080063d5 	.word	0x080063d5
 800634c:	080063d5 	.word	0x080063d5
 8006350:	080063d5 	.word	0x080063d5
 8006354:	080063d5 	.word	0x080063d5
 8006358:	080063d5 	.word	0x080063d5
 800635c:	080063d5 	.word	0x080063d5
 8006360:	080063bd 	.word	0x080063bd
 8006364:	080063d5 	.word	0x080063d5
 8006368:	080063d5 	.word	0x080063d5
 800636c:	080063d5 	.word	0x080063d5
 8006370:	080063d5 	.word	0x080063d5
 8006374:	080063d5 	.word	0x080063d5
 8006378:	080063d5 	.word	0x080063d5
 800637c:	080063d5 	.word	0x080063d5
 8006380:	080063c5 	.word	0x080063c5
 8006384:	080063d5 	.word	0x080063d5
 8006388:	080063d5 	.word	0x080063d5
 800638c:	080063d5 	.word	0x080063d5
 8006390:	080063d5 	.word	0x080063d5
 8006394:	080063d5 	.word	0x080063d5
 8006398:	080063d5 	.word	0x080063d5
 800639c:	080063d5 	.word	0x080063d5
 80063a0:	080063cd 	.word	0x080063cd
 80063a4:	2301      	movs	r3, #1
 80063a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80063aa:	e050      	b.n	800644e <UART_SetConfig+0x7ae>
 80063ac:	2304      	movs	r3, #4
 80063ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80063b2:	e04c      	b.n	800644e <UART_SetConfig+0x7ae>
 80063b4:	2308      	movs	r3, #8
 80063b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80063ba:	e048      	b.n	800644e <UART_SetConfig+0x7ae>
 80063bc:	2310      	movs	r3, #16
 80063be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80063c2:	e044      	b.n	800644e <UART_SetConfig+0x7ae>
 80063c4:	2320      	movs	r3, #32
 80063c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80063ca:	e040      	b.n	800644e <UART_SetConfig+0x7ae>
 80063cc:	2340      	movs	r3, #64	@ 0x40
 80063ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80063d2:	e03c      	b.n	800644e <UART_SetConfig+0x7ae>
 80063d4:	2380      	movs	r3, #128	@ 0x80
 80063d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80063da:	e038      	b.n	800644e <UART_SetConfig+0x7ae>
 80063dc:	697b      	ldr	r3, [r7, #20]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	4a71      	ldr	r2, [pc, #452]	@ (80065a8 <UART_SetConfig+0x908>)
 80063e2:	4293      	cmp	r3, r2
 80063e4:	d130      	bne.n	8006448 <UART_SetConfig+0x7a8>
 80063e6:	4b6f      	ldr	r3, [pc, #444]	@ (80065a4 <UART_SetConfig+0x904>)
 80063e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80063ea:	f003 0307 	and.w	r3, r3, #7
 80063ee:	2b05      	cmp	r3, #5
 80063f0:	d826      	bhi.n	8006440 <UART_SetConfig+0x7a0>
 80063f2:	a201      	add	r2, pc, #4	@ (adr r2, 80063f8 <UART_SetConfig+0x758>)
 80063f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063f8:	08006411 	.word	0x08006411
 80063fc:	08006419 	.word	0x08006419
 8006400:	08006421 	.word	0x08006421
 8006404:	08006429 	.word	0x08006429
 8006408:	08006431 	.word	0x08006431
 800640c:	08006439 	.word	0x08006439
 8006410:	2302      	movs	r3, #2
 8006412:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006416:	e01a      	b.n	800644e <UART_SetConfig+0x7ae>
 8006418:	2304      	movs	r3, #4
 800641a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800641e:	e016      	b.n	800644e <UART_SetConfig+0x7ae>
 8006420:	2308      	movs	r3, #8
 8006422:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006426:	e012      	b.n	800644e <UART_SetConfig+0x7ae>
 8006428:	2310      	movs	r3, #16
 800642a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800642e:	e00e      	b.n	800644e <UART_SetConfig+0x7ae>
 8006430:	2320      	movs	r3, #32
 8006432:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006436:	e00a      	b.n	800644e <UART_SetConfig+0x7ae>
 8006438:	2340      	movs	r3, #64	@ 0x40
 800643a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800643e:	e006      	b.n	800644e <UART_SetConfig+0x7ae>
 8006440:	2380      	movs	r3, #128	@ 0x80
 8006442:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006446:	e002      	b.n	800644e <UART_SetConfig+0x7ae>
 8006448:	2380      	movs	r3, #128	@ 0x80
 800644a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800644e:	697b      	ldr	r3, [r7, #20]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	4a55      	ldr	r2, [pc, #340]	@ (80065a8 <UART_SetConfig+0x908>)
 8006454:	4293      	cmp	r3, r2
 8006456:	f040 80f8 	bne.w	800664a <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800645a:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800645e:	2b20      	cmp	r3, #32
 8006460:	dc46      	bgt.n	80064f0 <UART_SetConfig+0x850>
 8006462:	2b02      	cmp	r3, #2
 8006464:	db75      	blt.n	8006552 <UART_SetConfig+0x8b2>
 8006466:	3b02      	subs	r3, #2
 8006468:	2b1e      	cmp	r3, #30
 800646a:	d872      	bhi.n	8006552 <UART_SetConfig+0x8b2>
 800646c:	a201      	add	r2, pc, #4	@ (adr r2, 8006474 <UART_SetConfig+0x7d4>)
 800646e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006472:	bf00      	nop
 8006474:	080064f7 	.word	0x080064f7
 8006478:	08006553 	.word	0x08006553
 800647c:	080064ff 	.word	0x080064ff
 8006480:	08006553 	.word	0x08006553
 8006484:	08006553 	.word	0x08006553
 8006488:	08006553 	.word	0x08006553
 800648c:	0800650f 	.word	0x0800650f
 8006490:	08006553 	.word	0x08006553
 8006494:	08006553 	.word	0x08006553
 8006498:	08006553 	.word	0x08006553
 800649c:	08006553 	.word	0x08006553
 80064a0:	08006553 	.word	0x08006553
 80064a4:	08006553 	.word	0x08006553
 80064a8:	08006553 	.word	0x08006553
 80064ac:	0800651f 	.word	0x0800651f
 80064b0:	08006553 	.word	0x08006553
 80064b4:	08006553 	.word	0x08006553
 80064b8:	08006553 	.word	0x08006553
 80064bc:	08006553 	.word	0x08006553
 80064c0:	08006553 	.word	0x08006553
 80064c4:	08006553 	.word	0x08006553
 80064c8:	08006553 	.word	0x08006553
 80064cc:	08006553 	.word	0x08006553
 80064d0:	08006553 	.word	0x08006553
 80064d4:	08006553 	.word	0x08006553
 80064d8:	08006553 	.word	0x08006553
 80064dc:	08006553 	.word	0x08006553
 80064e0:	08006553 	.word	0x08006553
 80064e4:	08006553 	.word	0x08006553
 80064e8:	08006553 	.word	0x08006553
 80064ec:	08006545 	.word	0x08006545
 80064f0:	2b40      	cmp	r3, #64	@ 0x40
 80064f2:	d02a      	beq.n	800654a <UART_SetConfig+0x8aa>
 80064f4:	e02d      	b.n	8006552 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80064f6:	f7fe f839 	bl	800456c <HAL_RCCEx_GetD3PCLK1Freq>
 80064fa:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80064fc:	e02f      	b.n	800655e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80064fe:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006502:	4618      	mov	r0, r3
 8006504:	f7fe f848 	bl	8004598 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006508:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800650a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800650c:	e027      	b.n	800655e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800650e:	f107 0318 	add.w	r3, r7, #24
 8006512:	4618      	mov	r0, r3
 8006514:	f7fe f994 	bl	8004840 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006518:	69fb      	ldr	r3, [r7, #28]
 800651a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800651c:	e01f      	b.n	800655e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800651e:	4b21      	ldr	r3, [pc, #132]	@ (80065a4 <UART_SetConfig+0x904>)
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	f003 0320 	and.w	r3, r3, #32
 8006526:	2b00      	cmp	r3, #0
 8006528:	d009      	beq.n	800653e <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800652a:	4b1e      	ldr	r3, [pc, #120]	@ (80065a4 <UART_SetConfig+0x904>)
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	08db      	lsrs	r3, r3, #3
 8006530:	f003 0303 	and.w	r3, r3, #3
 8006534:	4a1d      	ldr	r2, [pc, #116]	@ (80065ac <UART_SetConfig+0x90c>)
 8006536:	fa22 f303 	lsr.w	r3, r2, r3
 800653a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800653c:	e00f      	b.n	800655e <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800653e:	4b1b      	ldr	r3, [pc, #108]	@ (80065ac <UART_SetConfig+0x90c>)
 8006540:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006542:	e00c      	b.n	800655e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006544:	4b1a      	ldr	r3, [pc, #104]	@ (80065b0 <UART_SetConfig+0x910>)
 8006546:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006548:	e009      	b.n	800655e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800654a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800654e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006550:	e005      	b.n	800655e <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8006552:	2300      	movs	r3, #0
 8006554:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8006556:	2301      	movs	r3, #1
 8006558:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800655c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800655e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006560:	2b00      	cmp	r3, #0
 8006562:	f000 81ee 	beq.w	8006942 <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006566:	697b      	ldr	r3, [r7, #20]
 8006568:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800656a:	4a12      	ldr	r2, [pc, #72]	@ (80065b4 <UART_SetConfig+0x914>)
 800656c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006570:	461a      	mov	r2, r3
 8006572:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006574:	fbb3 f3f2 	udiv	r3, r3, r2
 8006578:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800657a:	697b      	ldr	r3, [r7, #20]
 800657c:	685a      	ldr	r2, [r3, #4]
 800657e:	4613      	mov	r3, r2
 8006580:	005b      	lsls	r3, r3, #1
 8006582:	4413      	add	r3, r2
 8006584:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006586:	429a      	cmp	r2, r3
 8006588:	d305      	bcc.n	8006596 <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800658a:	697b      	ldr	r3, [r7, #20]
 800658c:	685b      	ldr	r3, [r3, #4]
 800658e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006590:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006592:	429a      	cmp	r2, r3
 8006594:	d910      	bls.n	80065b8 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 8006596:	2301      	movs	r3, #1
 8006598:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800659c:	e1d1      	b.n	8006942 <UART_SetConfig+0xca2>
 800659e:	bf00      	nop
 80065a0:	40011c00 	.word	0x40011c00
 80065a4:	58024400 	.word	0x58024400
 80065a8:	58000c00 	.word	0x58000c00
 80065ac:	03d09000 	.word	0x03d09000
 80065b0:	003d0900 	.word	0x003d0900
 80065b4:	0801c59c 	.word	0x0801c59c
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80065b8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80065ba:	2200      	movs	r2, #0
 80065bc:	60bb      	str	r3, [r7, #8]
 80065be:	60fa      	str	r2, [r7, #12]
 80065c0:	697b      	ldr	r3, [r7, #20]
 80065c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80065c4:	4ac0      	ldr	r2, [pc, #768]	@ (80068c8 <UART_SetConfig+0xc28>)
 80065c6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80065ca:	b29b      	uxth	r3, r3
 80065cc:	2200      	movs	r2, #0
 80065ce:	603b      	str	r3, [r7, #0]
 80065d0:	607a      	str	r2, [r7, #4]
 80065d2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80065d6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80065da:	f7f9 fee9 	bl	80003b0 <__aeabi_uldivmod>
 80065de:	4602      	mov	r2, r0
 80065e0:	460b      	mov	r3, r1
 80065e2:	4610      	mov	r0, r2
 80065e4:	4619      	mov	r1, r3
 80065e6:	f04f 0200 	mov.w	r2, #0
 80065ea:	f04f 0300 	mov.w	r3, #0
 80065ee:	020b      	lsls	r3, r1, #8
 80065f0:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80065f4:	0202      	lsls	r2, r0, #8
 80065f6:	6979      	ldr	r1, [r7, #20]
 80065f8:	6849      	ldr	r1, [r1, #4]
 80065fa:	0849      	lsrs	r1, r1, #1
 80065fc:	2000      	movs	r0, #0
 80065fe:	460c      	mov	r4, r1
 8006600:	4605      	mov	r5, r0
 8006602:	eb12 0804 	adds.w	r8, r2, r4
 8006606:	eb43 0905 	adc.w	r9, r3, r5
 800660a:	697b      	ldr	r3, [r7, #20]
 800660c:	685b      	ldr	r3, [r3, #4]
 800660e:	2200      	movs	r2, #0
 8006610:	469a      	mov	sl, r3
 8006612:	4693      	mov	fp, r2
 8006614:	4652      	mov	r2, sl
 8006616:	465b      	mov	r3, fp
 8006618:	4640      	mov	r0, r8
 800661a:	4649      	mov	r1, r9
 800661c:	f7f9 fec8 	bl	80003b0 <__aeabi_uldivmod>
 8006620:	4602      	mov	r2, r0
 8006622:	460b      	mov	r3, r1
 8006624:	4613      	mov	r3, r2
 8006626:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006628:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800662a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800662e:	d308      	bcc.n	8006642 <UART_SetConfig+0x9a2>
 8006630:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006632:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006636:	d204      	bcs.n	8006642 <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 8006638:	697b      	ldr	r3, [r7, #20]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800663e:	60da      	str	r2, [r3, #12]
 8006640:	e17f      	b.n	8006942 <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 8006642:	2301      	movs	r3, #1
 8006644:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8006648:	e17b      	b.n	8006942 <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800664a:	697b      	ldr	r3, [r7, #20]
 800664c:	69db      	ldr	r3, [r3, #28]
 800664e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006652:	f040 80bd 	bne.w	80067d0 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 8006656:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800665a:	2b20      	cmp	r3, #32
 800665c:	dc48      	bgt.n	80066f0 <UART_SetConfig+0xa50>
 800665e:	2b00      	cmp	r3, #0
 8006660:	db7b      	blt.n	800675a <UART_SetConfig+0xaba>
 8006662:	2b20      	cmp	r3, #32
 8006664:	d879      	bhi.n	800675a <UART_SetConfig+0xaba>
 8006666:	a201      	add	r2, pc, #4	@ (adr r2, 800666c <UART_SetConfig+0x9cc>)
 8006668:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800666c:	080066f7 	.word	0x080066f7
 8006670:	080066ff 	.word	0x080066ff
 8006674:	0800675b 	.word	0x0800675b
 8006678:	0800675b 	.word	0x0800675b
 800667c:	08006707 	.word	0x08006707
 8006680:	0800675b 	.word	0x0800675b
 8006684:	0800675b 	.word	0x0800675b
 8006688:	0800675b 	.word	0x0800675b
 800668c:	08006717 	.word	0x08006717
 8006690:	0800675b 	.word	0x0800675b
 8006694:	0800675b 	.word	0x0800675b
 8006698:	0800675b 	.word	0x0800675b
 800669c:	0800675b 	.word	0x0800675b
 80066a0:	0800675b 	.word	0x0800675b
 80066a4:	0800675b 	.word	0x0800675b
 80066a8:	0800675b 	.word	0x0800675b
 80066ac:	08006727 	.word	0x08006727
 80066b0:	0800675b 	.word	0x0800675b
 80066b4:	0800675b 	.word	0x0800675b
 80066b8:	0800675b 	.word	0x0800675b
 80066bc:	0800675b 	.word	0x0800675b
 80066c0:	0800675b 	.word	0x0800675b
 80066c4:	0800675b 	.word	0x0800675b
 80066c8:	0800675b 	.word	0x0800675b
 80066cc:	0800675b 	.word	0x0800675b
 80066d0:	0800675b 	.word	0x0800675b
 80066d4:	0800675b 	.word	0x0800675b
 80066d8:	0800675b 	.word	0x0800675b
 80066dc:	0800675b 	.word	0x0800675b
 80066e0:	0800675b 	.word	0x0800675b
 80066e4:	0800675b 	.word	0x0800675b
 80066e8:	0800675b 	.word	0x0800675b
 80066ec:	0800674d 	.word	0x0800674d
 80066f0:	2b40      	cmp	r3, #64	@ 0x40
 80066f2:	d02e      	beq.n	8006752 <UART_SetConfig+0xab2>
 80066f4:	e031      	b.n	800675a <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80066f6:	f7fc fd6d 	bl	80031d4 <HAL_RCC_GetPCLK1Freq>
 80066fa:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80066fc:	e033      	b.n	8006766 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80066fe:	f7fc fd7f 	bl	8003200 <HAL_RCC_GetPCLK2Freq>
 8006702:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8006704:	e02f      	b.n	8006766 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006706:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800670a:	4618      	mov	r0, r3
 800670c:	f7fd ff44 	bl	8004598 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006710:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006712:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006714:	e027      	b.n	8006766 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006716:	f107 0318 	add.w	r3, r7, #24
 800671a:	4618      	mov	r0, r3
 800671c:	f7fe f890 	bl	8004840 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006720:	69fb      	ldr	r3, [r7, #28]
 8006722:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006724:	e01f      	b.n	8006766 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006726:	4b69      	ldr	r3, [pc, #420]	@ (80068cc <UART_SetConfig+0xc2c>)
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	f003 0320 	and.w	r3, r3, #32
 800672e:	2b00      	cmp	r3, #0
 8006730:	d009      	beq.n	8006746 <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8006732:	4b66      	ldr	r3, [pc, #408]	@ (80068cc <UART_SetConfig+0xc2c>)
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	08db      	lsrs	r3, r3, #3
 8006738:	f003 0303 	and.w	r3, r3, #3
 800673c:	4a64      	ldr	r2, [pc, #400]	@ (80068d0 <UART_SetConfig+0xc30>)
 800673e:	fa22 f303 	lsr.w	r3, r2, r3
 8006742:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006744:	e00f      	b.n	8006766 <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 8006746:	4b62      	ldr	r3, [pc, #392]	@ (80068d0 <UART_SetConfig+0xc30>)
 8006748:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800674a:	e00c      	b.n	8006766 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800674c:	4b61      	ldr	r3, [pc, #388]	@ (80068d4 <UART_SetConfig+0xc34>)
 800674e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006750:	e009      	b.n	8006766 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006752:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006756:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006758:	e005      	b.n	8006766 <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 800675a:	2300      	movs	r3, #0
 800675c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800675e:	2301      	movs	r3, #1
 8006760:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8006764:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006766:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006768:	2b00      	cmp	r3, #0
 800676a:	f000 80ea 	beq.w	8006942 <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800676e:	697b      	ldr	r3, [r7, #20]
 8006770:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006772:	4a55      	ldr	r2, [pc, #340]	@ (80068c8 <UART_SetConfig+0xc28>)
 8006774:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006778:	461a      	mov	r2, r3
 800677a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800677c:	fbb3 f3f2 	udiv	r3, r3, r2
 8006780:	005a      	lsls	r2, r3, #1
 8006782:	697b      	ldr	r3, [r7, #20]
 8006784:	685b      	ldr	r3, [r3, #4]
 8006786:	085b      	lsrs	r3, r3, #1
 8006788:	441a      	add	r2, r3
 800678a:	697b      	ldr	r3, [r7, #20]
 800678c:	685b      	ldr	r3, [r3, #4]
 800678e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006792:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006794:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006796:	2b0f      	cmp	r3, #15
 8006798:	d916      	bls.n	80067c8 <UART_SetConfig+0xb28>
 800679a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800679c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80067a0:	d212      	bcs.n	80067c8 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80067a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80067a4:	b29b      	uxth	r3, r3
 80067a6:	f023 030f 	bic.w	r3, r3, #15
 80067aa:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80067ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80067ae:	085b      	lsrs	r3, r3, #1
 80067b0:	b29b      	uxth	r3, r3
 80067b2:	f003 0307 	and.w	r3, r3, #7
 80067b6:	b29a      	uxth	r2, r3
 80067b8:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80067ba:	4313      	orrs	r3, r2
 80067bc:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 80067be:	697b      	ldr	r3, [r7, #20]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 80067c4:	60da      	str	r2, [r3, #12]
 80067c6:	e0bc      	b.n	8006942 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 80067c8:	2301      	movs	r3, #1
 80067ca:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80067ce:	e0b8      	b.n	8006942 <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 80067d0:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80067d4:	2b20      	cmp	r3, #32
 80067d6:	dc4b      	bgt.n	8006870 <UART_SetConfig+0xbd0>
 80067d8:	2b00      	cmp	r3, #0
 80067da:	f2c0 8087 	blt.w	80068ec <UART_SetConfig+0xc4c>
 80067de:	2b20      	cmp	r3, #32
 80067e0:	f200 8084 	bhi.w	80068ec <UART_SetConfig+0xc4c>
 80067e4:	a201      	add	r2, pc, #4	@ (adr r2, 80067ec <UART_SetConfig+0xb4c>)
 80067e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067ea:	bf00      	nop
 80067ec:	08006877 	.word	0x08006877
 80067f0:	0800687f 	.word	0x0800687f
 80067f4:	080068ed 	.word	0x080068ed
 80067f8:	080068ed 	.word	0x080068ed
 80067fc:	08006887 	.word	0x08006887
 8006800:	080068ed 	.word	0x080068ed
 8006804:	080068ed 	.word	0x080068ed
 8006808:	080068ed 	.word	0x080068ed
 800680c:	08006897 	.word	0x08006897
 8006810:	080068ed 	.word	0x080068ed
 8006814:	080068ed 	.word	0x080068ed
 8006818:	080068ed 	.word	0x080068ed
 800681c:	080068ed 	.word	0x080068ed
 8006820:	080068ed 	.word	0x080068ed
 8006824:	080068ed 	.word	0x080068ed
 8006828:	080068ed 	.word	0x080068ed
 800682c:	080068a7 	.word	0x080068a7
 8006830:	080068ed 	.word	0x080068ed
 8006834:	080068ed 	.word	0x080068ed
 8006838:	080068ed 	.word	0x080068ed
 800683c:	080068ed 	.word	0x080068ed
 8006840:	080068ed 	.word	0x080068ed
 8006844:	080068ed 	.word	0x080068ed
 8006848:	080068ed 	.word	0x080068ed
 800684c:	080068ed 	.word	0x080068ed
 8006850:	080068ed 	.word	0x080068ed
 8006854:	080068ed 	.word	0x080068ed
 8006858:	080068ed 	.word	0x080068ed
 800685c:	080068ed 	.word	0x080068ed
 8006860:	080068ed 	.word	0x080068ed
 8006864:	080068ed 	.word	0x080068ed
 8006868:	080068ed 	.word	0x080068ed
 800686c:	080068df 	.word	0x080068df
 8006870:	2b40      	cmp	r3, #64	@ 0x40
 8006872:	d037      	beq.n	80068e4 <UART_SetConfig+0xc44>
 8006874:	e03a      	b.n	80068ec <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006876:	f7fc fcad 	bl	80031d4 <HAL_RCC_GetPCLK1Freq>
 800687a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800687c:	e03c      	b.n	80068f8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800687e:	f7fc fcbf 	bl	8003200 <HAL_RCC_GetPCLK2Freq>
 8006882:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8006884:	e038      	b.n	80068f8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006886:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800688a:	4618      	mov	r0, r3
 800688c:	f7fd fe84 	bl	8004598 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006890:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006892:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006894:	e030      	b.n	80068f8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006896:	f107 0318 	add.w	r3, r7, #24
 800689a:	4618      	mov	r0, r3
 800689c:	f7fd ffd0 	bl	8004840 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80068a0:	69fb      	ldr	r3, [r7, #28]
 80068a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80068a4:	e028      	b.n	80068f8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80068a6:	4b09      	ldr	r3, [pc, #36]	@ (80068cc <UART_SetConfig+0xc2c>)
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	f003 0320 	and.w	r3, r3, #32
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d012      	beq.n	80068d8 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80068b2:	4b06      	ldr	r3, [pc, #24]	@ (80068cc <UART_SetConfig+0xc2c>)
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	08db      	lsrs	r3, r3, #3
 80068b8:	f003 0303 	and.w	r3, r3, #3
 80068bc:	4a04      	ldr	r2, [pc, #16]	@ (80068d0 <UART_SetConfig+0xc30>)
 80068be:	fa22 f303 	lsr.w	r3, r2, r3
 80068c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80068c4:	e018      	b.n	80068f8 <UART_SetConfig+0xc58>
 80068c6:	bf00      	nop
 80068c8:	0801c59c 	.word	0x0801c59c
 80068cc:	58024400 	.word	0x58024400
 80068d0:	03d09000 	.word	0x03d09000
 80068d4:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 80068d8:	4b24      	ldr	r3, [pc, #144]	@ (800696c <UART_SetConfig+0xccc>)
 80068da:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80068dc:	e00c      	b.n	80068f8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80068de:	4b24      	ldr	r3, [pc, #144]	@ (8006970 <UART_SetConfig+0xcd0>)
 80068e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80068e2:	e009      	b.n	80068f8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80068e4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80068e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80068ea:	e005      	b.n	80068f8 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 80068ec:	2300      	movs	r3, #0
 80068ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 80068f0:	2301      	movs	r3, #1
 80068f2:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80068f6:	bf00      	nop
    }

    if (pclk != 0U)
 80068f8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d021      	beq.n	8006942 <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80068fe:	697b      	ldr	r3, [r7, #20]
 8006900:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006902:	4a1c      	ldr	r2, [pc, #112]	@ (8006974 <UART_SetConfig+0xcd4>)
 8006904:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006908:	461a      	mov	r2, r3
 800690a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800690c:	fbb3 f2f2 	udiv	r2, r3, r2
 8006910:	697b      	ldr	r3, [r7, #20]
 8006912:	685b      	ldr	r3, [r3, #4]
 8006914:	085b      	lsrs	r3, r3, #1
 8006916:	441a      	add	r2, r3
 8006918:	697b      	ldr	r3, [r7, #20]
 800691a:	685b      	ldr	r3, [r3, #4]
 800691c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006920:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006922:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006924:	2b0f      	cmp	r3, #15
 8006926:	d909      	bls.n	800693c <UART_SetConfig+0xc9c>
 8006928:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800692a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800692e:	d205      	bcs.n	800693c <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006930:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006932:	b29a      	uxth	r2, r3
 8006934:	697b      	ldr	r3, [r7, #20]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	60da      	str	r2, [r3, #12]
 800693a:	e002      	b.n	8006942 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800693c:	2301      	movs	r3, #1
 800693e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006942:	697b      	ldr	r3, [r7, #20]
 8006944:	2201      	movs	r2, #1
 8006946:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800694a:	697b      	ldr	r3, [r7, #20]
 800694c:	2201      	movs	r2, #1
 800694e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006952:	697b      	ldr	r3, [r7, #20]
 8006954:	2200      	movs	r2, #0
 8006956:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8006958:	697b      	ldr	r3, [r7, #20]
 800695a:	2200      	movs	r2, #0
 800695c:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800695e:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 8006962:	4618      	mov	r0, r3
 8006964:	3748      	adds	r7, #72	@ 0x48
 8006966:	46bd      	mov	sp, r7
 8006968:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800696c:	03d09000 	.word	0x03d09000
 8006970:	003d0900 	.word	0x003d0900
 8006974:	0801c59c 	.word	0x0801c59c

08006978 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006978:	b480      	push	{r7}
 800697a:	b083      	sub	sp, #12
 800697c:	af00      	add	r7, sp, #0
 800697e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006984:	f003 0308 	and.w	r3, r3, #8
 8006988:	2b00      	cmp	r3, #0
 800698a:	d00a      	beq.n	80069a2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	685b      	ldr	r3, [r3, #4]
 8006992:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	430a      	orrs	r2, r1
 80069a0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80069a6:	f003 0301 	and.w	r3, r3, #1
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d00a      	beq.n	80069c4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	685b      	ldr	r3, [r3, #4]
 80069b4:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	430a      	orrs	r2, r1
 80069c2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80069c8:	f003 0302 	and.w	r3, r3, #2
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	d00a      	beq.n	80069e6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	685b      	ldr	r3, [r3, #4]
 80069d6:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	430a      	orrs	r2, r1
 80069e4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80069ea:	f003 0304 	and.w	r3, r3, #4
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d00a      	beq.n	8006a08 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	685b      	ldr	r3, [r3, #4]
 80069f8:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	430a      	orrs	r2, r1
 8006a06:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a0c:	f003 0310 	and.w	r3, r3, #16
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	d00a      	beq.n	8006a2a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	689b      	ldr	r3, [r3, #8]
 8006a1a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	430a      	orrs	r2, r1
 8006a28:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a2e:	f003 0320 	and.w	r3, r3, #32
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d00a      	beq.n	8006a4c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	689b      	ldr	r3, [r3, #8]
 8006a3c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	430a      	orrs	r2, r1
 8006a4a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a50:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	d01a      	beq.n	8006a8e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	685b      	ldr	r3, [r3, #4]
 8006a5e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	430a      	orrs	r2, r1
 8006a6c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006a72:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006a76:	d10a      	bne.n	8006a8e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	685b      	ldr	r3, [r3, #4]
 8006a7e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	430a      	orrs	r2, r1
 8006a8c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a92:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d00a      	beq.n	8006ab0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	685b      	ldr	r3, [r3, #4]
 8006aa0:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	430a      	orrs	r2, r1
 8006aae:	605a      	str	r2, [r3, #4]
  }
}
 8006ab0:	bf00      	nop
 8006ab2:	370c      	adds	r7, #12
 8006ab4:	46bd      	mov	sp, r7
 8006ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aba:	4770      	bx	lr

08006abc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006abc:	b580      	push	{r7, lr}
 8006abe:	b098      	sub	sp, #96	@ 0x60
 8006ac0:	af02      	add	r7, sp, #8
 8006ac2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	2200      	movs	r2, #0
 8006ac8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006acc:	f7fb f918 	bl	8001d00 <HAL_GetTick>
 8006ad0:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	f003 0308 	and.w	r3, r3, #8
 8006adc:	2b08      	cmp	r3, #8
 8006ade:	d12f      	bne.n	8006b40 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006ae0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006ae4:	9300      	str	r3, [sp, #0]
 8006ae6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006ae8:	2200      	movs	r2, #0
 8006aea:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8006aee:	6878      	ldr	r0, [r7, #4]
 8006af0:	f000 f88e 	bl	8006c10 <UART_WaitOnFlagUntilTimeout>
 8006af4:	4603      	mov	r3, r0
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d022      	beq.n	8006b40 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b00:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b02:	e853 3f00 	ldrex	r3, [r3]
 8006b06:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006b08:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006b0a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006b0e:	653b      	str	r3, [r7, #80]	@ 0x50
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	461a      	mov	r2, r3
 8006b16:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006b18:	647b      	str	r3, [r7, #68]	@ 0x44
 8006b1a:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b1c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006b1e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006b20:	e841 2300 	strex	r3, r2, [r1]
 8006b24:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006b26:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d1e6      	bne.n	8006afa <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	2220      	movs	r2, #32
 8006b30:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	2200      	movs	r2, #0
 8006b38:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006b3c:	2303      	movs	r3, #3
 8006b3e:	e063      	b.n	8006c08 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	f003 0304 	and.w	r3, r3, #4
 8006b4a:	2b04      	cmp	r3, #4
 8006b4c:	d149      	bne.n	8006be2 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006b4e:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006b52:	9300      	str	r3, [sp, #0]
 8006b54:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006b56:	2200      	movs	r2, #0
 8006b58:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8006b5c:	6878      	ldr	r0, [r7, #4]
 8006b5e:	f000 f857 	bl	8006c10 <UART_WaitOnFlagUntilTimeout>
 8006b62:	4603      	mov	r3, r0
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	d03c      	beq.n	8006be2 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b70:	e853 3f00 	ldrex	r3, [r3]
 8006b74:	623b      	str	r3, [r7, #32]
   return(result);
 8006b76:	6a3b      	ldr	r3, [r7, #32]
 8006b78:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006b7c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	461a      	mov	r2, r3
 8006b84:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006b86:	633b      	str	r3, [r7, #48]	@ 0x30
 8006b88:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b8a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006b8c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006b8e:	e841 2300 	strex	r3, r2, [r1]
 8006b92:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006b94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d1e6      	bne.n	8006b68 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	3308      	adds	r3, #8
 8006ba0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ba2:	693b      	ldr	r3, [r7, #16]
 8006ba4:	e853 3f00 	ldrex	r3, [r3]
 8006ba8:	60fb      	str	r3, [r7, #12]
   return(result);
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	f023 0301 	bic.w	r3, r3, #1
 8006bb0:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	3308      	adds	r3, #8
 8006bb8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006bba:	61fa      	str	r2, [r7, #28]
 8006bbc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bbe:	69b9      	ldr	r1, [r7, #24]
 8006bc0:	69fa      	ldr	r2, [r7, #28]
 8006bc2:	e841 2300 	strex	r3, r2, [r1]
 8006bc6:	617b      	str	r3, [r7, #20]
   return(result);
 8006bc8:	697b      	ldr	r3, [r7, #20]
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d1e5      	bne.n	8006b9a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	2220      	movs	r2, #32
 8006bd2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	2200      	movs	r2, #0
 8006bda:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006bde:	2303      	movs	r3, #3
 8006be0:	e012      	b.n	8006c08 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	2220      	movs	r2, #32
 8006be6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	2220      	movs	r2, #32
 8006bee:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	2200      	movs	r2, #0
 8006bf6:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	2200      	movs	r2, #0
 8006bfc:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	2200      	movs	r2, #0
 8006c02:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006c06:	2300      	movs	r3, #0
}
 8006c08:	4618      	mov	r0, r3
 8006c0a:	3758      	adds	r7, #88	@ 0x58
 8006c0c:	46bd      	mov	sp, r7
 8006c0e:	bd80      	pop	{r7, pc}

08006c10 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006c10:	b580      	push	{r7, lr}
 8006c12:	b084      	sub	sp, #16
 8006c14:	af00      	add	r7, sp, #0
 8006c16:	60f8      	str	r0, [r7, #12]
 8006c18:	60b9      	str	r1, [r7, #8]
 8006c1a:	603b      	str	r3, [r7, #0]
 8006c1c:	4613      	mov	r3, r2
 8006c1e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006c20:	e04f      	b.n	8006cc2 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006c22:	69bb      	ldr	r3, [r7, #24]
 8006c24:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006c28:	d04b      	beq.n	8006cc2 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006c2a:	f7fb f869 	bl	8001d00 <HAL_GetTick>
 8006c2e:	4602      	mov	r2, r0
 8006c30:	683b      	ldr	r3, [r7, #0]
 8006c32:	1ad3      	subs	r3, r2, r3
 8006c34:	69ba      	ldr	r2, [r7, #24]
 8006c36:	429a      	cmp	r2, r3
 8006c38:	d302      	bcc.n	8006c40 <UART_WaitOnFlagUntilTimeout+0x30>
 8006c3a:	69bb      	ldr	r3, [r7, #24]
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d101      	bne.n	8006c44 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006c40:	2303      	movs	r3, #3
 8006c42:	e04e      	b.n	8006ce2 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	f003 0304 	and.w	r3, r3, #4
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d037      	beq.n	8006cc2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8006c52:	68bb      	ldr	r3, [r7, #8]
 8006c54:	2b80      	cmp	r3, #128	@ 0x80
 8006c56:	d034      	beq.n	8006cc2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8006c58:	68bb      	ldr	r3, [r7, #8]
 8006c5a:	2b40      	cmp	r3, #64	@ 0x40
 8006c5c:	d031      	beq.n	8006cc2 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	69db      	ldr	r3, [r3, #28]
 8006c64:	f003 0308 	and.w	r3, r3, #8
 8006c68:	2b08      	cmp	r3, #8
 8006c6a:	d110      	bne.n	8006c8e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	2208      	movs	r2, #8
 8006c72:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006c74:	68f8      	ldr	r0, [r7, #12]
 8006c76:	f000 f839 	bl	8006cec <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	2208      	movs	r2, #8
 8006c7e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	2200      	movs	r2, #0
 8006c86:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8006c8a:	2301      	movs	r3, #1
 8006c8c:	e029      	b.n	8006ce2 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	69db      	ldr	r3, [r3, #28]
 8006c94:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006c98:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006c9c:	d111      	bne.n	8006cc2 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006ca6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006ca8:	68f8      	ldr	r0, [r7, #12]
 8006caa:	f000 f81f 	bl	8006cec <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	2220      	movs	r2, #32
 8006cb2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	2200      	movs	r2, #0
 8006cba:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8006cbe:	2303      	movs	r3, #3
 8006cc0:	e00f      	b.n	8006ce2 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	69da      	ldr	r2, [r3, #28]
 8006cc8:	68bb      	ldr	r3, [r7, #8]
 8006cca:	4013      	ands	r3, r2
 8006ccc:	68ba      	ldr	r2, [r7, #8]
 8006cce:	429a      	cmp	r2, r3
 8006cd0:	bf0c      	ite	eq
 8006cd2:	2301      	moveq	r3, #1
 8006cd4:	2300      	movne	r3, #0
 8006cd6:	b2db      	uxtb	r3, r3
 8006cd8:	461a      	mov	r2, r3
 8006cda:	79fb      	ldrb	r3, [r7, #7]
 8006cdc:	429a      	cmp	r2, r3
 8006cde:	d0a0      	beq.n	8006c22 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006ce0:	2300      	movs	r3, #0
}
 8006ce2:	4618      	mov	r0, r3
 8006ce4:	3710      	adds	r7, #16
 8006ce6:	46bd      	mov	sp, r7
 8006ce8:	bd80      	pop	{r7, pc}
	...

08006cec <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006cec:	b480      	push	{r7}
 8006cee:	b095      	sub	sp, #84	@ 0x54
 8006cf0:	af00      	add	r7, sp, #0
 8006cf2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cfa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006cfc:	e853 3f00 	ldrex	r3, [r3]
 8006d00:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006d02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d04:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006d08:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	461a      	mov	r2, r3
 8006d10:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006d12:	643b      	str	r3, [r7, #64]	@ 0x40
 8006d14:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d16:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006d18:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006d1a:	e841 2300 	strex	r3, r2, [r1]
 8006d1e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006d20:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d1e6      	bne.n	8006cf4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	3308      	adds	r3, #8
 8006d2c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d2e:	6a3b      	ldr	r3, [r7, #32]
 8006d30:	e853 3f00 	ldrex	r3, [r3]
 8006d34:	61fb      	str	r3, [r7, #28]
   return(result);
 8006d36:	69fa      	ldr	r2, [r7, #28]
 8006d38:	4b1e      	ldr	r3, [pc, #120]	@ (8006db4 <UART_EndRxTransfer+0xc8>)
 8006d3a:	4013      	ands	r3, r2
 8006d3c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	3308      	adds	r3, #8
 8006d44:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006d46:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006d48:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d4a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006d4c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006d4e:	e841 2300 	strex	r3, r2, [r1]
 8006d52:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006d54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d1e5      	bne.n	8006d26 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006d5e:	2b01      	cmp	r3, #1
 8006d60:	d118      	bne.n	8006d94 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	e853 3f00 	ldrex	r3, [r3]
 8006d6e:	60bb      	str	r3, [r7, #8]
   return(result);
 8006d70:	68bb      	ldr	r3, [r7, #8]
 8006d72:	f023 0310 	bic.w	r3, r3, #16
 8006d76:	647b      	str	r3, [r7, #68]	@ 0x44
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	461a      	mov	r2, r3
 8006d7e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006d80:	61bb      	str	r3, [r7, #24]
 8006d82:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d84:	6979      	ldr	r1, [r7, #20]
 8006d86:	69ba      	ldr	r2, [r7, #24]
 8006d88:	e841 2300 	strex	r3, r2, [r1]
 8006d8c:	613b      	str	r3, [r7, #16]
   return(result);
 8006d8e:	693b      	ldr	r3, [r7, #16]
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	d1e6      	bne.n	8006d62 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	2220      	movs	r2, #32
 8006d98:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	2200      	movs	r2, #0
 8006da0:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	2200      	movs	r2, #0
 8006da6:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8006da8:	bf00      	nop
 8006daa:	3754      	adds	r7, #84	@ 0x54
 8006dac:	46bd      	mov	sp, r7
 8006dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006db2:	4770      	bx	lr
 8006db4:	effffffe 	.word	0xeffffffe

08006db8 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006db8:	b480      	push	{r7}
 8006dba:	b085      	sub	sp, #20
 8006dbc:	af00      	add	r7, sp, #0
 8006dbe:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8006dc6:	2b01      	cmp	r3, #1
 8006dc8:	d101      	bne.n	8006dce <HAL_UARTEx_DisableFifoMode+0x16>
 8006dca:	2302      	movs	r3, #2
 8006dcc:	e027      	b.n	8006e1e <HAL_UARTEx_DisableFifoMode+0x66>
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	2201      	movs	r2, #1
 8006dd2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	2224      	movs	r2, #36	@ 0x24
 8006dda:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	681a      	ldr	r2, [r3, #0]
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	f022 0201 	bic.w	r2, r2, #1
 8006df4:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8006dfc:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	2200      	movs	r2, #0
 8006e02:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	68fa      	ldr	r2, [r7, #12]
 8006e0a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	2220      	movs	r2, #32
 8006e10:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	2200      	movs	r2, #0
 8006e18:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006e1c:	2300      	movs	r3, #0
}
 8006e1e:	4618      	mov	r0, r3
 8006e20:	3714      	adds	r7, #20
 8006e22:	46bd      	mov	sp, r7
 8006e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e28:	4770      	bx	lr

08006e2a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006e2a:	b580      	push	{r7, lr}
 8006e2c:	b084      	sub	sp, #16
 8006e2e:	af00      	add	r7, sp, #0
 8006e30:	6078      	str	r0, [r7, #4]
 8006e32:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8006e3a:	2b01      	cmp	r3, #1
 8006e3c:	d101      	bne.n	8006e42 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006e3e:	2302      	movs	r3, #2
 8006e40:	e02d      	b.n	8006e9e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	2201      	movs	r2, #1
 8006e46:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	2224      	movs	r2, #36	@ 0x24
 8006e4e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	681a      	ldr	r2, [r3, #0]
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	f022 0201 	bic.w	r2, r2, #1
 8006e68:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	689b      	ldr	r3, [r3, #8]
 8006e70:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	683a      	ldr	r2, [r7, #0]
 8006e7a:	430a      	orrs	r2, r1
 8006e7c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006e7e:	6878      	ldr	r0, [r7, #4]
 8006e80:	f000 f850 	bl	8006f24 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	68fa      	ldr	r2, [r7, #12]
 8006e8a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	2220      	movs	r2, #32
 8006e90:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	2200      	movs	r2, #0
 8006e98:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006e9c:	2300      	movs	r3, #0
}
 8006e9e:	4618      	mov	r0, r3
 8006ea0:	3710      	adds	r7, #16
 8006ea2:	46bd      	mov	sp, r7
 8006ea4:	bd80      	pop	{r7, pc}

08006ea6 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006ea6:	b580      	push	{r7, lr}
 8006ea8:	b084      	sub	sp, #16
 8006eaa:	af00      	add	r7, sp, #0
 8006eac:	6078      	str	r0, [r7, #4]
 8006eae:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8006eb6:	2b01      	cmp	r3, #1
 8006eb8:	d101      	bne.n	8006ebe <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006eba:	2302      	movs	r3, #2
 8006ebc:	e02d      	b.n	8006f1a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	2201      	movs	r2, #1
 8006ec2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	2224      	movs	r2, #36	@ 0x24
 8006eca:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	681a      	ldr	r2, [r3, #0]
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	f022 0201 	bic.w	r2, r2, #1
 8006ee4:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	689b      	ldr	r3, [r3, #8]
 8006eec:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	683a      	ldr	r2, [r7, #0]
 8006ef6:	430a      	orrs	r2, r1
 8006ef8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006efa:	6878      	ldr	r0, [r7, #4]
 8006efc:	f000 f812 	bl	8006f24 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	68fa      	ldr	r2, [r7, #12]
 8006f06:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	2220      	movs	r2, #32
 8006f0c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	2200      	movs	r2, #0
 8006f14:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006f18:	2300      	movs	r3, #0
}
 8006f1a:	4618      	mov	r0, r3
 8006f1c:	3710      	adds	r7, #16
 8006f1e:	46bd      	mov	sp, r7
 8006f20:	bd80      	pop	{r7, pc}
	...

08006f24 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006f24:	b480      	push	{r7}
 8006f26:	b085      	sub	sp, #20
 8006f28:	af00      	add	r7, sp, #0
 8006f2a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	d108      	bne.n	8006f46 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	2201      	movs	r2, #1
 8006f38:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	2201      	movs	r2, #1
 8006f40:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006f44:	e031      	b.n	8006faa <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8006f46:	2310      	movs	r3, #16
 8006f48:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8006f4a:	2310      	movs	r3, #16
 8006f4c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	689b      	ldr	r3, [r3, #8]
 8006f54:	0e5b      	lsrs	r3, r3, #25
 8006f56:	b2db      	uxtb	r3, r3
 8006f58:	f003 0307 	and.w	r3, r3, #7
 8006f5c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	689b      	ldr	r3, [r3, #8]
 8006f64:	0f5b      	lsrs	r3, r3, #29
 8006f66:	b2db      	uxtb	r3, r3
 8006f68:	f003 0307 	and.w	r3, r3, #7
 8006f6c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006f6e:	7bbb      	ldrb	r3, [r7, #14]
 8006f70:	7b3a      	ldrb	r2, [r7, #12]
 8006f72:	4911      	ldr	r1, [pc, #68]	@ (8006fb8 <UARTEx_SetNbDataToProcess+0x94>)
 8006f74:	5c8a      	ldrb	r2, [r1, r2]
 8006f76:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8006f7a:	7b3a      	ldrb	r2, [r7, #12]
 8006f7c:	490f      	ldr	r1, [pc, #60]	@ (8006fbc <UARTEx_SetNbDataToProcess+0x98>)
 8006f7e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006f80:	fb93 f3f2 	sdiv	r3, r3, r2
 8006f84:	b29a      	uxth	r2, r3
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006f8c:	7bfb      	ldrb	r3, [r7, #15]
 8006f8e:	7b7a      	ldrb	r2, [r7, #13]
 8006f90:	4909      	ldr	r1, [pc, #36]	@ (8006fb8 <UARTEx_SetNbDataToProcess+0x94>)
 8006f92:	5c8a      	ldrb	r2, [r1, r2]
 8006f94:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8006f98:	7b7a      	ldrb	r2, [r7, #13]
 8006f9a:	4908      	ldr	r1, [pc, #32]	@ (8006fbc <UARTEx_SetNbDataToProcess+0x98>)
 8006f9c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006f9e:	fb93 f3f2 	sdiv	r3, r3, r2
 8006fa2:	b29a      	uxth	r2, r3
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8006faa:	bf00      	nop
 8006fac:	3714      	adds	r7, #20
 8006fae:	46bd      	mov	sp, r7
 8006fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fb4:	4770      	bx	lr
 8006fb6:	bf00      	nop
 8006fb8:	0801c5b4 	.word	0x0801c5b4
 8006fbc:	0801c5bc 	.word	0x0801c5bc

08006fc0 <siprintf>:
 8006fc0:	b40e      	push	{r1, r2, r3}
 8006fc2:	b500      	push	{lr}
 8006fc4:	b09c      	sub	sp, #112	@ 0x70
 8006fc6:	ab1d      	add	r3, sp, #116	@ 0x74
 8006fc8:	9002      	str	r0, [sp, #8]
 8006fca:	9006      	str	r0, [sp, #24]
 8006fcc:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8006fd0:	4809      	ldr	r0, [pc, #36]	@ (8006ff8 <siprintf+0x38>)
 8006fd2:	9107      	str	r1, [sp, #28]
 8006fd4:	9104      	str	r1, [sp, #16]
 8006fd6:	4909      	ldr	r1, [pc, #36]	@ (8006ffc <siprintf+0x3c>)
 8006fd8:	f853 2b04 	ldr.w	r2, [r3], #4
 8006fdc:	9105      	str	r1, [sp, #20]
 8006fde:	6800      	ldr	r0, [r0, #0]
 8006fe0:	9301      	str	r3, [sp, #4]
 8006fe2:	a902      	add	r1, sp, #8
 8006fe4:	f000 f9a2 	bl	800732c <_svfiprintf_r>
 8006fe8:	9b02      	ldr	r3, [sp, #8]
 8006fea:	2200      	movs	r2, #0
 8006fec:	701a      	strb	r2, [r3, #0]
 8006fee:	b01c      	add	sp, #112	@ 0x70
 8006ff0:	f85d eb04 	ldr.w	lr, [sp], #4
 8006ff4:	b003      	add	sp, #12
 8006ff6:	4770      	bx	lr
 8006ff8:	24000010 	.word	0x24000010
 8006ffc:	ffff0208 	.word	0xffff0208

08007000 <memset>:
 8007000:	4402      	add	r2, r0
 8007002:	4603      	mov	r3, r0
 8007004:	4293      	cmp	r3, r2
 8007006:	d100      	bne.n	800700a <memset+0xa>
 8007008:	4770      	bx	lr
 800700a:	f803 1b01 	strb.w	r1, [r3], #1
 800700e:	e7f9      	b.n	8007004 <memset+0x4>

08007010 <__errno>:
 8007010:	4b01      	ldr	r3, [pc, #4]	@ (8007018 <__errno+0x8>)
 8007012:	6818      	ldr	r0, [r3, #0]
 8007014:	4770      	bx	lr
 8007016:	bf00      	nop
 8007018:	24000010 	.word	0x24000010

0800701c <__libc_init_array>:
 800701c:	b570      	push	{r4, r5, r6, lr}
 800701e:	4d0d      	ldr	r5, [pc, #52]	@ (8007054 <__libc_init_array+0x38>)
 8007020:	4c0d      	ldr	r4, [pc, #52]	@ (8007058 <__libc_init_array+0x3c>)
 8007022:	1b64      	subs	r4, r4, r5
 8007024:	10a4      	asrs	r4, r4, #2
 8007026:	2600      	movs	r6, #0
 8007028:	42a6      	cmp	r6, r4
 800702a:	d109      	bne.n	8007040 <__libc_init_array+0x24>
 800702c:	4d0b      	ldr	r5, [pc, #44]	@ (800705c <__libc_init_array+0x40>)
 800702e:	4c0c      	ldr	r4, [pc, #48]	@ (8007060 <__libc_init_array+0x44>)
 8007030:	f000 fc66 	bl	8007900 <_init>
 8007034:	1b64      	subs	r4, r4, r5
 8007036:	10a4      	asrs	r4, r4, #2
 8007038:	2600      	movs	r6, #0
 800703a:	42a6      	cmp	r6, r4
 800703c:	d105      	bne.n	800704a <__libc_init_array+0x2e>
 800703e:	bd70      	pop	{r4, r5, r6, pc}
 8007040:	f855 3b04 	ldr.w	r3, [r5], #4
 8007044:	4798      	blx	r3
 8007046:	3601      	adds	r6, #1
 8007048:	e7ee      	b.n	8007028 <__libc_init_array+0xc>
 800704a:	f855 3b04 	ldr.w	r3, [r5], #4
 800704e:	4798      	blx	r3
 8007050:	3601      	adds	r6, #1
 8007052:	e7f2      	b.n	800703a <__libc_init_array+0x1e>
 8007054:	0801c600 	.word	0x0801c600
 8007058:	0801c600 	.word	0x0801c600
 800705c:	0801c600 	.word	0x0801c600
 8007060:	0801c604 	.word	0x0801c604

08007064 <__retarget_lock_acquire_recursive>:
 8007064:	4770      	bx	lr

08007066 <__retarget_lock_release_recursive>:
 8007066:	4770      	bx	lr

08007068 <memcpy>:
 8007068:	440a      	add	r2, r1
 800706a:	4291      	cmp	r1, r2
 800706c:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8007070:	d100      	bne.n	8007074 <memcpy+0xc>
 8007072:	4770      	bx	lr
 8007074:	b510      	push	{r4, lr}
 8007076:	f811 4b01 	ldrb.w	r4, [r1], #1
 800707a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800707e:	4291      	cmp	r1, r2
 8007080:	d1f9      	bne.n	8007076 <memcpy+0xe>
 8007082:	bd10      	pop	{r4, pc}

08007084 <_free_r>:
 8007084:	b538      	push	{r3, r4, r5, lr}
 8007086:	4605      	mov	r5, r0
 8007088:	2900      	cmp	r1, #0
 800708a:	d041      	beq.n	8007110 <_free_r+0x8c>
 800708c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007090:	1f0c      	subs	r4, r1, #4
 8007092:	2b00      	cmp	r3, #0
 8007094:	bfb8      	it	lt
 8007096:	18e4      	addlt	r4, r4, r3
 8007098:	f000 f8e0 	bl	800725c <__malloc_lock>
 800709c:	4a1d      	ldr	r2, [pc, #116]	@ (8007114 <_free_r+0x90>)
 800709e:	6813      	ldr	r3, [r2, #0]
 80070a0:	b933      	cbnz	r3, 80070b0 <_free_r+0x2c>
 80070a2:	6063      	str	r3, [r4, #4]
 80070a4:	6014      	str	r4, [r2, #0]
 80070a6:	4628      	mov	r0, r5
 80070a8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80070ac:	f000 b8dc 	b.w	8007268 <__malloc_unlock>
 80070b0:	42a3      	cmp	r3, r4
 80070b2:	d908      	bls.n	80070c6 <_free_r+0x42>
 80070b4:	6820      	ldr	r0, [r4, #0]
 80070b6:	1821      	adds	r1, r4, r0
 80070b8:	428b      	cmp	r3, r1
 80070ba:	bf01      	itttt	eq
 80070bc:	6819      	ldreq	r1, [r3, #0]
 80070be:	685b      	ldreq	r3, [r3, #4]
 80070c0:	1809      	addeq	r1, r1, r0
 80070c2:	6021      	streq	r1, [r4, #0]
 80070c4:	e7ed      	b.n	80070a2 <_free_r+0x1e>
 80070c6:	461a      	mov	r2, r3
 80070c8:	685b      	ldr	r3, [r3, #4]
 80070ca:	b10b      	cbz	r3, 80070d0 <_free_r+0x4c>
 80070cc:	42a3      	cmp	r3, r4
 80070ce:	d9fa      	bls.n	80070c6 <_free_r+0x42>
 80070d0:	6811      	ldr	r1, [r2, #0]
 80070d2:	1850      	adds	r0, r2, r1
 80070d4:	42a0      	cmp	r0, r4
 80070d6:	d10b      	bne.n	80070f0 <_free_r+0x6c>
 80070d8:	6820      	ldr	r0, [r4, #0]
 80070da:	4401      	add	r1, r0
 80070dc:	1850      	adds	r0, r2, r1
 80070de:	4283      	cmp	r3, r0
 80070e0:	6011      	str	r1, [r2, #0]
 80070e2:	d1e0      	bne.n	80070a6 <_free_r+0x22>
 80070e4:	6818      	ldr	r0, [r3, #0]
 80070e6:	685b      	ldr	r3, [r3, #4]
 80070e8:	6053      	str	r3, [r2, #4]
 80070ea:	4408      	add	r0, r1
 80070ec:	6010      	str	r0, [r2, #0]
 80070ee:	e7da      	b.n	80070a6 <_free_r+0x22>
 80070f0:	d902      	bls.n	80070f8 <_free_r+0x74>
 80070f2:	230c      	movs	r3, #12
 80070f4:	602b      	str	r3, [r5, #0]
 80070f6:	e7d6      	b.n	80070a6 <_free_r+0x22>
 80070f8:	6820      	ldr	r0, [r4, #0]
 80070fa:	1821      	adds	r1, r4, r0
 80070fc:	428b      	cmp	r3, r1
 80070fe:	bf04      	itt	eq
 8007100:	6819      	ldreq	r1, [r3, #0]
 8007102:	685b      	ldreq	r3, [r3, #4]
 8007104:	6063      	str	r3, [r4, #4]
 8007106:	bf04      	itt	eq
 8007108:	1809      	addeq	r1, r1, r0
 800710a:	6021      	streq	r1, [r4, #0]
 800710c:	6054      	str	r4, [r2, #4]
 800710e:	e7ca      	b.n	80070a6 <_free_r+0x22>
 8007110:	bd38      	pop	{r3, r4, r5, pc}
 8007112:	bf00      	nop
 8007114:	240002a8 	.word	0x240002a8

08007118 <sbrk_aligned>:
 8007118:	b570      	push	{r4, r5, r6, lr}
 800711a:	4e0f      	ldr	r6, [pc, #60]	@ (8007158 <sbrk_aligned+0x40>)
 800711c:	460c      	mov	r4, r1
 800711e:	6831      	ldr	r1, [r6, #0]
 8007120:	4605      	mov	r5, r0
 8007122:	b911      	cbnz	r1, 800712a <sbrk_aligned+0x12>
 8007124:	f000 fba6 	bl	8007874 <_sbrk_r>
 8007128:	6030      	str	r0, [r6, #0]
 800712a:	4621      	mov	r1, r4
 800712c:	4628      	mov	r0, r5
 800712e:	f000 fba1 	bl	8007874 <_sbrk_r>
 8007132:	1c43      	adds	r3, r0, #1
 8007134:	d103      	bne.n	800713e <sbrk_aligned+0x26>
 8007136:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800713a:	4620      	mov	r0, r4
 800713c:	bd70      	pop	{r4, r5, r6, pc}
 800713e:	1cc4      	adds	r4, r0, #3
 8007140:	f024 0403 	bic.w	r4, r4, #3
 8007144:	42a0      	cmp	r0, r4
 8007146:	d0f8      	beq.n	800713a <sbrk_aligned+0x22>
 8007148:	1a21      	subs	r1, r4, r0
 800714a:	4628      	mov	r0, r5
 800714c:	f000 fb92 	bl	8007874 <_sbrk_r>
 8007150:	3001      	adds	r0, #1
 8007152:	d1f2      	bne.n	800713a <sbrk_aligned+0x22>
 8007154:	e7ef      	b.n	8007136 <sbrk_aligned+0x1e>
 8007156:	bf00      	nop
 8007158:	240002a4 	.word	0x240002a4

0800715c <_malloc_r>:
 800715c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007160:	1ccd      	adds	r5, r1, #3
 8007162:	f025 0503 	bic.w	r5, r5, #3
 8007166:	3508      	adds	r5, #8
 8007168:	2d0c      	cmp	r5, #12
 800716a:	bf38      	it	cc
 800716c:	250c      	movcc	r5, #12
 800716e:	2d00      	cmp	r5, #0
 8007170:	4606      	mov	r6, r0
 8007172:	db01      	blt.n	8007178 <_malloc_r+0x1c>
 8007174:	42a9      	cmp	r1, r5
 8007176:	d904      	bls.n	8007182 <_malloc_r+0x26>
 8007178:	230c      	movs	r3, #12
 800717a:	6033      	str	r3, [r6, #0]
 800717c:	2000      	movs	r0, #0
 800717e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007182:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007258 <_malloc_r+0xfc>
 8007186:	f000 f869 	bl	800725c <__malloc_lock>
 800718a:	f8d8 3000 	ldr.w	r3, [r8]
 800718e:	461c      	mov	r4, r3
 8007190:	bb44      	cbnz	r4, 80071e4 <_malloc_r+0x88>
 8007192:	4629      	mov	r1, r5
 8007194:	4630      	mov	r0, r6
 8007196:	f7ff ffbf 	bl	8007118 <sbrk_aligned>
 800719a:	1c43      	adds	r3, r0, #1
 800719c:	4604      	mov	r4, r0
 800719e:	d158      	bne.n	8007252 <_malloc_r+0xf6>
 80071a0:	f8d8 4000 	ldr.w	r4, [r8]
 80071a4:	4627      	mov	r7, r4
 80071a6:	2f00      	cmp	r7, #0
 80071a8:	d143      	bne.n	8007232 <_malloc_r+0xd6>
 80071aa:	2c00      	cmp	r4, #0
 80071ac:	d04b      	beq.n	8007246 <_malloc_r+0xea>
 80071ae:	6823      	ldr	r3, [r4, #0]
 80071b0:	4639      	mov	r1, r7
 80071b2:	4630      	mov	r0, r6
 80071b4:	eb04 0903 	add.w	r9, r4, r3
 80071b8:	f000 fb5c 	bl	8007874 <_sbrk_r>
 80071bc:	4581      	cmp	r9, r0
 80071be:	d142      	bne.n	8007246 <_malloc_r+0xea>
 80071c0:	6821      	ldr	r1, [r4, #0]
 80071c2:	1a6d      	subs	r5, r5, r1
 80071c4:	4629      	mov	r1, r5
 80071c6:	4630      	mov	r0, r6
 80071c8:	f7ff ffa6 	bl	8007118 <sbrk_aligned>
 80071cc:	3001      	adds	r0, #1
 80071ce:	d03a      	beq.n	8007246 <_malloc_r+0xea>
 80071d0:	6823      	ldr	r3, [r4, #0]
 80071d2:	442b      	add	r3, r5
 80071d4:	6023      	str	r3, [r4, #0]
 80071d6:	f8d8 3000 	ldr.w	r3, [r8]
 80071da:	685a      	ldr	r2, [r3, #4]
 80071dc:	bb62      	cbnz	r2, 8007238 <_malloc_r+0xdc>
 80071de:	f8c8 7000 	str.w	r7, [r8]
 80071e2:	e00f      	b.n	8007204 <_malloc_r+0xa8>
 80071e4:	6822      	ldr	r2, [r4, #0]
 80071e6:	1b52      	subs	r2, r2, r5
 80071e8:	d420      	bmi.n	800722c <_malloc_r+0xd0>
 80071ea:	2a0b      	cmp	r2, #11
 80071ec:	d917      	bls.n	800721e <_malloc_r+0xc2>
 80071ee:	1961      	adds	r1, r4, r5
 80071f0:	42a3      	cmp	r3, r4
 80071f2:	6025      	str	r5, [r4, #0]
 80071f4:	bf18      	it	ne
 80071f6:	6059      	strne	r1, [r3, #4]
 80071f8:	6863      	ldr	r3, [r4, #4]
 80071fa:	bf08      	it	eq
 80071fc:	f8c8 1000 	streq.w	r1, [r8]
 8007200:	5162      	str	r2, [r4, r5]
 8007202:	604b      	str	r3, [r1, #4]
 8007204:	4630      	mov	r0, r6
 8007206:	f000 f82f 	bl	8007268 <__malloc_unlock>
 800720a:	f104 000b 	add.w	r0, r4, #11
 800720e:	1d23      	adds	r3, r4, #4
 8007210:	f020 0007 	bic.w	r0, r0, #7
 8007214:	1ac2      	subs	r2, r0, r3
 8007216:	bf1c      	itt	ne
 8007218:	1a1b      	subne	r3, r3, r0
 800721a:	50a3      	strne	r3, [r4, r2]
 800721c:	e7af      	b.n	800717e <_malloc_r+0x22>
 800721e:	6862      	ldr	r2, [r4, #4]
 8007220:	42a3      	cmp	r3, r4
 8007222:	bf0c      	ite	eq
 8007224:	f8c8 2000 	streq.w	r2, [r8]
 8007228:	605a      	strne	r2, [r3, #4]
 800722a:	e7eb      	b.n	8007204 <_malloc_r+0xa8>
 800722c:	4623      	mov	r3, r4
 800722e:	6864      	ldr	r4, [r4, #4]
 8007230:	e7ae      	b.n	8007190 <_malloc_r+0x34>
 8007232:	463c      	mov	r4, r7
 8007234:	687f      	ldr	r7, [r7, #4]
 8007236:	e7b6      	b.n	80071a6 <_malloc_r+0x4a>
 8007238:	461a      	mov	r2, r3
 800723a:	685b      	ldr	r3, [r3, #4]
 800723c:	42a3      	cmp	r3, r4
 800723e:	d1fb      	bne.n	8007238 <_malloc_r+0xdc>
 8007240:	2300      	movs	r3, #0
 8007242:	6053      	str	r3, [r2, #4]
 8007244:	e7de      	b.n	8007204 <_malloc_r+0xa8>
 8007246:	230c      	movs	r3, #12
 8007248:	6033      	str	r3, [r6, #0]
 800724a:	4630      	mov	r0, r6
 800724c:	f000 f80c 	bl	8007268 <__malloc_unlock>
 8007250:	e794      	b.n	800717c <_malloc_r+0x20>
 8007252:	6005      	str	r5, [r0, #0]
 8007254:	e7d6      	b.n	8007204 <_malloc_r+0xa8>
 8007256:	bf00      	nop
 8007258:	240002a8 	.word	0x240002a8

0800725c <__malloc_lock>:
 800725c:	4801      	ldr	r0, [pc, #4]	@ (8007264 <__malloc_lock+0x8>)
 800725e:	f7ff bf01 	b.w	8007064 <__retarget_lock_acquire_recursive>
 8007262:	bf00      	nop
 8007264:	240002a0 	.word	0x240002a0

08007268 <__malloc_unlock>:
 8007268:	4801      	ldr	r0, [pc, #4]	@ (8007270 <__malloc_unlock+0x8>)
 800726a:	f7ff befc 	b.w	8007066 <__retarget_lock_release_recursive>
 800726e:	bf00      	nop
 8007270:	240002a0 	.word	0x240002a0

08007274 <__ssputs_r>:
 8007274:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007278:	688e      	ldr	r6, [r1, #8]
 800727a:	461f      	mov	r7, r3
 800727c:	42be      	cmp	r6, r7
 800727e:	680b      	ldr	r3, [r1, #0]
 8007280:	4682      	mov	sl, r0
 8007282:	460c      	mov	r4, r1
 8007284:	4690      	mov	r8, r2
 8007286:	d82d      	bhi.n	80072e4 <__ssputs_r+0x70>
 8007288:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800728c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8007290:	d026      	beq.n	80072e0 <__ssputs_r+0x6c>
 8007292:	6965      	ldr	r5, [r4, #20]
 8007294:	6909      	ldr	r1, [r1, #16]
 8007296:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800729a:	eba3 0901 	sub.w	r9, r3, r1
 800729e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80072a2:	1c7b      	adds	r3, r7, #1
 80072a4:	444b      	add	r3, r9
 80072a6:	106d      	asrs	r5, r5, #1
 80072a8:	429d      	cmp	r5, r3
 80072aa:	bf38      	it	cc
 80072ac:	461d      	movcc	r5, r3
 80072ae:	0553      	lsls	r3, r2, #21
 80072b0:	d527      	bpl.n	8007302 <__ssputs_r+0x8e>
 80072b2:	4629      	mov	r1, r5
 80072b4:	f7ff ff52 	bl	800715c <_malloc_r>
 80072b8:	4606      	mov	r6, r0
 80072ba:	b360      	cbz	r0, 8007316 <__ssputs_r+0xa2>
 80072bc:	6921      	ldr	r1, [r4, #16]
 80072be:	464a      	mov	r2, r9
 80072c0:	f7ff fed2 	bl	8007068 <memcpy>
 80072c4:	89a3      	ldrh	r3, [r4, #12]
 80072c6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80072ca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80072ce:	81a3      	strh	r3, [r4, #12]
 80072d0:	6126      	str	r6, [r4, #16]
 80072d2:	6165      	str	r5, [r4, #20]
 80072d4:	444e      	add	r6, r9
 80072d6:	eba5 0509 	sub.w	r5, r5, r9
 80072da:	6026      	str	r6, [r4, #0]
 80072dc:	60a5      	str	r5, [r4, #8]
 80072de:	463e      	mov	r6, r7
 80072e0:	42be      	cmp	r6, r7
 80072e2:	d900      	bls.n	80072e6 <__ssputs_r+0x72>
 80072e4:	463e      	mov	r6, r7
 80072e6:	6820      	ldr	r0, [r4, #0]
 80072e8:	4632      	mov	r2, r6
 80072ea:	4641      	mov	r1, r8
 80072ec:	f000 faa8 	bl	8007840 <memmove>
 80072f0:	68a3      	ldr	r3, [r4, #8]
 80072f2:	1b9b      	subs	r3, r3, r6
 80072f4:	60a3      	str	r3, [r4, #8]
 80072f6:	6823      	ldr	r3, [r4, #0]
 80072f8:	4433      	add	r3, r6
 80072fa:	6023      	str	r3, [r4, #0]
 80072fc:	2000      	movs	r0, #0
 80072fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007302:	462a      	mov	r2, r5
 8007304:	f000 fac6 	bl	8007894 <_realloc_r>
 8007308:	4606      	mov	r6, r0
 800730a:	2800      	cmp	r0, #0
 800730c:	d1e0      	bne.n	80072d0 <__ssputs_r+0x5c>
 800730e:	6921      	ldr	r1, [r4, #16]
 8007310:	4650      	mov	r0, sl
 8007312:	f7ff feb7 	bl	8007084 <_free_r>
 8007316:	230c      	movs	r3, #12
 8007318:	f8ca 3000 	str.w	r3, [sl]
 800731c:	89a3      	ldrh	r3, [r4, #12]
 800731e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007322:	81a3      	strh	r3, [r4, #12]
 8007324:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007328:	e7e9      	b.n	80072fe <__ssputs_r+0x8a>
	...

0800732c <_svfiprintf_r>:
 800732c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007330:	4698      	mov	r8, r3
 8007332:	898b      	ldrh	r3, [r1, #12]
 8007334:	061b      	lsls	r3, r3, #24
 8007336:	b09d      	sub	sp, #116	@ 0x74
 8007338:	4607      	mov	r7, r0
 800733a:	460d      	mov	r5, r1
 800733c:	4614      	mov	r4, r2
 800733e:	d510      	bpl.n	8007362 <_svfiprintf_r+0x36>
 8007340:	690b      	ldr	r3, [r1, #16]
 8007342:	b973      	cbnz	r3, 8007362 <_svfiprintf_r+0x36>
 8007344:	2140      	movs	r1, #64	@ 0x40
 8007346:	f7ff ff09 	bl	800715c <_malloc_r>
 800734a:	6028      	str	r0, [r5, #0]
 800734c:	6128      	str	r0, [r5, #16]
 800734e:	b930      	cbnz	r0, 800735e <_svfiprintf_r+0x32>
 8007350:	230c      	movs	r3, #12
 8007352:	603b      	str	r3, [r7, #0]
 8007354:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007358:	b01d      	add	sp, #116	@ 0x74
 800735a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800735e:	2340      	movs	r3, #64	@ 0x40
 8007360:	616b      	str	r3, [r5, #20]
 8007362:	2300      	movs	r3, #0
 8007364:	9309      	str	r3, [sp, #36]	@ 0x24
 8007366:	2320      	movs	r3, #32
 8007368:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800736c:	f8cd 800c 	str.w	r8, [sp, #12]
 8007370:	2330      	movs	r3, #48	@ 0x30
 8007372:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8007510 <_svfiprintf_r+0x1e4>
 8007376:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800737a:	f04f 0901 	mov.w	r9, #1
 800737e:	4623      	mov	r3, r4
 8007380:	469a      	mov	sl, r3
 8007382:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007386:	b10a      	cbz	r2, 800738c <_svfiprintf_r+0x60>
 8007388:	2a25      	cmp	r2, #37	@ 0x25
 800738a:	d1f9      	bne.n	8007380 <_svfiprintf_r+0x54>
 800738c:	ebba 0b04 	subs.w	fp, sl, r4
 8007390:	d00b      	beq.n	80073aa <_svfiprintf_r+0x7e>
 8007392:	465b      	mov	r3, fp
 8007394:	4622      	mov	r2, r4
 8007396:	4629      	mov	r1, r5
 8007398:	4638      	mov	r0, r7
 800739a:	f7ff ff6b 	bl	8007274 <__ssputs_r>
 800739e:	3001      	adds	r0, #1
 80073a0:	f000 80a7 	beq.w	80074f2 <_svfiprintf_r+0x1c6>
 80073a4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80073a6:	445a      	add	r2, fp
 80073a8:	9209      	str	r2, [sp, #36]	@ 0x24
 80073aa:	f89a 3000 	ldrb.w	r3, [sl]
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	f000 809f 	beq.w	80074f2 <_svfiprintf_r+0x1c6>
 80073b4:	2300      	movs	r3, #0
 80073b6:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80073ba:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80073be:	f10a 0a01 	add.w	sl, sl, #1
 80073c2:	9304      	str	r3, [sp, #16]
 80073c4:	9307      	str	r3, [sp, #28]
 80073c6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80073ca:	931a      	str	r3, [sp, #104]	@ 0x68
 80073cc:	4654      	mov	r4, sl
 80073ce:	2205      	movs	r2, #5
 80073d0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80073d4:	484e      	ldr	r0, [pc, #312]	@ (8007510 <_svfiprintf_r+0x1e4>)
 80073d6:	f7f8 ff9b 	bl	8000310 <memchr>
 80073da:	9a04      	ldr	r2, [sp, #16]
 80073dc:	b9d8      	cbnz	r0, 8007416 <_svfiprintf_r+0xea>
 80073de:	06d0      	lsls	r0, r2, #27
 80073e0:	bf44      	itt	mi
 80073e2:	2320      	movmi	r3, #32
 80073e4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80073e8:	0711      	lsls	r1, r2, #28
 80073ea:	bf44      	itt	mi
 80073ec:	232b      	movmi	r3, #43	@ 0x2b
 80073ee:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80073f2:	f89a 3000 	ldrb.w	r3, [sl]
 80073f6:	2b2a      	cmp	r3, #42	@ 0x2a
 80073f8:	d015      	beq.n	8007426 <_svfiprintf_r+0xfa>
 80073fa:	9a07      	ldr	r2, [sp, #28]
 80073fc:	4654      	mov	r4, sl
 80073fe:	2000      	movs	r0, #0
 8007400:	f04f 0c0a 	mov.w	ip, #10
 8007404:	4621      	mov	r1, r4
 8007406:	f811 3b01 	ldrb.w	r3, [r1], #1
 800740a:	3b30      	subs	r3, #48	@ 0x30
 800740c:	2b09      	cmp	r3, #9
 800740e:	d94b      	bls.n	80074a8 <_svfiprintf_r+0x17c>
 8007410:	b1b0      	cbz	r0, 8007440 <_svfiprintf_r+0x114>
 8007412:	9207      	str	r2, [sp, #28]
 8007414:	e014      	b.n	8007440 <_svfiprintf_r+0x114>
 8007416:	eba0 0308 	sub.w	r3, r0, r8
 800741a:	fa09 f303 	lsl.w	r3, r9, r3
 800741e:	4313      	orrs	r3, r2
 8007420:	9304      	str	r3, [sp, #16]
 8007422:	46a2      	mov	sl, r4
 8007424:	e7d2      	b.n	80073cc <_svfiprintf_r+0xa0>
 8007426:	9b03      	ldr	r3, [sp, #12]
 8007428:	1d19      	adds	r1, r3, #4
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	9103      	str	r1, [sp, #12]
 800742e:	2b00      	cmp	r3, #0
 8007430:	bfbb      	ittet	lt
 8007432:	425b      	neglt	r3, r3
 8007434:	f042 0202 	orrlt.w	r2, r2, #2
 8007438:	9307      	strge	r3, [sp, #28]
 800743a:	9307      	strlt	r3, [sp, #28]
 800743c:	bfb8      	it	lt
 800743e:	9204      	strlt	r2, [sp, #16]
 8007440:	7823      	ldrb	r3, [r4, #0]
 8007442:	2b2e      	cmp	r3, #46	@ 0x2e
 8007444:	d10a      	bne.n	800745c <_svfiprintf_r+0x130>
 8007446:	7863      	ldrb	r3, [r4, #1]
 8007448:	2b2a      	cmp	r3, #42	@ 0x2a
 800744a:	d132      	bne.n	80074b2 <_svfiprintf_r+0x186>
 800744c:	9b03      	ldr	r3, [sp, #12]
 800744e:	1d1a      	adds	r2, r3, #4
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	9203      	str	r2, [sp, #12]
 8007454:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007458:	3402      	adds	r4, #2
 800745a:	9305      	str	r3, [sp, #20]
 800745c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8007520 <_svfiprintf_r+0x1f4>
 8007460:	7821      	ldrb	r1, [r4, #0]
 8007462:	2203      	movs	r2, #3
 8007464:	4650      	mov	r0, sl
 8007466:	f7f8 ff53 	bl	8000310 <memchr>
 800746a:	b138      	cbz	r0, 800747c <_svfiprintf_r+0x150>
 800746c:	9b04      	ldr	r3, [sp, #16]
 800746e:	eba0 000a 	sub.w	r0, r0, sl
 8007472:	2240      	movs	r2, #64	@ 0x40
 8007474:	4082      	lsls	r2, r0
 8007476:	4313      	orrs	r3, r2
 8007478:	3401      	adds	r4, #1
 800747a:	9304      	str	r3, [sp, #16]
 800747c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007480:	4824      	ldr	r0, [pc, #144]	@ (8007514 <_svfiprintf_r+0x1e8>)
 8007482:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007486:	2206      	movs	r2, #6
 8007488:	f7f8 ff42 	bl	8000310 <memchr>
 800748c:	2800      	cmp	r0, #0
 800748e:	d036      	beq.n	80074fe <_svfiprintf_r+0x1d2>
 8007490:	4b21      	ldr	r3, [pc, #132]	@ (8007518 <_svfiprintf_r+0x1ec>)
 8007492:	bb1b      	cbnz	r3, 80074dc <_svfiprintf_r+0x1b0>
 8007494:	9b03      	ldr	r3, [sp, #12]
 8007496:	3307      	adds	r3, #7
 8007498:	f023 0307 	bic.w	r3, r3, #7
 800749c:	3308      	adds	r3, #8
 800749e:	9303      	str	r3, [sp, #12]
 80074a0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80074a2:	4433      	add	r3, r6
 80074a4:	9309      	str	r3, [sp, #36]	@ 0x24
 80074a6:	e76a      	b.n	800737e <_svfiprintf_r+0x52>
 80074a8:	fb0c 3202 	mla	r2, ip, r2, r3
 80074ac:	460c      	mov	r4, r1
 80074ae:	2001      	movs	r0, #1
 80074b0:	e7a8      	b.n	8007404 <_svfiprintf_r+0xd8>
 80074b2:	2300      	movs	r3, #0
 80074b4:	3401      	adds	r4, #1
 80074b6:	9305      	str	r3, [sp, #20]
 80074b8:	4619      	mov	r1, r3
 80074ba:	f04f 0c0a 	mov.w	ip, #10
 80074be:	4620      	mov	r0, r4
 80074c0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80074c4:	3a30      	subs	r2, #48	@ 0x30
 80074c6:	2a09      	cmp	r2, #9
 80074c8:	d903      	bls.n	80074d2 <_svfiprintf_r+0x1a6>
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	d0c6      	beq.n	800745c <_svfiprintf_r+0x130>
 80074ce:	9105      	str	r1, [sp, #20]
 80074d0:	e7c4      	b.n	800745c <_svfiprintf_r+0x130>
 80074d2:	fb0c 2101 	mla	r1, ip, r1, r2
 80074d6:	4604      	mov	r4, r0
 80074d8:	2301      	movs	r3, #1
 80074da:	e7f0      	b.n	80074be <_svfiprintf_r+0x192>
 80074dc:	ab03      	add	r3, sp, #12
 80074de:	9300      	str	r3, [sp, #0]
 80074e0:	462a      	mov	r2, r5
 80074e2:	4b0e      	ldr	r3, [pc, #56]	@ (800751c <_svfiprintf_r+0x1f0>)
 80074e4:	a904      	add	r1, sp, #16
 80074e6:	4638      	mov	r0, r7
 80074e8:	f3af 8000 	nop.w
 80074ec:	1c42      	adds	r2, r0, #1
 80074ee:	4606      	mov	r6, r0
 80074f0:	d1d6      	bne.n	80074a0 <_svfiprintf_r+0x174>
 80074f2:	89ab      	ldrh	r3, [r5, #12]
 80074f4:	065b      	lsls	r3, r3, #25
 80074f6:	f53f af2d 	bmi.w	8007354 <_svfiprintf_r+0x28>
 80074fa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80074fc:	e72c      	b.n	8007358 <_svfiprintf_r+0x2c>
 80074fe:	ab03      	add	r3, sp, #12
 8007500:	9300      	str	r3, [sp, #0]
 8007502:	462a      	mov	r2, r5
 8007504:	4b05      	ldr	r3, [pc, #20]	@ (800751c <_svfiprintf_r+0x1f0>)
 8007506:	a904      	add	r1, sp, #16
 8007508:	4638      	mov	r0, r7
 800750a:	f000 f879 	bl	8007600 <_printf_i>
 800750e:	e7ed      	b.n	80074ec <_svfiprintf_r+0x1c0>
 8007510:	0801c5c4 	.word	0x0801c5c4
 8007514:	0801c5ce 	.word	0x0801c5ce
 8007518:	00000000 	.word	0x00000000
 800751c:	08007275 	.word	0x08007275
 8007520:	0801c5ca 	.word	0x0801c5ca

08007524 <_printf_common>:
 8007524:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007528:	4616      	mov	r6, r2
 800752a:	4698      	mov	r8, r3
 800752c:	688a      	ldr	r2, [r1, #8]
 800752e:	690b      	ldr	r3, [r1, #16]
 8007530:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007534:	4293      	cmp	r3, r2
 8007536:	bfb8      	it	lt
 8007538:	4613      	movlt	r3, r2
 800753a:	6033      	str	r3, [r6, #0]
 800753c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007540:	4607      	mov	r7, r0
 8007542:	460c      	mov	r4, r1
 8007544:	b10a      	cbz	r2, 800754a <_printf_common+0x26>
 8007546:	3301      	adds	r3, #1
 8007548:	6033      	str	r3, [r6, #0]
 800754a:	6823      	ldr	r3, [r4, #0]
 800754c:	0699      	lsls	r1, r3, #26
 800754e:	bf42      	ittt	mi
 8007550:	6833      	ldrmi	r3, [r6, #0]
 8007552:	3302      	addmi	r3, #2
 8007554:	6033      	strmi	r3, [r6, #0]
 8007556:	6825      	ldr	r5, [r4, #0]
 8007558:	f015 0506 	ands.w	r5, r5, #6
 800755c:	d106      	bne.n	800756c <_printf_common+0x48>
 800755e:	f104 0a19 	add.w	sl, r4, #25
 8007562:	68e3      	ldr	r3, [r4, #12]
 8007564:	6832      	ldr	r2, [r6, #0]
 8007566:	1a9b      	subs	r3, r3, r2
 8007568:	42ab      	cmp	r3, r5
 800756a:	dc26      	bgt.n	80075ba <_printf_common+0x96>
 800756c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007570:	6822      	ldr	r2, [r4, #0]
 8007572:	3b00      	subs	r3, #0
 8007574:	bf18      	it	ne
 8007576:	2301      	movne	r3, #1
 8007578:	0692      	lsls	r2, r2, #26
 800757a:	d42b      	bmi.n	80075d4 <_printf_common+0xb0>
 800757c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8007580:	4641      	mov	r1, r8
 8007582:	4638      	mov	r0, r7
 8007584:	47c8      	blx	r9
 8007586:	3001      	adds	r0, #1
 8007588:	d01e      	beq.n	80075c8 <_printf_common+0xa4>
 800758a:	6823      	ldr	r3, [r4, #0]
 800758c:	6922      	ldr	r2, [r4, #16]
 800758e:	f003 0306 	and.w	r3, r3, #6
 8007592:	2b04      	cmp	r3, #4
 8007594:	bf02      	ittt	eq
 8007596:	68e5      	ldreq	r5, [r4, #12]
 8007598:	6833      	ldreq	r3, [r6, #0]
 800759a:	1aed      	subeq	r5, r5, r3
 800759c:	68a3      	ldr	r3, [r4, #8]
 800759e:	bf0c      	ite	eq
 80075a0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80075a4:	2500      	movne	r5, #0
 80075a6:	4293      	cmp	r3, r2
 80075a8:	bfc4      	itt	gt
 80075aa:	1a9b      	subgt	r3, r3, r2
 80075ac:	18ed      	addgt	r5, r5, r3
 80075ae:	2600      	movs	r6, #0
 80075b0:	341a      	adds	r4, #26
 80075b2:	42b5      	cmp	r5, r6
 80075b4:	d11a      	bne.n	80075ec <_printf_common+0xc8>
 80075b6:	2000      	movs	r0, #0
 80075b8:	e008      	b.n	80075cc <_printf_common+0xa8>
 80075ba:	2301      	movs	r3, #1
 80075bc:	4652      	mov	r2, sl
 80075be:	4641      	mov	r1, r8
 80075c0:	4638      	mov	r0, r7
 80075c2:	47c8      	blx	r9
 80075c4:	3001      	adds	r0, #1
 80075c6:	d103      	bne.n	80075d0 <_printf_common+0xac>
 80075c8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80075cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80075d0:	3501      	adds	r5, #1
 80075d2:	e7c6      	b.n	8007562 <_printf_common+0x3e>
 80075d4:	18e1      	adds	r1, r4, r3
 80075d6:	1c5a      	adds	r2, r3, #1
 80075d8:	2030      	movs	r0, #48	@ 0x30
 80075da:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80075de:	4422      	add	r2, r4
 80075e0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80075e4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80075e8:	3302      	adds	r3, #2
 80075ea:	e7c7      	b.n	800757c <_printf_common+0x58>
 80075ec:	2301      	movs	r3, #1
 80075ee:	4622      	mov	r2, r4
 80075f0:	4641      	mov	r1, r8
 80075f2:	4638      	mov	r0, r7
 80075f4:	47c8      	blx	r9
 80075f6:	3001      	adds	r0, #1
 80075f8:	d0e6      	beq.n	80075c8 <_printf_common+0xa4>
 80075fa:	3601      	adds	r6, #1
 80075fc:	e7d9      	b.n	80075b2 <_printf_common+0x8e>
	...

08007600 <_printf_i>:
 8007600:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007604:	7e0f      	ldrb	r7, [r1, #24]
 8007606:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007608:	2f78      	cmp	r7, #120	@ 0x78
 800760a:	4691      	mov	r9, r2
 800760c:	4680      	mov	r8, r0
 800760e:	460c      	mov	r4, r1
 8007610:	469a      	mov	sl, r3
 8007612:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8007616:	d807      	bhi.n	8007628 <_printf_i+0x28>
 8007618:	2f62      	cmp	r7, #98	@ 0x62
 800761a:	d80a      	bhi.n	8007632 <_printf_i+0x32>
 800761c:	2f00      	cmp	r7, #0
 800761e:	f000 80d2 	beq.w	80077c6 <_printf_i+0x1c6>
 8007622:	2f58      	cmp	r7, #88	@ 0x58
 8007624:	f000 80b9 	beq.w	800779a <_printf_i+0x19a>
 8007628:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800762c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007630:	e03a      	b.n	80076a8 <_printf_i+0xa8>
 8007632:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8007636:	2b15      	cmp	r3, #21
 8007638:	d8f6      	bhi.n	8007628 <_printf_i+0x28>
 800763a:	a101      	add	r1, pc, #4	@ (adr r1, 8007640 <_printf_i+0x40>)
 800763c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007640:	08007699 	.word	0x08007699
 8007644:	080076ad 	.word	0x080076ad
 8007648:	08007629 	.word	0x08007629
 800764c:	08007629 	.word	0x08007629
 8007650:	08007629 	.word	0x08007629
 8007654:	08007629 	.word	0x08007629
 8007658:	080076ad 	.word	0x080076ad
 800765c:	08007629 	.word	0x08007629
 8007660:	08007629 	.word	0x08007629
 8007664:	08007629 	.word	0x08007629
 8007668:	08007629 	.word	0x08007629
 800766c:	080077ad 	.word	0x080077ad
 8007670:	080076d7 	.word	0x080076d7
 8007674:	08007767 	.word	0x08007767
 8007678:	08007629 	.word	0x08007629
 800767c:	08007629 	.word	0x08007629
 8007680:	080077cf 	.word	0x080077cf
 8007684:	08007629 	.word	0x08007629
 8007688:	080076d7 	.word	0x080076d7
 800768c:	08007629 	.word	0x08007629
 8007690:	08007629 	.word	0x08007629
 8007694:	0800776f 	.word	0x0800776f
 8007698:	6833      	ldr	r3, [r6, #0]
 800769a:	1d1a      	adds	r2, r3, #4
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	6032      	str	r2, [r6, #0]
 80076a0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80076a4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80076a8:	2301      	movs	r3, #1
 80076aa:	e09d      	b.n	80077e8 <_printf_i+0x1e8>
 80076ac:	6833      	ldr	r3, [r6, #0]
 80076ae:	6820      	ldr	r0, [r4, #0]
 80076b0:	1d19      	adds	r1, r3, #4
 80076b2:	6031      	str	r1, [r6, #0]
 80076b4:	0606      	lsls	r6, r0, #24
 80076b6:	d501      	bpl.n	80076bc <_printf_i+0xbc>
 80076b8:	681d      	ldr	r5, [r3, #0]
 80076ba:	e003      	b.n	80076c4 <_printf_i+0xc4>
 80076bc:	0645      	lsls	r5, r0, #25
 80076be:	d5fb      	bpl.n	80076b8 <_printf_i+0xb8>
 80076c0:	f9b3 5000 	ldrsh.w	r5, [r3]
 80076c4:	2d00      	cmp	r5, #0
 80076c6:	da03      	bge.n	80076d0 <_printf_i+0xd0>
 80076c8:	232d      	movs	r3, #45	@ 0x2d
 80076ca:	426d      	negs	r5, r5
 80076cc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80076d0:	4859      	ldr	r0, [pc, #356]	@ (8007838 <_printf_i+0x238>)
 80076d2:	230a      	movs	r3, #10
 80076d4:	e011      	b.n	80076fa <_printf_i+0xfa>
 80076d6:	6821      	ldr	r1, [r4, #0]
 80076d8:	6833      	ldr	r3, [r6, #0]
 80076da:	0608      	lsls	r0, r1, #24
 80076dc:	f853 5b04 	ldr.w	r5, [r3], #4
 80076e0:	d402      	bmi.n	80076e8 <_printf_i+0xe8>
 80076e2:	0649      	lsls	r1, r1, #25
 80076e4:	bf48      	it	mi
 80076e6:	b2ad      	uxthmi	r5, r5
 80076e8:	2f6f      	cmp	r7, #111	@ 0x6f
 80076ea:	4853      	ldr	r0, [pc, #332]	@ (8007838 <_printf_i+0x238>)
 80076ec:	6033      	str	r3, [r6, #0]
 80076ee:	bf14      	ite	ne
 80076f0:	230a      	movne	r3, #10
 80076f2:	2308      	moveq	r3, #8
 80076f4:	2100      	movs	r1, #0
 80076f6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80076fa:	6866      	ldr	r6, [r4, #4]
 80076fc:	60a6      	str	r6, [r4, #8]
 80076fe:	2e00      	cmp	r6, #0
 8007700:	bfa2      	ittt	ge
 8007702:	6821      	ldrge	r1, [r4, #0]
 8007704:	f021 0104 	bicge.w	r1, r1, #4
 8007708:	6021      	strge	r1, [r4, #0]
 800770a:	b90d      	cbnz	r5, 8007710 <_printf_i+0x110>
 800770c:	2e00      	cmp	r6, #0
 800770e:	d04b      	beq.n	80077a8 <_printf_i+0x1a8>
 8007710:	4616      	mov	r6, r2
 8007712:	fbb5 f1f3 	udiv	r1, r5, r3
 8007716:	fb03 5711 	mls	r7, r3, r1, r5
 800771a:	5dc7      	ldrb	r7, [r0, r7]
 800771c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007720:	462f      	mov	r7, r5
 8007722:	42bb      	cmp	r3, r7
 8007724:	460d      	mov	r5, r1
 8007726:	d9f4      	bls.n	8007712 <_printf_i+0x112>
 8007728:	2b08      	cmp	r3, #8
 800772a:	d10b      	bne.n	8007744 <_printf_i+0x144>
 800772c:	6823      	ldr	r3, [r4, #0]
 800772e:	07df      	lsls	r7, r3, #31
 8007730:	d508      	bpl.n	8007744 <_printf_i+0x144>
 8007732:	6923      	ldr	r3, [r4, #16]
 8007734:	6861      	ldr	r1, [r4, #4]
 8007736:	4299      	cmp	r1, r3
 8007738:	bfde      	ittt	le
 800773a:	2330      	movle	r3, #48	@ 0x30
 800773c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007740:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8007744:	1b92      	subs	r2, r2, r6
 8007746:	6122      	str	r2, [r4, #16]
 8007748:	f8cd a000 	str.w	sl, [sp]
 800774c:	464b      	mov	r3, r9
 800774e:	aa03      	add	r2, sp, #12
 8007750:	4621      	mov	r1, r4
 8007752:	4640      	mov	r0, r8
 8007754:	f7ff fee6 	bl	8007524 <_printf_common>
 8007758:	3001      	adds	r0, #1
 800775a:	d14a      	bne.n	80077f2 <_printf_i+0x1f2>
 800775c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007760:	b004      	add	sp, #16
 8007762:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007766:	6823      	ldr	r3, [r4, #0]
 8007768:	f043 0320 	orr.w	r3, r3, #32
 800776c:	6023      	str	r3, [r4, #0]
 800776e:	4833      	ldr	r0, [pc, #204]	@ (800783c <_printf_i+0x23c>)
 8007770:	2778      	movs	r7, #120	@ 0x78
 8007772:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8007776:	6823      	ldr	r3, [r4, #0]
 8007778:	6831      	ldr	r1, [r6, #0]
 800777a:	061f      	lsls	r7, r3, #24
 800777c:	f851 5b04 	ldr.w	r5, [r1], #4
 8007780:	d402      	bmi.n	8007788 <_printf_i+0x188>
 8007782:	065f      	lsls	r7, r3, #25
 8007784:	bf48      	it	mi
 8007786:	b2ad      	uxthmi	r5, r5
 8007788:	6031      	str	r1, [r6, #0]
 800778a:	07d9      	lsls	r1, r3, #31
 800778c:	bf44      	itt	mi
 800778e:	f043 0320 	orrmi.w	r3, r3, #32
 8007792:	6023      	strmi	r3, [r4, #0]
 8007794:	b11d      	cbz	r5, 800779e <_printf_i+0x19e>
 8007796:	2310      	movs	r3, #16
 8007798:	e7ac      	b.n	80076f4 <_printf_i+0xf4>
 800779a:	4827      	ldr	r0, [pc, #156]	@ (8007838 <_printf_i+0x238>)
 800779c:	e7e9      	b.n	8007772 <_printf_i+0x172>
 800779e:	6823      	ldr	r3, [r4, #0]
 80077a0:	f023 0320 	bic.w	r3, r3, #32
 80077a4:	6023      	str	r3, [r4, #0]
 80077a6:	e7f6      	b.n	8007796 <_printf_i+0x196>
 80077a8:	4616      	mov	r6, r2
 80077aa:	e7bd      	b.n	8007728 <_printf_i+0x128>
 80077ac:	6833      	ldr	r3, [r6, #0]
 80077ae:	6825      	ldr	r5, [r4, #0]
 80077b0:	6961      	ldr	r1, [r4, #20]
 80077b2:	1d18      	adds	r0, r3, #4
 80077b4:	6030      	str	r0, [r6, #0]
 80077b6:	062e      	lsls	r6, r5, #24
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	d501      	bpl.n	80077c0 <_printf_i+0x1c0>
 80077bc:	6019      	str	r1, [r3, #0]
 80077be:	e002      	b.n	80077c6 <_printf_i+0x1c6>
 80077c0:	0668      	lsls	r0, r5, #25
 80077c2:	d5fb      	bpl.n	80077bc <_printf_i+0x1bc>
 80077c4:	8019      	strh	r1, [r3, #0]
 80077c6:	2300      	movs	r3, #0
 80077c8:	6123      	str	r3, [r4, #16]
 80077ca:	4616      	mov	r6, r2
 80077cc:	e7bc      	b.n	8007748 <_printf_i+0x148>
 80077ce:	6833      	ldr	r3, [r6, #0]
 80077d0:	1d1a      	adds	r2, r3, #4
 80077d2:	6032      	str	r2, [r6, #0]
 80077d4:	681e      	ldr	r6, [r3, #0]
 80077d6:	6862      	ldr	r2, [r4, #4]
 80077d8:	2100      	movs	r1, #0
 80077da:	4630      	mov	r0, r6
 80077dc:	f7f8 fd98 	bl	8000310 <memchr>
 80077e0:	b108      	cbz	r0, 80077e6 <_printf_i+0x1e6>
 80077e2:	1b80      	subs	r0, r0, r6
 80077e4:	6060      	str	r0, [r4, #4]
 80077e6:	6863      	ldr	r3, [r4, #4]
 80077e8:	6123      	str	r3, [r4, #16]
 80077ea:	2300      	movs	r3, #0
 80077ec:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80077f0:	e7aa      	b.n	8007748 <_printf_i+0x148>
 80077f2:	6923      	ldr	r3, [r4, #16]
 80077f4:	4632      	mov	r2, r6
 80077f6:	4649      	mov	r1, r9
 80077f8:	4640      	mov	r0, r8
 80077fa:	47d0      	blx	sl
 80077fc:	3001      	adds	r0, #1
 80077fe:	d0ad      	beq.n	800775c <_printf_i+0x15c>
 8007800:	6823      	ldr	r3, [r4, #0]
 8007802:	079b      	lsls	r3, r3, #30
 8007804:	d413      	bmi.n	800782e <_printf_i+0x22e>
 8007806:	68e0      	ldr	r0, [r4, #12]
 8007808:	9b03      	ldr	r3, [sp, #12]
 800780a:	4298      	cmp	r0, r3
 800780c:	bfb8      	it	lt
 800780e:	4618      	movlt	r0, r3
 8007810:	e7a6      	b.n	8007760 <_printf_i+0x160>
 8007812:	2301      	movs	r3, #1
 8007814:	4632      	mov	r2, r6
 8007816:	4649      	mov	r1, r9
 8007818:	4640      	mov	r0, r8
 800781a:	47d0      	blx	sl
 800781c:	3001      	adds	r0, #1
 800781e:	d09d      	beq.n	800775c <_printf_i+0x15c>
 8007820:	3501      	adds	r5, #1
 8007822:	68e3      	ldr	r3, [r4, #12]
 8007824:	9903      	ldr	r1, [sp, #12]
 8007826:	1a5b      	subs	r3, r3, r1
 8007828:	42ab      	cmp	r3, r5
 800782a:	dcf2      	bgt.n	8007812 <_printf_i+0x212>
 800782c:	e7eb      	b.n	8007806 <_printf_i+0x206>
 800782e:	2500      	movs	r5, #0
 8007830:	f104 0619 	add.w	r6, r4, #25
 8007834:	e7f5      	b.n	8007822 <_printf_i+0x222>
 8007836:	bf00      	nop
 8007838:	0801c5d5 	.word	0x0801c5d5
 800783c:	0801c5e6 	.word	0x0801c5e6

08007840 <memmove>:
 8007840:	4288      	cmp	r0, r1
 8007842:	b510      	push	{r4, lr}
 8007844:	eb01 0402 	add.w	r4, r1, r2
 8007848:	d902      	bls.n	8007850 <memmove+0x10>
 800784a:	4284      	cmp	r4, r0
 800784c:	4623      	mov	r3, r4
 800784e:	d807      	bhi.n	8007860 <memmove+0x20>
 8007850:	1e43      	subs	r3, r0, #1
 8007852:	42a1      	cmp	r1, r4
 8007854:	d008      	beq.n	8007868 <memmove+0x28>
 8007856:	f811 2b01 	ldrb.w	r2, [r1], #1
 800785a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800785e:	e7f8      	b.n	8007852 <memmove+0x12>
 8007860:	4402      	add	r2, r0
 8007862:	4601      	mov	r1, r0
 8007864:	428a      	cmp	r2, r1
 8007866:	d100      	bne.n	800786a <memmove+0x2a>
 8007868:	bd10      	pop	{r4, pc}
 800786a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800786e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007872:	e7f7      	b.n	8007864 <memmove+0x24>

08007874 <_sbrk_r>:
 8007874:	b538      	push	{r3, r4, r5, lr}
 8007876:	4d06      	ldr	r5, [pc, #24]	@ (8007890 <_sbrk_r+0x1c>)
 8007878:	2300      	movs	r3, #0
 800787a:	4604      	mov	r4, r0
 800787c:	4608      	mov	r0, r1
 800787e:	602b      	str	r3, [r5, #0]
 8007880:	f7fa f8e0 	bl	8001a44 <_sbrk>
 8007884:	1c43      	adds	r3, r0, #1
 8007886:	d102      	bne.n	800788e <_sbrk_r+0x1a>
 8007888:	682b      	ldr	r3, [r5, #0]
 800788a:	b103      	cbz	r3, 800788e <_sbrk_r+0x1a>
 800788c:	6023      	str	r3, [r4, #0]
 800788e:	bd38      	pop	{r3, r4, r5, pc}
 8007890:	2400029c 	.word	0x2400029c

08007894 <_realloc_r>:
 8007894:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007898:	4680      	mov	r8, r0
 800789a:	4615      	mov	r5, r2
 800789c:	460c      	mov	r4, r1
 800789e:	b921      	cbnz	r1, 80078aa <_realloc_r+0x16>
 80078a0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80078a4:	4611      	mov	r1, r2
 80078a6:	f7ff bc59 	b.w	800715c <_malloc_r>
 80078aa:	b92a      	cbnz	r2, 80078b8 <_realloc_r+0x24>
 80078ac:	f7ff fbea 	bl	8007084 <_free_r>
 80078b0:	2400      	movs	r4, #0
 80078b2:	4620      	mov	r0, r4
 80078b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80078b8:	f000 f81a 	bl	80078f0 <_malloc_usable_size_r>
 80078bc:	4285      	cmp	r5, r0
 80078be:	4606      	mov	r6, r0
 80078c0:	d802      	bhi.n	80078c8 <_realloc_r+0x34>
 80078c2:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80078c6:	d8f4      	bhi.n	80078b2 <_realloc_r+0x1e>
 80078c8:	4629      	mov	r1, r5
 80078ca:	4640      	mov	r0, r8
 80078cc:	f7ff fc46 	bl	800715c <_malloc_r>
 80078d0:	4607      	mov	r7, r0
 80078d2:	2800      	cmp	r0, #0
 80078d4:	d0ec      	beq.n	80078b0 <_realloc_r+0x1c>
 80078d6:	42b5      	cmp	r5, r6
 80078d8:	462a      	mov	r2, r5
 80078da:	4621      	mov	r1, r4
 80078dc:	bf28      	it	cs
 80078de:	4632      	movcs	r2, r6
 80078e0:	f7ff fbc2 	bl	8007068 <memcpy>
 80078e4:	4621      	mov	r1, r4
 80078e6:	4640      	mov	r0, r8
 80078e8:	f7ff fbcc 	bl	8007084 <_free_r>
 80078ec:	463c      	mov	r4, r7
 80078ee:	e7e0      	b.n	80078b2 <_realloc_r+0x1e>

080078f0 <_malloc_usable_size_r>:
 80078f0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80078f4:	1f18      	subs	r0, r3, #4
 80078f6:	2b00      	cmp	r3, #0
 80078f8:	bfbc      	itt	lt
 80078fa:	580b      	ldrlt	r3, [r1, r0]
 80078fc:	18c0      	addlt	r0, r0, r3
 80078fe:	4770      	bx	lr

08007900 <_init>:
 8007900:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007902:	bf00      	nop
 8007904:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007906:	bc08      	pop	{r3}
 8007908:	469e      	mov	lr, r3
 800790a:	4770      	bx	lr

0800790c <_fini>:
 800790c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800790e:	bf00      	nop
 8007910:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007912:	bc08      	pop	{r3}
 8007914:	469e      	mov	lr, r3
 8007916:	4770      	bx	lr
