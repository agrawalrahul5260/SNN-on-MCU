
mnist_snn.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006c88  080002cc  080002cc  000012cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00014be8  08006f54  08006f54  00007f54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0801bb3c  0801bb3c  0001cb3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0801bb44  0801bb44  0001cb44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0801bb48  0801bb48  0001cb48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000010  24000000  0801bb4c  0001d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000100  24000010  0801bb5c  0001d010  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  24000110  0801bb5c  0001d110  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0001d010  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001b4bb  00000000  00000000  0001d03e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 0000227f  00000000  00000000  000384f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001080  00000000  00000000  0003a778  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00000d03  00000000  00000000  0003b7f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00039221  00000000  00000000  0003c4fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00015c54  00000000  00000000  0007571c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00182bd8  00000000  00000000  0008b370  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  0020df48  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00004708  00000000  00000000  0020df8c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000063  00000000  00000000  00212694  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002cc <__do_global_dtors_aux>:
 80002cc:	b510      	push	{r4, lr}
 80002ce:	4c05      	ldr	r4, [pc, #20]	@ (80002e4 <__do_global_dtors_aux+0x18>)
 80002d0:	7823      	ldrb	r3, [r4, #0]
 80002d2:	b933      	cbnz	r3, 80002e2 <__do_global_dtors_aux+0x16>
 80002d4:	4b04      	ldr	r3, [pc, #16]	@ (80002e8 <__do_global_dtors_aux+0x1c>)
 80002d6:	b113      	cbz	r3, 80002de <__do_global_dtors_aux+0x12>
 80002d8:	4804      	ldr	r0, [pc, #16]	@ (80002ec <__do_global_dtors_aux+0x20>)
 80002da:	f3af 8000 	nop.w
 80002de:	2301      	movs	r3, #1
 80002e0:	7023      	strb	r3, [r4, #0]
 80002e2:	bd10      	pop	{r4, pc}
 80002e4:	24000010 	.word	0x24000010
 80002e8:	00000000 	.word	0x00000000
 80002ec:	08006f3c 	.word	0x08006f3c

080002f0 <frame_dummy>:
 80002f0:	b508      	push	{r3, lr}
 80002f2:	4b03      	ldr	r3, [pc, #12]	@ (8000300 <frame_dummy+0x10>)
 80002f4:	b11b      	cbz	r3, 80002fe <frame_dummy+0xe>
 80002f6:	4903      	ldr	r1, [pc, #12]	@ (8000304 <frame_dummy+0x14>)
 80002f8:	4803      	ldr	r0, [pc, #12]	@ (8000308 <frame_dummy+0x18>)
 80002fa:	f3af 8000 	nop.w
 80002fe:	bd08      	pop	{r3, pc}
 8000300:	00000000 	.word	0x00000000
 8000304:	24000014 	.word	0x24000014
 8000308:	08006f3c 	.word	0x08006f3c

0800030c <__aeabi_uldivmod>:
 800030c:	b953      	cbnz	r3, 8000324 <__aeabi_uldivmod+0x18>
 800030e:	b94a      	cbnz	r2, 8000324 <__aeabi_uldivmod+0x18>
 8000310:	2900      	cmp	r1, #0
 8000312:	bf08      	it	eq
 8000314:	2800      	cmpeq	r0, #0
 8000316:	bf1c      	itt	ne
 8000318:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 800031c:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000320:	f000 b96a 	b.w	80005f8 <__aeabi_idiv0>
 8000324:	f1ad 0c08 	sub.w	ip, sp, #8
 8000328:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800032c:	f000 f806 	bl	800033c <__udivmoddi4>
 8000330:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000334:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000338:	b004      	add	sp, #16
 800033a:	4770      	bx	lr

0800033c <__udivmoddi4>:
 800033c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000340:	9d08      	ldr	r5, [sp, #32]
 8000342:	460c      	mov	r4, r1
 8000344:	2b00      	cmp	r3, #0
 8000346:	d14e      	bne.n	80003e6 <__udivmoddi4+0xaa>
 8000348:	4694      	mov	ip, r2
 800034a:	458c      	cmp	ip, r1
 800034c:	4686      	mov	lr, r0
 800034e:	fab2 f282 	clz	r2, r2
 8000352:	d962      	bls.n	800041a <__udivmoddi4+0xde>
 8000354:	b14a      	cbz	r2, 800036a <__udivmoddi4+0x2e>
 8000356:	f1c2 0320 	rsb	r3, r2, #32
 800035a:	4091      	lsls	r1, r2
 800035c:	fa20 f303 	lsr.w	r3, r0, r3
 8000360:	fa0c fc02 	lsl.w	ip, ip, r2
 8000364:	4319      	orrs	r1, r3
 8000366:	fa00 fe02 	lsl.w	lr, r0, r2
 800036a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800036e:	fa1f f68c 	uxth.w	r6, ip
 8000372:	fbb1 f4f7 	udiv	r4, r1, r7
 8000376:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800037a:	fb07 1114 	mls	r1, r7, r4, r1
 800037e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000382:	fb04 f106 	mul.w	r1, r4, r6
 8000386:	4299      	cmp	r1, r3
 8000388:	d90a      	bls.n	80003a0 <__udivmoddi4+0x64>
 800038a:	eb1c 0303 	adds.w	r3, ip, r3
 800038e:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000392:	f080 8112 	bcs.w	80005ba <__udivmoddi4+0x27e>
 8000396:	4299      	cmp	r1, r3
 8000398:	f240 810f 	bls.w	80005ba <__udivmoddi4+0x27e>
 800039c:	3c02      	subs	r4, #2
 800039e:	4463      	add	r3, ip
 80003a0:	1a59      	subs	r1, r3, r1
 80003a2:	fa1f f38e 	uxth.w	r3, lr
 80003a6:	fbb1 f0f7 	udiv	r0, r1, r7
 80003aa:	fb07 1110 	mls	r1, r7, r0, r1
 80003ae:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003b2:	fb00 f606 	mul.w	r6, r0, r6
 80003b6:	429e      	cmp	r6, r3
 80003b8:	d90a      	bls.n	80003d0 <__udivmoddi4+0x94>
 80003ba:	eb1c 0303 	adds.w	r3, ip, r3
 80003be:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 80003c2:	f080 80fc 	bcs.w	80005be <__udivmoddi4+0x282>
 80003c6:	429e      	cmp	r6, r3
 80003c8:	f240 80f9 	bls.w	80005be <__udivmoddi4+0x282>
 80003cc:	4463      	add	r3, ip
 80003ce:	3802      	subs	r0, #2
 80003d0:	1b9b      	subs	r3, r3, r6
 80003d2:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003d6:	2100      	movs	r1, #0
 80003d8:	b11d      	cbz	r5, 80003e2 <__udivmoddi4+0xa6>
 80003da:	40d3      	lsrs	r3, r2
 80003dc:	2200      	movs	r2, #0
 80003de:	e9c5 3200 	strd	r3, r2, [r5]
 80003e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d905      	bls.n	80003f6 <__udivmoddi4+0xba>
 80003ea:	b10d      	cbz	r5, 80003f0 <__udivmoddi4+0xb4>
 80003ec:	e9c5 0100 	strd	r0, r1, [r5]
 80003f0:	2100      	movs	r1, #0
 80003f2:	4608      	mov	r0, r1
 80003f4:	e7f5      	b.n	80003e2 <__udivmoddi4+0xa6>
 80003f6:	fab3 f183 	clz	r1, r3
 80003fa:	2900      	cmp	r1, #0
 80003fc:	d146      	bne.n	800048c <__udivmoddi4+0x150>
 80003fe:	42a3      	cmp	r3, r4
 8000400:	d302      	bcc.n	8000408 <__udivmoddi4+0xcc>
 8000402:	4290      	cmp	r0, r2
 8000404:	f0c0 80f0 	bcc.w	80005e8 <__udivmoddi4+0x2ac>
 8000408:	1a86      	subs	r6, r0, r2
 800040a:	eb64 0303 	sbc.w	r3, r4, r3
 800040e:	2001      	movs	r0, #1
 8000410:	2d00      	cmp	r5, #0
 8000412:	d0e6      	beq.n	80003e2 <__udivmoddi4+0xa6>
 8000414:	e9c5 6300 	strd	r6, r3, [r5]
 8000418:	e7e3      	b.n	80003e2 <__udivmoddi4+0xa6>
 800041a:	2a00      	cmp	r2, #0
 800041c:	f040 8090 	bne.w	8000540 <__udivmoddi4+0x204>
 8000420:	eba1 040c 	sub.w	r4, r1, ip
 8000424:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000428:	fa1f f78c 	uxth.w	r7, ip
 800042c:	2101      	movs	r1, #1
 800042e:	fbb4 f6f8 	udiv	r6, r4, r8
 8000432:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000436:	fb08 4416 	mls	r4, r8, r6, r4
 800043a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800043e:	fb07 f006 	mul.w	r0, r7, r6
 8000442:	4298      	cmp	r0, r3
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x11c>
 8000446:	eb1c 0303 	adds.w	r3, ip, r3
 800044a:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 800044e:	d202      	bcs.n	8000456 <__udivmoddi4+0x11a>
 8000450:	4298      	cmp	r0, r3
 8000452:	f200 80cd 	bhi.w	80005f0 <__udivmoddi4+0x2b4>
 8000456:	4626      	mov	r6, r4
 8000458:	1a1c      	subs	r4, r3, r0
 800045a:	fa1f f38e 	uxth.w	r3, lr
 800045e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000462:	fb08 4410 	mls	r4, r8, r0, r4
 8000466:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800046a:	fb00 f707 	mul.w	r7, r0, r7
 800046e:	429f      	cmp	r7, r3
 8000470:	d908      	bls.n	8000484 <__udivmoddi4+0x148>
 8000472:	eb1c 0303 	adds.w	r3, ip, r3
 8000476:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 800047a:	d202      	bcs.n	8000482 <__udivmoddi4+0x146>
 800047c:	429f      	cmp	r7, r3
 800047e:	f200 80b0 	bhi.w	80005e2 <__udivmoddi4+0x2a6>
 8000482:	4620      	mov	r0, r4
 8000484:	1bdb      	subs	r3, r3, r7
 8000486:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800048a:	e7a5      	b.n	80003d8 <__udivmoddi4+0x9c>
 800048c:	f1c1 0620 	rsb	r6, r1, #32
 8000490:	408b      	lsls	r3, r1
 8000492:	fa22 f706 	lsr.w	r7, r2, r6
 8000496:	431f      	orrs	r7, r3
 8000498:	fa20 fc06 	lsr.w	ip, r0, r6
 800049c:	fa04 f301 	lsl.w	r3, r4, r1
 80004a0:	ea43 030c 	orr.w	r3, r3, ip
 80004a4:	40f4      	lsrs	r4, r6
 80004a6:	fa00 f801 	lsl.w	r8, r0, r1
 80004aa:	0c38      	lsrs	r0, r7, #16
 80004ac:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80004b0:	fbb4 fef0 	udiv	lr, r4, r0
 80004b4:	fa1f fc87 	uxth.w	ip, r7
 80004b8:	fb00 441e 	mls	r4, r0, lr, r4
 80004bc:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004c0:	fb0e f90c 	mul.w	r9, lr, ip
 80004c4:	45a1      	cmp	r9, r4
 80004c6:	fa02 f201 	lsl.w	r2, r2, r1
 80004ca:	d90a      	bls.n	80004e2 <__udivmoddi4+0x1a6>
 80004cc:	193c      	adds	r4, r7, r4
 80004ce:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 80004d2:	f080 8084 	bcs.w	80005de <__udivmoddi4+0x2a2>
 80004d6:	45a1      	cmp	r9, r4
 80004d8:	f240 8081 	bls.w	80005de <__udivmoddi4+0x2a2>
 80004dc:	f1ae 0e02 	sub.w	lr, lr, #2
 80004e0:	443c      	add	r4, r7
 80004e2:	eba4 0409 	sub.w	r4, r4, r9
 80004e6:	fa1f f983 	uxth.w	r9, r3
 80004ea:	fbb4 f3f0 	udiv	r3, r4, r0
 80004ee:	fb00 4413 	mls	r4, r0, r3, r4
 80004f2:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004f6:	fb03 fc0c 	mul.w	ip, r3, ip
 80004fa:	45a4      	cmp	ip, r4
 80004fc:	d907      	bls.n	800050e <__udivmoddi4+0x1d2>
 80004fe:	193c      	adds	r4, r7, r4
 8000500:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000504:	d267      	bcs.n	80005d6 <__udivmoddi4+0x29a>
 8000506:	45a4      	cmp	ip, r4
 8000508:	d965      	bls.n	80005d6 <__udivmoddi4+0x29a>
 800050a:	3b02      	subs	r3, #2
 800050c:	443c      	add	r4, r7
 800050e:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000512:	fba0 9302 	umull	r9, r3, r0, r2
 8000516:	eba4 040c 	sub.w	r4, r4, ip
 800051a:	429c      	cmp	r4, r3
 800051c:	46ce      	mov	lr, r9
 800051e:	469c      	mov	ip, r3
 8000520:	d351      	bcc.n	80005c6 <__udivmoddi4+0x28a>
 8000522:	d04e      	beq.n	80005c2 <__udivmoddi4+0x286>
 8000524:	b155      	cbz	r5, 800053c <__udivmoddi4+0x200>
 8000526:	ebb8 030e 	subs.w	r3, r8, lr
 800052a:	eb64 040c 	sbc.w	r4, r4, ip
 800052e:	fa04 f606 	lsl.w	r6, r4, r6
 8000532:	40cb      	lsrs	r3, r1
 8000534:	431e      	orrs	r6, r3
 8000536:	40cc      	lsrs	r4, r1
 8000538:	e9c5 6400 	strd	r6, r4, [r5]
 800053c:	2100      	movs	r1, #0
 800053e:	e750      	b.n	80003e2 <__udivmoddi4+0xa6>
 8000540:	f1c2 0320 	rsb	r3, r2, #32
 8000544:	fa20 f103 	lsr.w	r1, r0, r3
 8000548:	fa0c fc02 	lsl.w	ip, ip, r2
 800054c:	fa24 f303 	lsr.w	r3, r4, r3
 8000550:	4094      	lsls	r4, r2
 8000552:	430c      	orrs	r4, r1
 8000554:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000558:	fa00 fe02 	lsl.w	lr, r0, r2
 800055c:	fa1f f78c 	uxth.w	r7, ip
 8000560:	fbb3 f0f8 	udiv	r0, r3, r8
 8000564:	fb08 3110 	mls	r1, r8, r0, r3
 8000568:	0c23      	lsrs	r3, r4, #16
 800056a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800056e:	fb00 f107 	mul.w	r1, r0, r7
 8000572:	4299      	cmp	r1, r3
 8000574:	d908      	bls.n	8000588 <__udivmoddi4+0x24c>
 8000576:	eb1c 0303 	adds.w	r3, ip, r3
 800057a:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 800057e:	d22c      	bcs.n	80005da <__udivmoddi4+0x29e>
 8000580:	4299      	cmp	r1, r3
 8000582:	d92a      	bls.n	80005da <__udivmoddi4+0x29e>
 8000584:	3802      	subs	r0, #2
 8000586:	4463      	add	r3, ip
 8000588:	1a5b      	subs	r3, r3, r1
 800058a:	b2a4      	uxth	r4, r4
 800058c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000590:	fb08 3311 	mls	r3, r8, r1, r3
 8000594:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000598:	fb01 f307 	mul.w	r3, r1, r7
 800059c:	42a3      	cmp	r3, r4
 800059e:	d908      	bls.n	80005b2 <__udivmoddi4+0x276>
 80005a0:	eb1c 0404 	adds.w	r4, ip, r4
 80005a4:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 80005a8:	d213      	bcs.n	80005d2 <__udivmoddi4+0x296>
 80005aa:	42a3      	cmp	r3, r4
 80005ac:	d911      	bls.n	80005d2 <__udivmoddi4+0x296>
 80005ae:	3902      	subs	r1, #2
 80005b0:	4464      	add	r4, ip
 80005b2:	1ae4      	subs	r4, r4, r3
 80005b4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80005b8:	e739      	b.n	800042e <__udivmoddi4+0xf2>
 80005ba:	4604      	mov	r4, r0
 80005bc:	e6f0      	b.n	80003a0 <__udivmoddi4+0x64>
 80005be:	4608      	mov	r0, r1
 80005c0:	e706      	b.n	80003d0 <__udivmoddi4+0x94>
 80005c2:	45c8      	cmp	r8, r9
 80005c4:	d2ae      	bcs.n	8000524 <__udivmoddi4+0x1e8>
 80005c6:	ebb9 0e02 	subs.w	lr, r9, r2
 80005ca:	eb63 0c07 	sbc.w	ip, r3, r7
 80005ce:	3801      	subs	r0, #1
 80005d0:	e7a8      	b.n	8000524 <__udivmoddi4+0x1e8>
 80005d2:	4631      	mov	r1, r6
 80005d4:	e7ed      	b.n	80005b2 <__udivmoddi4+0x276>
 80005d6:	4603      	mov	r3, r0
 80005d8:	e799      	b.n	800050e <__udivmoddi4+0x1d2>
 80005da:	4630      	mov	r0, r6
 80005dc:	e7d4      	b.n	8000588 <__udivmoddi4+0x24c>
 80005de:	46d6      	mov	lr, sl
 80005e0:	e77f      	b.n	80004e2 <__udivmoddi4+0x1a6>
 80005e2:	4463      	add	r3, ip
 80005e4:	3802      	subs	r0, #2
 80005e6:	e74d      	b.n	8000484 <__udivmoddi4+0x148>
 80005e8:	4606      	mov	r6, r0
 80005ea:	4623      	mov	r3, r4
 80005ec:	4608      	mov	r0, r1
 80005ee:	e70f      	b.n	8000410 <__udivmoddi4+0xd4>
 80005f0:	3e02      	subs	r6, #2
 80005f2:	4463      	add	r3, ip
 80005f4:	e730      	b.n	8000458 <__udivmoddi4+0x11c>
 80005f6:	bf00      	nop

080005f8 <__aeabi_idiv0>:
 80005f8:	4770      	bx	lr
 80005fa:	bf00      	nop

080005fc <update_neuron>:
// LIFNeuron lif2_neurons[CONV2_OUT_CHANNELS * (INPUT_SIZE/2) * (INPUT_SIZE/2)] = {0};
// LIFNeuron lif3_neurons[FC1_OUT_FEATURES] = {0};


// Function to apply Leaky Integrate and Fire (LIF) neuron update
void update_neuron(LIFNeuron *neuron, float input_current, float beta, float threshold) {
 80005fc:	b480      	push	{r7}
 80005fe:	b085      	sub	sp, #20
 8000600:	af00      	add	r7, sp, #0
 8000602:	60f8      	str	r0, [r7, #12]
 8000604:	ed87 0a02 	vstr	s0, [r7, #8]
 8000608:	edc7 0a01 	vstr	s1, [r7, #4]
 800060c:	ed87 1a00 	vstr	s2, [r7]
    neuron->membrane_potential = (beta * neuron->membrane_potential + input_current);
 8000610:	68fb      	ldr	r3, [r7, #12]
 8000612:	ed93 7a00 	vldr	s14, [r3]
 8000616:	edd7 7a01 	vldr	s15, [r7, #4]
 800061a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800061e:	edd7 7a02 	vldr	s15, [r7, #8]
 8000622:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000626:	68fb      	ldr	r3, [r7, #12]
 8000628:	edc3 7a00 	vstr	s15, [r3]

    if (neuron->should_spike) {
 800062c:	68fb      	ldr	r3, [r7, #12]
 800062e:	791b      	ldrb	r3, [r3, #4]
 8000630:	2b00      	cmp	r3, #0
 8000632:	d007      	beq.n	8000644 <update_neuron+0x48>
        neuron->membrane_potential = 0;
 8000634:	68fb      	ldr	r3, [r7, #12]
 8000636:	f04f 0200 	mov.w	r2, #0
 800063a:	601a      	str	r2, [r3, #0]
        neuron->should_spike = false;
 800063c:	68fb      	ldr	r3, [r7, #12]
 800063e:	2200      	movs	r2, #0
 8000640:	711a      	strb	r2, [r3, #4]
    } else if (neuron->membrane_potential >= threshold) {
        neuron->should_spike = true;
    }
}
 8000642:	e00d      	b.n	8000660 <update_neuron+0x64>
    } else if (neuron->membrane_potential >= threshold) {
 8000644:	68fb      	ldr	r3, [r7, #12]
 8000646:	edd3 7a00 	vldr	s15, [r3]
 800064a:	ed97 7a00 	vldr	s14, [r7]
 800064e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000652:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000656:	d900      	bls.n	800065a <update_neuron+0x5e>
}
 8000658:	e002      	b.n	8000660 <update_neuron+0x64>
        neuron->should_spike = true;
 800065a:	68fb      	ldr	r3, [r7, #12]
 800065c:	2201      	movs	r2, #1
 800065e:	711a      	strb	r2, [r3, #4]
}
 8000660:	bf00      	nop
 8000662:	3714      	adds	r7, #20
 8000664:	46bd      	mov	sp, r7
 8000666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800066a:	4770      	bx	lr

0800066c <conv1_2d>:

// Function to perform 2D convolution
void conv1_2d(const float* input, float* output, const conv1* conv_layer, int input_size) {
 800066c:	b480      	push	{r7}
 800066e:	b08f      	sub	sp, #60	@ 0x3c
 8000670:	af00      	add	r7, sp, #0
 8000672:	60f8      	str	r0, [r7, #12]
 8000674:	60b9      	str	r1, [r7, #8]
 8000676:	607a      	str	r2, [r7, #4]
 8000678:	603b      	str	r3, [r7, #0]
    int output_size = (input_size - conv_layer->kernel_size + 2 * conv_layer->padding) / conv_layer->stride + 1;
 800067a:	687b      	ldr	r3, [r7, #4]
 800067c:	689b      	ldr	r3, [r3, #8]
 800067e:	683a      	ldr	r2, [r7, #0]
 8000680:	1ad2      	subs	r2, r2, r3
 8000682:	687b      	ldr	r3, [r7, #4]
 8000684:	691b      	ldr	r3, [r3, #16]
 8000686:	005b      	lsls	r3, r3, #1
 8000688:	441a      	add	r2, r3
 800068a:	687b      	ldr	r3, [r7, #4]
 800068c:	68db      	ldr	r3, [r3, #12]
 800068e:	fb92 f3f3 	sdiv	r3, r2, r3
 8000692:	3301      	adds	r3, #1
 8000694:	61bb      	str	r3, [r7, #24]

    for (int oc = 0; oc < conv_layer->out_channels; ++oc) {
 8000696:	2300      	movs	r3, #0
 8000698:	637b      	str	r3, [r7, #52]	@ 0x34
 800069a:	e0a5      	b.n	80007e8 <conv1_2d+0x17c>
        for (int oh = 0; oh < output_size; ++oh) {
 800069c:	2300      	movs	r3, #0
 800069e:	633b      	str	r3, [r7, #48]	@ 0x30
 80006a0:	e09a      	b.n	80007d8 <conv1_2d+0x16c>
            for (int ow = 0; ow < output_size; ++ow) {
 80006a2:	2300      	movs	r3, #0
 80006a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80006a6:	e08f      	b.n	80007c8 <conv1_2d+0x15c>
                float sum = 0;
 80006a8:	f04f 0300 	mov.w	r3, #0
 80006ac:	62bb      	str	r3, [r7, #40]	@ 0x28
                for (int ic = 0; ic < conv_layer->in_channels; ++ic) {
 80006ae:	2300      	movs	r3, #0
 80006b0:	627b      	str	r3, [r7, #36]	@ 0x24
 80006b2:	e06e      	b.n	8000792 <conv1_2d+0x126>
                    for (int kh = 0; kh < conv_layer->kernel_size; ++kh) {
 80006b4:	2300      	movs	r3, #0
 80006b6:	623b      	str	r3, [r7, #32]
 80006b8:	e063      	b.n	8000782 <conv1_2d+0x116>
                        for (int kw = 0; kw < conv_layer->kernel_size; ++kw) {
 80006ba:	2300      	movs	r3, #0
 80006bc:	61fb      	str	r3, [r7, #28]
 80006be:	e058      	b.n	8000772 <conv1_2d+0x106>
                            int ih = oh * conv_layer->stride + kh - conv_layer->padding;
 80006c0:	687b      	ldr	r3, [r7, #4]
 80006c2:	68db      	ldr	r3, [r3, #12]
 80006c4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80006c6:	fb03 f202 	mul.w	r2, r3, r2
 80006ca:	6a3b      	ldr	r3, [r7, #32]
 80006cc:	441a      	add	r2, r3
 80006ce:	687b      	ldr	r3, [r7, #4]
 80006d0:	691b      	ldr	r3, [r3, #16]
 80006d2:	1ad3      	subs	r3, r2, r3
 80006d4:	617b      	str	r3, [r7, #20]
                            int iw = ow * conv_layer->stride + kw - conv_layer->padding;
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	68db      	ldr	r3, [r3, #12]
 80006da:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80006dc:	fb03 f202 	mul.w	r2, r3, r2
 80006e0:	69fb      	ldr	r3, [r7, #28]
 80006e2:	441a      	add	r2, r3
 80006e4:	687b      	ldr	r3, [r7, #4]
 80006e6:	691b      	ldr	r3, [r3, #16]
 80006e8:	1ad3      	subs	r3, r2, r3
 80006ea:	613b      	str	r3, [r7, #16]
                            if (ih >= 0 && ih < input_size && iw >= 0 && iw < input_size) {
 80006ec:	697b      	ldr	r3, [r7, #20]
 80006ee:	2b00      	cmp	r3, #0
 80006f0:	db3c      	blt.n	800076c <conv1_2d+0x100>
 80006f2:	697a      	ldr	r2, [r7, #20]
 80006f4:	683b      	ldr	r3, [r7, #0]
 80006f6:	429a      	cmp	r2, r3
 80006f8:	da38      	bge.n	800076c <conv1_2d+0x100>
 80006fa:	693b      	ldr	r3, [r7, #16]
 80006fc:	2b00      	cmp	r3, #0
 80006fe:	db35      	blt.n	800076c <conv1_2d+0x100>
 8000700:	693a      	ldr	r2, [r7, #16]
 8000702:	683b      	ldr	r3, [r7, #0]
 8000704:	429a      	cmp	r2, r3
 8000706:	da31      	bge.n	800076c <conv1_2d+0x100>
                                sum += input[ic * input_size * input_size + ih * input_size + iw] * conv_layer->weights[oc][ic][kh][kw];
 8000708:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800070a:	683a      	ldr	r2, [r7, #0]
 800070c:	fb02 f303 	mul.w	r3, r2, r3
 8000710:	683a      	ldr	r2, [r7, #0]
 8000712:	fb03 f202 	mul.w	r2, r3, r2
 8000716:	697b      	ldr	r3, [r7, #20]
 8000718:	6839      	ldr	r1, [r7, #0]
 800071a:	fb01 f303 	mul.w	r3, r1, r3
 800071e:	441a      	add	r2, r3
 8000720:	693b      	ldr	r3, [r7, #16]
 8000722:	4413      	add	r3, r2
 8000724:	009b      	lsls	r3, r3, #2
 8000726:	68fa      	ldr	r2, [r7, #12]
 8000728:	4413      	add	r3, r2
 800072a:	ed93 7a00 	vldr	s14, [r3]
 800072e:	687b      	ldr	r3, [r7, #4]
 8000730:	6959      	ldr	r1, [r3, #20]
 8000732:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8000734:	4613      	mov	r3, r2
 8000736:	00db      	lsls	r3, r3, #3
 8000738:	4413      	add	r3, r2
 800073a:	009b      	lsls	r3, r3, #2
 800073c:	18c8      	adds	r0, r1, r3
 800073e:	6a3b      	ldr	r3, [r7, #32]
 8000740:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8000742:	461a      	mov	r2, r3
 8000744:	0052      	lsls	r2, r2, #1
 8000746:	441a      	add	r2, r3
 8000748:	460b      	mov	r3, r1
 800074a:	00db      	lsls	r3, r3, #3
 800074c:	440b      	add	r3, r1
 800074e:	441a      	add	r2, r3
 8000750:	69fb      	ldr	r3, [r7, #28]
 8000752:	4413      	add	r3, r2
 8000754:	009b      	lsls	r3, r3, #2
 8000756:	4403      	add	r3, r0
 8000758:	edd3 7a00 	vldr	s15, [r3]
 800075c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000760:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 8000764:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000768:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
                        for (int kw = 0; kw < conv_layer->kernel_size; ++kw) {
 800076c:	69fb      	ldr	r3, [r7, #28]
 800076e:	3301      	adds	r3, #1
 8000770:	61fb      	str	r3, [r7, #28]
 8000772:	687b      	ldr	r3, [r7, #4]
 8000774:	689b      	ldr	r3, [r3, #8]
 8000776:	69fa      	ldr	r2, [r7, #28]
 8000778:	429a      	cmp	r2, r3
 800077a:	dba1      	blt.n	80006c0 <conv1_2d+0x54>
                    for (int kh = 0; kh < conv_layer->kernel_size; ++kh) {
 800077c:	6a3b      	ldr	r3, [r7, #32]
 800077e:	3301      	adds	r3, #1
 8000780:	623b      	str	r3, [r7, #32]
 8000782:	687b      	ldr	r3, [r7, #4]
 8000784:	689b      	ldr	r3, [r3, #8]
 8000786:	6a3a      	ldr	r2, [r7, #32]
 8000788:	429a      	cmp	r2, r3
 800078a:	db96      	blt.n	80006ba <conv1_2d+0x4e>
                for (int ic = 0; ic < conv_layer->in_channels; ++ic) {
 800078c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800078e:	3301      	adds	r3, #1
 8000790:	627b      	str	r3, [r7, #36]	@ 0x24
 8000792:	687b      	ldr	r3, [r7, #4]
 8000794:	681b      	ldr	r3, [r3, #0]
 8000796:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000798:	429a      	cmp	r2, r3
 800079a:	db8b      	blt.n	80006b4 <conv1_2d+0x48>
                            }
                        }
                    }
                }
                output[oc * output_size * output_size + oh * output_size + ow] = sum;
 800079c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800079e:	69ba      	ldr	r2, [r7, #24]
 80007a0:	fb02 f303 	mul.w	r3, r2, r3
 80007a4:	69ba      	ldr	r2, [r7, #24]
 80007a6:	fb03 f202 	mul.w	r2, r3, r2
 80007aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80007ac:	69b9      	ldr	r1, [r7, #24]
 80007ae:	fb01 f303 	mul.w	r3, r1, r3
 80007b2:	441a      	add	r2, r3
 80007b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80007b6:	4413      	add	r3, r2
 80007b8:	009b      	lsls	r3, r3, #2
 80007ba:	68ba      	ldr	r2, [r7, #8]
 80007bc:	4413      	add	r3, r2
 80007be:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80007c0:	601a      	str	r2, [r3, #0]
            for (int ow = 0; ow < output_size; ++ow) {
 80007c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80007c4:	3301      	adds	r3, #1
 80007c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80007c8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80007ca:	69bb      	ldr	r3, [r7, #24]
 80007cc:	429a      	cmp	r2, r3
 80007ce:	f6ff af6b 	blt.w	80006a8 <conv1_2d+0x3c>
        for (int oh = 0; oh < output_size; ++oh) {
 80007d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80007d4:	3301      	adds	r3, #1
 80007d6:	633b      	str	r3, [r7, #48]	@ 0x30
 80007d8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80007da:	69bb      	ldr	r3, [r7, #24]
 80007dc:	429a      	cmp	r2, r3
 80007de:	f6ff af60 	blt.w	80006a2 <conv1_2d+0x36>
    for (int oc = 0; oc < conv_layer->out_channels; ++oc) {
 80007e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80007e4:	3301      	adds	r3, #1
 80007e6:	637b      	str	r3, [r7, #52]	@ 0x34
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	685b      	ldr	r3, [r3, #4]
 80007ec:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80007ee:	429a      	cmp	r2, r3
 80007f0:	f6ff af54 	blt.w	800069c <conv1_2d+0x30>
            }
        }
    }
}
 80007f4:	bf00      	nop
 80007f6:	bf00      	nop
 80007f8:	373c      	adds	r7, #60	@ 0x3c
 80007fa:	46bd      	mov	sp, r7
 80007fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000800:	4770      	bx	lr

08000802 <conv2_2d>:

// Function to perform 2D convolution
void conv2_2d(float* input, float* output, const conv2* conv_layer, int input_size) {
 8000802:	b480      	push	{r7}
 8000804:	b08f      	sub	sp, #60	@ 0x3c
 8000806:	af00      	add	r7, sp, #0
 8000808:	60f8      	str	r0, [r7, #12]
 800080a:	60b9      	str	r1, [r7, #8]
 800080c:	607a      	str	r2, [r7, #4]
 800080e:	603b      	str	r3, [r7, #0]
    int output_size = (input_size - conv_layer->kernel_size + 2 * conv_layer->padding) / conv_layer->stride + 1;
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	689b      	ldr	r3, [r3, #8]
 8000814:	683a      	ldr	r2, [r7, #0]
 8000816:	1ad2      	subs	r2, r2, r3
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	691b      	ldr	r3, [r3, #16]
 800081c:	005b      	lsls	r3, r3, #1
 800081e:	441a      	add	r2, r3
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	68db      	ldr	r3, [r3, #12]
 8000824:	fb92 f3f3 	sdiv	r3, r2, r3
 8000828:	3301      	adds	r3, #1
 800082a:	61bb      	str	r3, [r7, #24]

    for (int oc = 0; oc < conv_layer->out_channels; ++oc) {
 800082c:	2300      	movs	r3, #0
 800082e:	637b      	str	r3, [r7, #52]	@ 0x34
 8000830:	e0a5      	b.n	800097e <conv2_2d+0x17c>
        for (int oh = 0; oh < output_size; ++oh) {
 8000832:	2300      	movs	r3, #0
 8000834:	633b      	str	r3, [r7, #48]	@ 0x30
 8000836:	e09a      	b.n	800096e <conv2_2d+0x16c>
            for (int ow = 0; ow < output_size; ++ow) {
 8000838:	2300      	movs	r3, #0
 800083a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800083c:	e08f      	b.n	800095e <conv2_2d+0x15c>
                float sum = 0;
 800083e:	f04f 0300 	mov.w	r3, #0
 8000842:	62bb      	str	r3, [r7, #40]	@ 0x28
                for (int ic = 0; ic < conv_layer->in_channels; ++ic) {
 8000844:	2300      	movs	r3, #0
 8000846:	627b      	str	r3, [r7, #36]	@ 0x24
 8000848:	e06e      	b.n	8000928 <conv2_2d+0x126>
                    for (int kh = 0; kh < conv_layer->kernel_size; ++kh) {
 800084a:	2300      	movs	r3, #0
 800084c:	623b      	str	r3, [r7, #32]
 800084e:	e063      	b.n	8000918 <conv2_2d+0x116>
                        for (int kw = 0; kw < conv_layer->kernel_size; ++kw) {
 8000850:	2300      	movs	r3, #0
 8000852:	61fb      	str	r3, [r7, #28]
 8000854:	e058      	b.n	8000908 <conv2_2d+0x106>
                            int ih = oh * conv_layer->stride + kh - conv_layer->padding;
 8000856:	687b      	ldr	r3, [r7, #4]
 8000858:	68db      	ldr	r3, [r3, #12]
 800085a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800085c:	fb03 f202 	mul.w	r2, r3, r2
 8000860:	6a3b      	ldr	r3, [r7, #32]
 8000862:	441a      	add	r2, r3
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	691b      	ldr	r3, [r3, #16]
 8000868:	1ad3      	subs	r3, r2, r3
 800086a:	617b      	str	r3, [r7, #20]
                            int iw = ow * conv_layer->stride + kw - conv_layer->padding;
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	68db      	ldr	r3, [r3, #12]
 8000870:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8000872:	fb03 f202 	mul.w	r2, r3, r2
 8000876:	69fb      	ldr	r3, [r7, #28]
 8000878:	441a      	add	r2, r3
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	691b      	ldr	r3, [r3, #16]
 800087e:	1ad3      	subs	r3, r2, r3
 8000880:	613b      	str	r3, [r7, #16]
                            if (ih >= 0 && ih < input_size && iw >= 0 && iw < input_size) {
 8000882:	697b      	ldr	r3, [r7, #20]
 8000884:	2b00      	cmp	r3, #0
 8000886:	db3c      	blt.n	8000902 <conv2_2d+0x100>
 8000888:	697a      	ldr	r2, [r7, #20]
 800088a:	683b      	ldr	r3, [r7, #0]
 800088c:	429a      	cmp	r2, r3
 800088e:	da38      	bge.n	8000902 <conv2_2d+0x100>
 8000890:	693b      	ldr	r3, [r7, #16]
 8000892:	2b00      	cmp	r3, #0
 8000894:	db35      	blt.n	8000902 <conv2_2d+0x100>
 8000896:	693a      	ldr	r2, [r7, #16]
 8000898:	683b      	ldr	r3, [r7, #0]
 800089a:	429a      	cmp	r2, r3
 800089c:	da31      	bge.n	8000902 <conv2_2d+0x100>
                                sum += input[ic * input_size * input_size + ih * input_size + iw] * conv_layer->weights[oc][ic][kh][kw];
 800089e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80008a0:	683a      	ldr	r2, [r7, #0]
 80008a2:	fb02 f303 	mul.w	r3, r2, r3
 80008a6:	683a      	ldr	r2, [r7, #0]
 80008a8:	fb03 f202 	mul.w	r2, r3, r2
 80008ac:	697b      	ldr	r3, [r7, #20]
 80008ae:	6839      	ldr	r1, [r7, #0]
 80008b0:	fb01 f303 	mul.w	r3, r1, r3
 80008b4:	441a      	add	r2, r3
 80008b6:	693b      	ldr	r3, [r7, #16]
 80008b8:	4413      	add	r3, r2
 80008ba:	009b      	lsls	r3, r3, #2
 80008bc:	68fa      	ldr	r2, [r7, #12]
 80008be:	4413      	add	r3, r2
 80008c0:	ed93 7a00 	vldr	s14, [r3]
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	6959      	ldr	r1, [r3, #20]
 80008c8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80008ca:	4613      	mov	r3, r2
 80008cc:	00db      	lsls	r3, r3, #3
 80008ce:	4413      	add	r3, r2
 80008d0:	019b      	lsls	r3, r3, #6
 80008d2:	18c8      	adds	r0, r1, r3
 80008d4:	6a3b      	ldr	r3, [r7, #32]
 80008d6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80008d8:	461a      	mov	r2, r3
 80008da:	0052      	lsls	r2, r2, #1
 80008dc:	441a      	add	r2, r3
 80008de:	460b      	mov	r3, r1
 80008e0:	00db      	lsls	r3, r3, #3
 80008e2:	440b      	add	r3, r1
 80008e4:	441a      	add	r2, r3
 80008e6:	69fb      	ldr	r3, [r7, #28]
 80008e8:	4413      	add	r3, r2
 80008ea:	009b      	lsls	r3, r3, #2
 80008ec:	4403      	add	r3, r0
 80008ee:	edd3 7a00 	vldr	s15, [r3]
 80008f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80008f6:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 80008fa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80008fe:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
                        for (int kw = 0; kw < conv_layer->kernel_size; ++kw) {
 8000902:	69fb      	ldr	r3, [r7, #28]
 8000904:	3301      	adds	r3, #1
 8000906:	61fb      	str	r3, [r7, #28]
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	689b      	ldr	r3, [r3, #8]
 800090c:	69fa      	ldr	r2, [r7, #28]
 800090e:	429a      	cmp	r2, r3
 8000910:	dba1      	blt.n	8000856 <conv2_2d+0x54>
                    for (int kh = 0; kh < conv_layer->kernel_size; ++kh) {
 8000912:	6a3b      	ldr	r3, [r7, #32]
 8000914:	3301      	adds	r3, #1
 8000916:	623b      	str	r3, [r7, #32]
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	689b      	ldr	r3, [r3, #8]
 800091c:	6a3a      	ldr	r2, [r7, #32]
 800091e:	429a      	cmp	r2, r3
 8000920:	db96      	blt.n	8000850 <conv2_2d+0x4e>
                for (int ic = 0; ic < conv_layer->in_channels; ++ic) {
 8000922:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000924:	3301      	adds	r3, #1
 8000926:	627b      	str	r3, [r7, #36]	@ 0x24
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	681b      	ldr	r3, [r3, #0]
 800092c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800092e:	429a      	cmp	r2, r3
 8000930:	db8b      	blt.n	800084a <conv2_2d+0x48>
                            }
                        }
                    }
                }
                output[oc * output_size * output_size + oh * output_size + ow] = sum;
 8000932:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000934:	69ba      	ldr	r2, [r7, #24]
 8000936:	fb02 f303 	mul.w	r3, r2, r3
 800093a:	69ba      	ldr	r2, [r7, #24]
 800093c:	fb03 f202 	mul.w	r2, r3, r2
 8000940:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000942:	69b9      	ldr	r1, [r7, #24]
 8000944:	fb01 f303 	mul.w	r3, r1, r3
 8000948:	441a      	add	r2, r3
 800094a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800094c:	4413      	add	r3, r2
 800094e:	009b      	lsls	r3, r3, #2
 8000950:	68ba      	ldr	r2, [r7, #8]
 8000952:	4413      	add	r3, r2
 8000954:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8000956:	601a      	str	r2, [r3, #0]
            for (int ow = 0; ow < output_size; ++ow) {
 8000958:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800095a:	3301      	adds	r3, #1
 800095c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800095e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8000960:	69bb      	ldr	r3, [r7, #24]
 8000962:	429a      	cmp	r2, r3
 8000964:	f6ff af6b 	blt.w	800083e <conv2_2d+0x3c>
        for (int oh = 0; oh < output_size; ++oh) {
 8000968:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800096a:	3301      	adds	r3, #1
 800096c:	633b      	str	r3, [r7, #48]	@ 0x30
 800096e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8000970:	69bb      	ldr	r3, [r7, #24]
 8000972:	429a      	cmp	r2, r3
 8000974:	f6ff af60 	blt.w	8000838 <conv2_2d+0x36>
    for (int oc = 0; oc < conv_layer->out_channels; ++oc) {
 8000978:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800097a:	3301      	adds	r3, #1
 800097c:	637b      	str	r3, [r7, #52]	@ 0x34
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	685b      	ldr	r3, [r3, #4]
 8000982:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8000984:	429a      	cmp	r2, r3
 8000986:	f6ff af54 	blt.w	8000832 <conv2_2d+0x30>
            }
        }
    }
}
 800098a:	bf00      	nop
 800098c:	bf00      	nop
 800098e:	373c      	adds	r7, #60	@ 0x3c
 8000990:	46bd      	mov	sp, r7
 8000992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000996:	4770      	bx	lr

08000998 <maxpool2d>:

// Function to perform 2D max pooling
void maxpool2d(float* input, float* output, int in_channels, int input_size, int kernel_size, int stride) {
 8000998:	b480      	push	{r7}
 800099a:	b091      	sub	sp, #68	@ 0x44
 800099c:	af00      	add	r7, sp, #0
 800099e:	60f8      	str	r0, [r7, #12]
 80009a0:	60b9      	str	r1, [r7, #8]
 80009a2:	607a      	str	r2, [r7, #4]
 80009a4:	603b      	str	r3, [r7, #0]
    int output_size = (input_size - kernel_size) / stride + 1;
 80009a6:	683a      	ldr	r2, [r7, #0]
 80009a8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80009aa:	1ad2      	subs	r2, r2, r3
 80009ac:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80009ae:	fb92 f3f3 	sdiv	r3, r2, r3
 80009b2:	3301      	adds	r3, #1
 80009b4:	627b      	str	r3, [r7, #36]	@ 0x24

    for (int ic = 0; ic < in_channels; ++ic) {
 80009b6:	2300      	movs	r3, #0
 80009b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80009ba:	e089      	b.n	8000ad0 <maxpool2d+0x138>
        for (int oh = 0; oh < output_size; ++oh) {
 80009bc:	2300      	movs	r3, #0
 80009be:	63bb      	str	r3, [r7, #56]	@ 0x38
 80009c0:	e07e      	b.n	8000ac0 <maxpool2d+0x128>
            for (int ow = 0; ow < output_size; ++ow) {
 80009c2:	2300      	movs	r3, #0
 80009c4:	637b      	str	r3, [r7, #52]	@ 0x34
 80009c6:	e074      	b.n	8000ab2 <maxpool2d+0x11a>
                int ih = oh * stride;
 80009c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80009ca:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80009cc:	fb02 f303 	mul.w	r3, r2, r3
 80009d0:	623b      	str	r3, [r7, #32]
                int iw = ow * stride;
 80009d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80009d4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80009d6:	fb02 f303 	mul.w	r3, r2, r3
 80009da:	61fb      	str	r3, [r7, #28]
                float max_value = input[ic * input_size * input_size + ih * input_size + iw];
 80009dc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80009de:	683a      	ldr	r2, [r7, #0]
 80009e0:	fb02 f303 	mul.w	r3, r2, r3
 80009e4:	683a      	ldr	r2, [r7, #0]
 80009e6:	fb03 f202 	mul.w	r2, r3, r2
 80009ea:	6a3b      	ldr	r3, [r7, #32]
 80009ec:	6839      	ldr	r1, [r7, #0]
 80009ee:	fb01 f303 	mul.w	r3, r1, r3
 80009f2:	441a      	add	r2, r3
 80009f4:	69fb      	ldr	r3, [r7, #28]
 80009f6:	4413      	add	r3, r2
 80009f8:	009b      	lsls	r3, r3, #2
 80009fa:	68fa      	ldr	r2, [r7, #12]
 80009fc:	4413      	add	r3, r2
 80009fe:	681b      	ldr	r3, [r3, #0]
 8000a00:	633b      	str	r3, [r7, #48]	@ 0x30
                for (int kh = 0; kh < kernel_size; ++kh) {
 8000a02:	2300      	movs	r3, #0
 8000a04:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000a06:	e03a      	b.n	8000a7e <maxpool2d+0xe6>
                    for (int kw = 0; kw < kernel_size; ++kw) {
 8000a08:	2300      	movs	r3, #0
 8000a0a:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000a0c:	e030      	b.n	8000a70 <maxpool2d+0xd8>
                        int nih = ih + kh;
 8000a0e:	6a3a      	ldr	r2, [r7, #32]
 8000a10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000a12:	4413      	add	r3, r2
 8000a14:	61bb      	str	r3, [r7, #24]
                        int niw = iw + kw;
 8000a16:	69fa      	ldr	r2, [r7, #28]
 8000a18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000a1a:	4413      	add	r3, r2
 8000a1c:	617b      	str	r3, [r7, #20]
                        if (nih < input_size && niw < input_size) {
 8000a1e:	69ba      	ldr	r2, [r7, #24]
 8000a20:	683b      	ldr	r3, [r7, #0]
 8000a22:	429a      	cmp	r2, r3
 8000a24:	da21      	bge.n	8000a6a <maxpool2d+0xd2>
 8000a26:	697a      	ldr	r2, [r7, #20]
 8000a28:	683b      	ldr	r3, [r7, #0]
 8000a2a:	429a      	cmp	r2, r3
 8000a2c:	da1d      	bge.n	8000a6a <maxpool2d+0xd2>
                            float value = input[ic * input_size * input_size + nih * input_size + niw];
 8000a2e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000a30:	683a      	ldr	r2, [r7, #0]
 8000a32:	fb02 f303 	mul.w	r3, r2, r3
 8000a36:	683a      	ldr	r2, [r7, #0]
 8000a38:	fb03 f202 	mul.w	r2, r3, r2
 8000a3c:	69bb      	ldr	r3, [r7, #24]
 8000a3e:	6839      	ldr	r1, [r7, #0]
 8000a40:	fb01 f303 	mul.w	r3, r1, r3
 8000a44:	441a      	add	r2, r3
 8000a46:	697b      	ldr	r3, [r7, #20]
 8000a48:	4413      	add	r3, r2
 8000a4a:	009b      	lsls	r3, r3, #2
 8000a4c:	68fa      	ldr	r2, [r7, #12]
 8000a4e:	4413      	add	r3, r2
 8000a50:	681b      	ldr	r3, [r3, #0]
 8000a52:	613b      	str	r3, [r7, #16]
                            if (value > max_value) {
 8000a54:	ed97 7a04 	vldr	s14, [r7, #16]
 8000a58:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8000a5c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000a60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000a64:	dd01      	ble.n	8000a6a <maxpool2d+0xd2>
                                max_value = value;
 8000a66:	693b      	ldr	r3, [r7, #16]
 8000a68:	633b      	str	r3, [r7, #48]	@ 0x30
                    for (int kw = 0; kw < kernel_size; ++kw) {
 8000a6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000a6c:	3301      	adds	r3, #1
 8000a6e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000a70:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8000a72:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8000a74:	429a      	cmp	r2, r3
 8000a76:	dbca      	blt.n	8000a0e <maxpool2d+0x76>
                for (int kh = 0; kh < kernel_size; ++kh) {
 8000a78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000a7a:	3301      	adds	r3, #1
 8000a7c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000a7e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8000a80:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8000a82:	429a      	cmp	r2, r3
 8000a84:	dbc0      	blt.n	8000a08 <maxpool2d+0x70>
                            }
                        }
                    }
                }
                output[ic * output_size * output_size + oh * output_size + ow] = max_value;
 8000a86:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000a88:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000a8a:	fb02 f303 	mul.w	r3, r2, r3
 8000a8e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000a90:	fb03 f202 	mul.w	r2, r3, r2
 8000a94:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000a96:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8000a98:	fb01 f303 	mul.w	r3, r1, r3
 8000a9c:	441a      	add	r2, r3
 8000a9e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000aa0:	4413      	add	r3, r2
 8000aa2:	009b      	lsls	r3, r3, #2
 8000aa4:	68ba      	ldr	r2, [r7, #8]
 8000aa6:	4413      	add	r3, r2
 8000aa8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8000aaa:	601a      	str	r2, [r3, #0]
            for (int ow = 0; ow < output_size; ++ow) {
 8000aac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000aae:	3301      	adds	r3, #1
 8000ab0:	637b      	str	r3, [r7, #52]	@ 0x34
 8000ab2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8000ab4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ab6:	429a      	cmp	r2, r3
 8000ab8:	db86      	blt.n	80009c8 <maxpool2d+0x30>
        for (int oh = 0; oh < output_size; ++oh) {
 8000aba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000abc:	3301      	adds	r3, #1
 8000abe:	63bb      	str	r3, [r7, #56]	@ 0x38
 8000ac0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8000ac2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ac4:	429a      	cmp	r2, r3
 8000ac6:	f6ff af7c 	blt.w	80009c2 <maxpool2d+0x2a>
    for (int ic = 0; ic < in_channels; ++ic) {
 8000aca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000acc:	3301      	adds	r3, #1
 8000ace:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8000ad0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	429a      	cmp	r2, r3
 8000ad6:	f6ff af71 	blt.w	80009bc <maxpool2d+0x24>
            }
        }
    }
}
 8000ada:	bf00      	nop
 8000adc:	bf00      	nop
 8000ade:	3744      	adds	r7, #68	@ 0x44
 8000ae0:	46bd      	mov	sp, r7
 8000ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae6:	4770      	bx	lr

08000ae8 <inference>:

// Function to perform inference
int inference(const float input_image[1][INPUT_SIZE][INPUT_SIZE], conv1* conv1, conv2* conv2, FullyConnectedLayer* fc_layer) {
 8000ae8:	b590      	push	{r4, r7, lr}
 8000aea:	f5ad 3d75 	sub.w	sp, sp, #250880	@ 0x3d400
 8000aee:	b0a7      	sub	sp, #156	@ 0x9c
 8000af0:	af02      	add	r7, sp, #8
 8000af2:	f507 6492 	add.w	r4, r7, #1168	@ 0x490
 8000af6:	f2a4 4484 	subw	r4, r4, #1156	@ 0x484
 8000afa:	6020      	str	r0, [r4, #0]
 8000afc:	f507 6092 	add.w	r0, r7, #1168	@ 0x490
 8000b00:	f5a0 6091 	sub.w	r0, r0, #1160	@ 0x488
 8000b04:	6001      	str	r1, [r0, #0]
 8000b06:	f507 6192 	add.w	r1, r7, #1168	@ 0x490
 8000b0a:	f2a1 418c 	subw	r1, r1, #1164	@ 0x48c
 8000b0e:	600a      	str	r2, [r1, #0]
 8000b10:	f507 6292 	add.w	r2, r7, #1168	@ 0x490
 8000b14:	f5a2 6292 	sub.w	r2, r2, #1168	@ 0x490
 8000b18:	6013      	str	r3, [r2, #0]
    // Step 1: Convolutional Layer 1
    float conv1_output[CONV1_OUT_CHANNELS][INPUT_SIZE][INPUT_SIZE] = {0};
 8000b1a:	4b97      	ldr	r3, [pc, #604]	@ (8000d78 <inference+0x290>)
 8000b1c:	443b      	add	r3, r7
 8000b1e:	f5a3 6386 	sub.w	r3, r3, #1072	@ 0x430
 8000b22:	4618      	mov	r0, r3
 8000b24:	f44f 4344 	mov.w	r3, #50176	@ 0xc400
 8000b28:	461a      	mov	r2, r3
 8000b2a:	2100      	movs	r1, #0
 8000b2c:	f006 f9da 	bl	8006ee4 <memset>

    LIFNeuron lif1_neurons[CONV1_OUT_CHANNELS * INPUT_SIZE * INPUT_SIZE] = {0};
 8000b30:	4b92      	ldr	r3, [pc, #584]	@ (8000d7c <inference+0x294>)
 8000b32:	443b      	add	r3, r7
 8000b34:	f5a3 6343 	sub.w	r3, r3, #3120	@ 0xc30
 8000b38:	4618      	mov	r0, r3
 8000b3a:	f44f 33c4 	mov.w	r3, #100352	@ 0x18800
 8000b3e:	461a      	mov	r2, r3
 8000b40:	2100      	movs	r1, #0
 8000b42:	f006 f9cf 	bl	8006ee4 <memset>
    conv1_2d(&input_image[0][0][0], &conv1_output[0][0][0], conv1, INPUT_SIZE);
 8000b46:	f507 6392 	add.w	r3, r7, #1168	@ 0x490
 8000b4a:	f2a3 4384 	subw	r3, r3, #1156	@ 0x484
 8000b4e:	6818      	ldr	r0, [r3, #0]
 8000b50:	f507 6392 	add.w	r3, r7, #1168	@ 0x490
 8000b54:	f5a3 6291 	sub.w	r2, r3, #1160	@ 0x488
 8000b58:	4989      	ldr	r1, [pc, #548]	@ (8000d80 <inference+0x298>)
 8000b5a:	4b8a      	ldr	r3, [pc, #552]	@ (8000d84 <inference+0x29c>)
 8000b5c:	440b      	add	r3, r1
 8000b5e:	19d9      	adds	r1, r3, r7
 8000b60:	231c      	movs	r3, #28
 8000b62:	6812      	ldr	r2, [r2, #0]
 8000b64:	f7ff fd82 	bl	800066c <conv1_2d>

    // Step 2: Apply LIF neurons to conv1 output
    for (int i = 0; i < CONV1_OUT_CHANNELS * INPUT_SIZE * INPUT_SIZE; i++) {
 8000b68:	2300      	movs	r3, #0
 8000b6a:	4a87      	ldr	r2, [pc, #540]	@ (8000d88 <inference+0x2a0>)
 8000b6c:	443a      	add	r2, r7
 8000b6e:	6013      	str	r3, [r2, #0]
 8000b70:	e039      	b.n	8000be6 <inference+0xfe>
        update_neuron(&lif1_neurons[i], conv1_output[0][0][i], LIF1_BETA, THRESHOLD);
 8000b72:	4b86      	ldr	r3, [pc, #536]	@ (8000d8c <inference+0x2a4>)
 8000b74:	f503 3375 	add.w	r3, r3, #250880	@ 0x3d400
 8000b78:	f103 0390 	add.w	r3, r3, #144	@ 0x90
 8000b7c:	443b      	add	r3, r7
 8000b7e:	4a82      	ldr	r2, [pc, #520]	@ (8000d88 <inference+0x2a0>)
 8000b80:	443a      	add	r2, r7
 8000b82:	6812      	ldr	r2, [r2, #0]
 8000b84:	00d2      	lsls	r2, r2, #3
 8000b86:	1899      	adds	r1, r3, r2
 8000b88:	4b7b      	ldr	r3, [pc, #492]	@ (8000d78 <inference+0x290>)
 8000b8a:	443b      	add	r3, r7
 8000b8c:	f5a3 6286 	sub.w	r2, r3, #1072	@ 0x430
 8000b90:	4b7d      	ldr	r3, [pc, #500]	@ (8000d88 <inference+0x2a0>)
 8000b92:	443b      	add	r3, r7
 8000b94:	681b      	ldr	r3, [r3, #0]
 8000b96:	009b      	lsls	r3, r3, #2
 8000b98:	4413      	add	r3, r2
 8000b9a:	edd3 7a00 	vldr	s15, [r3]
 8000b9e:	eeb7 1a00 	vmov.f32	s2, #112	@ 0x3f800000  1.0
 8000ba2:	eddf 0a7b 	vldr	s1, [pc, #492]	@ 8000d90 <inference+0x2a8>
 8000ba6:	eeb0 0a67 	vmov.f32	s0, s15
 8000baa:	4608      	mov	r0, r1
 8000bac:	f7ff fd26 	bl	80005fc <update_neuron>
        conv1_output[0][0][i] = lif1_neurons[i].membrane_potential;
 8000bb0:	4b72      	ldr	r3, [pc, #456]	@ (8000d7c <inference+0x294>)
 8000bb2:	443b      	add	r3, r7
 8000bb4:	f5a3 6243 	sub.w	r2, r3, #3120	@ 0xc30
 8000bb8:	4b73      	ldr	r3, [pc, #460]	@ (8000d88 <inference+0x2a0>)
 8000bba:	443b      	add	r3, r7
 8000bbc:	681b      	ldr	r3, [r3, #0]
 8000bbe:	00db      	lsls	r3, r3, #3
 8000bc0:	4413      	add	r3, r2
 8000bc2:	681a      	ldr	r2, [r3, #0]
 8000bc4:	4b6c      	ldr	r3, [pc, #432]	@ (8000d78 <inference+0x290>)
 8000bc6:	443b      	add	r3, r7
 8000bc8:	f5a3 6186 	sub.w	r1, r3, #1072	@ 0x430
 8000bcc:	4b6e      	ldr	r3, [pc, #440]	@ (8000d88 <inference+0x2a0>)
 8000bce:	443b      	add	r3, r7
 8000bd0:	681b      	ldr	r3, [r3, #0]
 8000bd2:	009b      	lsls	r3, r3, #2
 8000bd4:	440b      	add	r3, r1
 8000bd6:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < CONV1_OUT_CHANNELS * INPUT_SIZE * INPUT_SIZE; i++) {
 8000bd8:	4b6b      	ldr	r3, [pc, #428]	@ (8000d88 <inference+0x2a0>)
 8000bda:	443b      	add	r3, r7
 8000bdc:	681b      	ldr	r3, [r3, #0]
 8000bde:	3301      	adds	r3, #1
 8000be0:	4a69      	ldr	r2, [pc, #420]	@ (8000d88 <inference+0x2a0>)
 8000be2:	443a      	add	r2, r7
 8000be4:	6013      	str	r3, [r2, #0]
 8000be6:	4b68      	ldr	r3, [pc, #416]	@ (8000d88 <inference+0x2a0>)
 8000be8:	443b      	add	r3, r7
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	f5b3 5f44 	cmp.w	r3, #12544	@ 0x3100
 8000bf0:	dbbf      	blt.n	8000b72 <inference+0x8a>
    }

    // Step 3: Max Pooling for Conv1
    float pool1_output[CONV1_OUT_CHANNELS][INPUT_SIZE/2][INPUT_SIZE/2] = {0};
 8000bf2:	4b68      	ldr	r3, [pc, #416]	@ (8000d94 <inference+0x2ac>)
 8000bf4:	443b      	add	r3, r7
 8000bf6:	f5a3 6353 	sub.w	r3, r3, #3376	@ 0xd30
 8000bfa:	4618      	mov	r0, r3
 8000bfc:	f44f 5344 	mov.w	r3, #12544	@ 0x3100
 8000c00:	461a      	mov	r2, r3
 8000c02:	2100      	movs	r1, #0
 8000c04:	f006 f96e 	bl	8006ee4 <memset>
    maxpool2d(&conv1_output[0][0][0], &pool1_output[0][0][0], CONV1_OUT_CHANNELS, INPUT_SIZE, 2, 2);
 8000c08:	4963      	ldr	r1, [pc, #396]	@ (8000d98 <inference+0x2b0>)
 8000c0a:	4b5e      	ldr	r3, [pc, #376]	@ (8000d84 <inference+0x29c>)
 8000c0c:	440b      	add	r3, r1
 8000c0e:	19d9      	adds	r1, r3, r7
 8000c10:	485b      	ldr	r0, [pc, #364]	@ (8000d80 <inference+0x298>)
 8000c12:	4b5c      	ldr	r3, [pc, #368]	@ (8000d84 <inference+0x29c>)
 8000c14:	4403      	add	r3, r0
 8000c16:	19d8      	adds	r0, r3, r7
 8000c18:	2302      	movs	r3, #2
 8000c1a:	9301      	str	r3, [sp, #4]
 8000c1c:	2302      	movs	r3, #2
 8000c1e:	9300      	str	r3, [sp, #0]
 8000c20:	231c      	movs	r3, #28
 8000c22:	2210      	movs	r2, #16
 8000c24:	f7ff feb8 	bl	8000998 <maxpool2d>

    // Step 4: Convolutional Layer 2
    float conv2_output[CONV2_OUT_CHANNELS][INPUT_SIZE/2][INPUT_SIZE/2] = {0};
 8000c28:	4b5c      	ldr	r3, [pc, #368]	@ (8000d9c <inference+0x2b4>)
 8000c2a:	443b      	add	r3, r7
 8000c2c:	f5a3 6373 	sub.w	r3, r3, #3888	@ 0xf30
 8000c30:	4618      	mov	r0, r3
 8000c32:	f44f 43c4 	mov.w	r3, #25088	@ 0x6200
 8000c36:	461a      	mov	r2, r3
 8000c38:	2100      	movs	r1, #0
 8000c3a:	f006 f953 	bl	8006ee4 <memset>
    conv2_2d(&pool1_output[0][0][0], &conv2_output[0][0][0], conv2, INPUT_SIZE/2);
 8000c3e:	f507 6392 	add.w	r3, r7, #1168	@ 0x490
 8000c42:	f2a3 428c 	subw	r2, r3, #1164	@ 0x48c
 8000c46:	4956      	ldr	r1, [pc, #344]	@ (8000da0 <inference+0x2b8>)
 8000c48:	4b4e      	ldr	r3, [pc, #312]	@ (8000d84 <inference+0x29c>)
 8000c4a:	440b      	add	r3, r1
 8000c4c:	19d9      	adds	r1, r3, r7
 8000c4e:	4852      	ldr	r0, [pc, #328]	@ (8000d98 <inference+0x2b0>)
 8000c50:	4b4c      	ldr	r3, [pc, #304]	@ (8000d84 <inference+0x29c>)
 8000c52:	4403      	add	r3, r0
 8000c54:	19d8      	adds	r0, r3, r7
 8000c56:	230e      	movs	r3, #14
 8000c58:	6812      	ldr	r2, [r2, #0]
 8000c5a:	f7ff fdd2 	bl	8000802 <conv2_2d>

    // Step 5: Apply LIF neurons to conv2 output
    LIFNeuron lif2_neurons[CONV2_OUT_CHANNELS * (INPUT_SIZE/2) * (INPUT_SIZE/2)] = {0};
 8000c5e:	f243 4390 	movw	r3, #13456	@ 0x3490
 8000c62:	443b      	add	r3, r7
 8000c64:	f5a3 734c 	sub.w	r3, r3, #816	@ 0x330
 8000c68:	4618      	mov	r0, r3
 8000c6a:	f44f 4344 	mov.w	r3, #50176	@ 0xc400
 8000c6e:	461a      	mov	r2, r3
 8000c70:	2100      	movs	r1, #0
 8000c72:	f006 f937 	bl	8006ee4 <memset>

    for (int i = 0; i < CONV2_OUT_CHANNELS * (INPUT_SIZE/2) * (INPUT_SIZE/2); i++) {
 8000c76:	2300      	movs	r3, #0
 8000c78:	4a4a      	ldr	r2, [pc, #296]	@ (8000da4 <inference+0x2bc>)
 8000c7a:	443a      	add	r2, r7
 8000c7c:	6013      	str	r3, [r2, #0]
 8000c7e:	e03a      	b.n	8000cf6 <inference+0x20e>
        update_neuron(&lif2_neurons[i], conv2_output[0][0][i], LIF2_BETA, THRESHOLD);
 8000c80:	4b49      	ldr	r3, [pc, #292]	@ (8000da8 <inference+0x2c0>)
 8000c82:	f503 3375 	add.w	r3, r3, #250880	@ 0x3d400
 8000c86:	f103 0390 	add.w	r3, r3, #144	@ 0x90
 8000c8a:	443b      	add	r3, r7
 8000c8c:	4a45      	ldr	r2, [pc, #276]	@ (8000da4 <inference+0x2bc>)
 8000c8e:	443a      	add	r2, r7
 8000c90:	6812      	ldr	r2, [r2, #0]
 8000c92:	00d2      	lsls	r2, r2, #3
 8000c94:	1899      	adds	r1, r3, r2
 8000c96:	4b41      	ldr	r3, [pc, #260]	@ (8000d9c <inference+0x2b4>)
 8000c98:	443b      	add	r3, r7
 8000c9a:	f5a3 6273 	sub.w	r2, r3, #3888	@ 0xf30
 8000c9e:	4b41      	ldr	r3, [pc, #260]	@ (8000da4 <inference+0x2bc>)
 8000ca0:	443b      	add	r3, r7
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	009b      	lsls	r3, r3, #2
 8000ca6:	4413      	add	r3, r2
 8000ca8:	edd3 7a00 	vldr	s15, [r3]
 8000cac:	eeb7 1a00 	vmov.f32	s2, #112	@ 0x3f800000  1.0
 8000cb0:	eddf 0a37 	vldr	s1, [pc, #220]	@ 8000d90 <inference+0x2a8>
 8000cb4:	eeb0 0a67 	vmov.f32	s0, s15
 8000cb8:	4608      	mov	r0, r1
 8000cba:	f7ff fc9f 	bl	80005fc <update_neuron>
        conv2_output[0][0][i] = lif2_neurons[i].membrane_potential;
 8000cbe:	f243 4390 	movw	r3, #13456	@ 0x3490
 8000cc2:	443b      	add	r3, r7
 8000cc4:	f5a3 724c 	sub.w	r2, r3, #816	@ 0x330
 8000cc8:	4b36      	ldr	r3, [pc, #216]	@ (8000da4 <inference+0x2bc>)
 8000cca:	443b      	add	r3, r7
 8000ccc:	681b      	ldr	r3, [r3, #0]
 8000cce:	00db      	lsls	r3, r3, #3
 8000cd0:	4413      	add	r3, r2
 8000cd2:	681a      	ldr	r2, [r3, #0]
 8000cd4:	4b31      	ldr	r3, [pc, #196]	@ (8000d9c <inference+0x2b4>)
 8000cd6:	443b      	add	r3, r7
 8000cd8:	f5a3 6173 	sub.w	r1, r3, #3888	@ 0xf30
 8000cdc:	4b31      	ldr	r3, [pc, #196]	@ (8000da4 <inference+0x2bc>)
 8000cde:	443b      	add	r3, r7
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	009b      	lsls	r3, r3, #2
 8000ce4:	440b      	add	r3, r1
 8000ce6:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < CONV2_OUT_CHANNELS * (INPUT_SIZE/2) * (INPUT_SIZE/2); i++) {
 8000ce8:	4b2e      	ldr	r3, [pc, #184]	@ (8000da4 <inference+0x2bc>)
 8000cea:	443b      	add	r3, r7
 8000cec:	681b      	ldr	r3, [r3, #0]
 8000cee:	3301      	adds	r3, #1
 8000cf0:	4a2c      	ldr	r2, [pc, #176]	@ (8000da4 <inference+0x2bc>)
 8000cf2:	443a      	add	r2, r7
 8000cf4:	6013      	str	r3, [r2, #0]
 8000cf6:	4b2b      	ldr	r3, [pc, #172]	@ (8000da4 <inference+0x2bc>)
 8000cf8:	443b      	add	r3, r7
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	f5b3 5fc4 	cmp.w	r3, #6272	@ 0x1880
 8000d00:	dbbe      	blt.n	8000c80 <inference+0x198>
    }

    // Step 6: Max Pooling for Conv2
    float pool2_output[CONV2_OUT_CHANNELS][INPUT_SIZE/4][INPUT_SIZE/4] = {0};
 8000d02:	f242 4390 	movw	r3, #9360	@ 0x2490
 8000d06:	443b      	add	r3, r7
 8000d08:	f5a3 633b 	sub.w	r3, r3, #2992	@ 0xbb0
 8000d0c:	4618      	mov	r0, r3
 8000d0e:	f44f 53c4 	mov.w	r3, #6272	@ 0x1880
 8000d12:	461a      	mov	r2, r3
 8000d14:	2100      	movs	r1, #0
 8000d16:	f006 f8e5 	bl	8006ee4 <memset>
    maxpool2d(&conv2_output[0][0][0], &pool2_output[0][0][0], CONV2_OUT_CHANNELS, INPUT_SIZE/2, 2, 2);
 8000d1a:	4924      	ldr	r1, [pc, #144]	@ (8000dac <inference+0x2c4>)
 8000d1c:	4b19      	ldr	r3, [pc, #100]	@ (8000d84 <inference+0x29c>)
 8000d1e:	440b      	add	r3, r1
 8000d20:	19d9      	adds	r1, r3, r7
 8000d22:	481f      	ldr	r0, [pc, #124]	@ (8000da0 <inference+0x2b8>)
 8000d24:	4b17      	ldr	r3, [pc, #92]	@ (8000d84 <inference+0x29c>)
 8000d26:	4403      	add	r3, r0
 8000d28:	19d8      	adds	r0, r3, r7
 8000d2a:	2302      	movs	r3, #2
 8000d2c:	9301      	str	r3, [sp, #4]
 8000d2e:	2302      	movs	r3, #2
 8000d30:	9300      	str	r3, [sp, #0]
 8000d32:	230e      	movs	r3, #14
 8000d34:	2220      	movs	r2, #32
 8000d36:	f7ff fe2f 	bl	8000998 <maxpool2d>

    // Step 7: Flatten
    float flattened_output[FC1_IN_FEATURES] = {0};
 8000d3a:	f507 6392 	add.w	r3, r7, #1168	@ 0x490
 8000d3e:	f5a3 6386 	sub.w	r3, r3, #1072	@ 0x430
 8000d42:	4618      	mov	r0, r3
 8000d44:	f44f 53c4 	mov.w	r3, #6272	@ 0x1880
 8000d48:	461a      	mov	r2, r3
 8000d4a:	2100      	movs	r1, #0
 8000d4c:	f006 f8ca 	bl	8006ee4 <memset>
    int index = 0;
 8000d50:	2300      	movs	r3, #0
 8000d52:	4a17      	ldr	r2, [pc, #92]	@ (8000db0 <inference+0x2c8>)
 8000d54:	443a      	add	r2, r7
 8000d56:	6013      	str	r3, [r2, #0]
    for (int c = 0; c < CONV2_OUT_CHANNELS; ++c) {
 8000d58:	2300      	movs	r3, #0
 8000d5a:	4a16      	ldr	r2, [pc, #88]	@ (8000db4 <inference+0x2cc>)
 8000d5c:	443a      	add	r2, r7
 8000d5e:	6013      	str	r3, [r2, #0]
 8000d60:	e076      	b.n	8000e50 <inference+0x368>
        for (int h = 0; h < INPUT_SIZE/4; ++h) {
 8000d62:	2300      	movs	r3, #0
 8000d64:	4a14      	ldr	r2, [pc, #80]	@ (8000db8 <inference+0x2d0>)
 8000d66:	443a      	add	r2, r7
 8000d68:	6013      	str	r3, [r2, #0]
 8000d6a:	e065      	b.n	8000e38 <inference+0x350>
            for (int w = 0; w < INPUT_SIZE/4; ++w) {
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	4a13      	ldr	r2, [pc, #76]	@ (8000dbc <inference+0x2d4>)
 8000d70:	443a      	add	r2, r7
 8000d72:	6013      	str	r3, [r2, #0]
 8000d74:	e054      	b.n	8000e20 <inference+0x338>
 8000d76:	bf00      	nop
 8000d78:	00031490 	.word	0x00031490
 8000d7c:	00019490 	.word	0x00019490
 8000d80:	ffff3bd0 	.word	0xffff3bd0
 8000d84:	0003d490 	.word	0x0003d490
 8000d88:	0003d48c 	.word	0x0003d48c
 8000d8c:	fffdb3d0 	.word	0xfffdb3d0
 8000d90:	3f666666 	.word	0x3f666666
 8000d94:	00016490 	.word	0x00016490
 8000d98:	fffd82d0 	.word	0xfffd82d0
 8000d9c:	00010490 	.word	0x00010490
 8000da0:	fffd20d0 	.word	0xfffd20d0
 8000da4:	0003d488 	.word	0x0003d488
 8000da8:	fffc5cd0 	.word	0xfffc5cd0
 8000dac:	fffc4450 	.word	0xfffc4450
 8000db0:	0003d484 	.word	0x0003d484
 8000db4:	0003d480 	.word	0x0003d480
 8000db8:	0003d47c 	.word	0x0003d47c
 8000dbc:	0003d478 	.word	0x0003d478
                flattened_output[index++] = pool2_output[c][h][w];
 8000dc0:	4b84      	ldr	r3, [pc, #528]	@ (8000fd4 <inference+0x4ec>)
 8000dc2:	443b      	add	r3, r7
 8000dc4:	6818      	ldr	r0, [r3, #0]
 8000dc6:	1c43      	adds	r3, r0, #1
 8000dc8:	4a82      	ldr	r2, [pc, #520]	@ (8000fd4 <inference+0x4ec>)
 8000dca:	443a      	add	r2, r7
 8000dcc:	6013      	str	r3, [r2, #0]
 8000dce:	f242 4390 	movw	r3, #9360	@ 0x2490
 8000dd2:	443b      	add	r3, r7
 8000dd4:	f5a3 643b 	sub.w	r4, r3, #2992	@ 0xbb0
 8000dd8:	4b7f      	ldr	r3, [pc, #508]	@ (8000fd8 <inference+0x4f0>)
 8000dda:	443b      	add	r3, r7
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	4a7f      	ldr	r2, [pc, #508]	@ (8000fdc <inference+0x4f4>)
 8000de0:	443a      	add	r2, r7
 8000de2:	6811      	ldr	r1, [r2, #0]
 8000de4:	461a      	mov	r2, r3
 8000de6:	00d2      	lsls	r2, r2, #3
 8000de8:	1ad2      	subs	r2, r2, r3
 8000dea:	460b      	mov	r3, r1
 8000dec:	00db      	lsls	r3, r3, #3
 8000dee:	1a5b      	subs	r3, r3, r1
 8000df0:	00d9      	lsls	r1, r3, #3
 8000df2:	1ac9      	subs	r1, r1, r3
 8000df4:	440a      	add	r2, r1
 8000df6:	4b7a      	ldr	r3, [pc, #488]	@ (8000fe0 <inference+0x4f8>)
 8000df8:	443b      	add	r3, r7
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	4413      	add	r3, r2
 8000dfe:	009b      	lsls	r3, r3, #2
 8000e00:	4423      	add	r3, r4
 8000e02:	681a      	ldr	r2, [r3, #0]
 8000e04:	f507 6392 	add.w	r3, r7, #1168	@ 0x490
 8000e08:	f5a3 6186 	sub.w	r1, r3, #1072	@ 0x430
 8000e0c:	0083      	lsls	r3, r0, #2
 8000e0e:	440b      	add	r3, r1
 8000e10:	601a      	str	r2, [r3, #0]
            for (int w = 0; w < INPUT_SIZE/4; ++w) {
 8000e12:	4b73      	ldr	r3, [pc, #460]	@ (8000fe0 <inference+0x4f8>)
 8000e14:	443b      	add	r3, r7
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	3301      	adds	r3, #1
 8000e1a:	4a71      	ldr	r2, [pc, #452]	@ (8000fe0 <inference+0x4f8>)
 8000e1c:	443a      	add	r2, r7
 8000e1e:	6013      	str	r3, [r2, #0]
 8000e20:	4b6f      	ldr	r3, [pc, #444]	@ (8000fe0 <inference+0x4f8>)
 8000e22:	443b      	add	r3, r7
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	2b06      	cmp	r3, #6
 8000e28:	ddca      	ble.n	8000dc0 <inference+0x2d8>
        for (int h = 0; h < INPUT_SIZE/4; ++h) {
 8000e2a:	4b6b      	ldr	r3, [pc, #428]	@ (8000fd8 <inference+0x4f0>)
 8000e2c:	443b      	add	r3, r7
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	3301      	adds	r3, #1
 8000e32:	4a69      	ldr	r2, [pc, #420]	@ (8000fd8 <inference+0x4f0>)
 8000e34:	443a      	add	r2, r7
 8000e36:	6013      	str	r3, [r2, #0]
 8000e38:	4b67      	ldr	r3, [pc, #412]	@ (8000fd8 <inference+0x4f0>)
 8000e3a:	443b      	add	r3, r7
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	2b06      	cmp	r3, #6
 8000e40:	dd94      	ble.n	8000d6c <inference+0x284>
    for (int c = 0; c < CONV2_OUT_CHANNELS; ++c) {
 8000e42:	4b66      	ldr	r3, [pc, #408]	@ (8000fdc <inference+0x4f4>)
 8000e44:	443b      	add	r3, r7
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	3301      	adds	r3, #1
 8000e4a:	4a64      	ldr	r2, [pc, #400]	@ (8000fdc <inference+0x4f4>)
 8000e4c:	443a      	add	r2, r7
 8000e4e:	6013      	str	r3, [r2, #0]
 8000e50:	4b62      	ldr	r3, [pc, #392]	@ (8000fdc <inference+0x4f4>)
 8000e52:	443b      	add	r3, r7
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	2b1f      	cmp	r3, #31
 8000e58:	dd83      	ble.n	8000d62 <inference+0x27a>
            }
        }
    }

    // Step 8: Fully Connected Layer
    LIFNeuron lif3_neurons[FC1_OUT_FEATURES] = {0};
 8000e5a:	f507 6392 	add.w	r3, r7, #1168	@ 0x490
 8000e5e:	f5a3 6390 	sub.w	r3, r3, #1152	@ 0x480
 8000e62:	4618      	mov	r0, r3
 8000e64:	2350      	movs	r3, #80	@ 0x50
 8000e66:	461a      	mov	r2, r3
 8000e68:	2100      	movs	r1, #0
 8000e6a:	f006 f83b 	bl	8006ee4 <memset>
    for (int i = 0; i < FC1_OUT_FEATURES; i++) {
 8000e6e:	2300      	movs	r3, #0
 8000e70:	4a5c      	ldr	r2, [pc, #368]	@ (8000fe4 <inference+0x4fc>)
 8000e72:	443a      	add	r2, r7
 8000e74:	6013      	str	r3, [r2, #0]
 8000e76:	e05a      	b.n	8000f2e <inference+0x446>
        float input_current = 0;
 8000e78:	f04f 0300 	mov.w	r3, #0
 8000e7c:	4a5a      	ldr	r2, [pc, #360]	@ (8000fe8 <inference+0x500>)
 8000e7e:	443a      	add	r2, r7
 8000e80:	6013      	str	r3, [r2, #0]
        for (int j = 0; j < FC1_IN_FEATURES; j++) {
 8000e82:	2300      	movs	r3, #0
 8000e84:	4a59      	ldr	r2, [pc, #356]	@ (8000fec <inference+0x504>)
 8000e86:	443a      	add	r2, r7
 8000e88:	6013      	str	r3, [r2, #0]
 8000e8a:	e02d      	b.n	8000ee8 <inference+0x400>
            input_current = input_current + ((fc1_weights[i][j]) * flattened_output[j]);
 8000e8c:	4958      	ldr	r1, [pc, #352]	@ (8000ff0 <inference+0x508>)
 8000e8e:	4b55      	ldr	r3, [pc, #340]	@ (8000fe4 <inference+0x4fc>)
 8000e90:	443b      	add	r3, r7
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	f44f 62c4 	mov.w	r2, #1568	@ 0x620
 8000e98:	fb03 f202 	mul.w	r2, r3, r2
 8000e9c:	4b53      	ldr	r3, [pc, #332]	@ (8000fec <inference+0x504>)
 8000e9e:	443b      	add	r3, r7
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	4413      	add	r3, r2
 8000ea4:	009b      	lsls	r3, r3, #2
 8000ea6:	440b      	add	r3, r1
 8000ea8:	ed93 7a00 	vldr	s14, [r3]
 8000eac:	f507 6392 	add.w	r3, r7, #1168	@ 0x490
 8000eb0:	f5a3 6286 	sub.w	r2, r3, #1072	@ 0x430
 8000eb4:	4b4d      	ldr	r3, [pc, #308]	@ (8000fec <inference+0x504>)
 8000eb6:	443b      	add	r3, r7
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	009b      	lsls	r3, r3, #2
 8000ebc:	4413      	add	r3, r2
 8000ebe:	edd3 7a00 	vldr	s15, [r3]
 8000ec2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000ec6:	4b48      	ldr	r3, [pc, #288]	@ (8000fe8 <inference+0x500>)
 8000ec8:	443b      	add	r3, r7
 8000eca:	ed93 7a00 	vldr	s14, [r3]
 8000ece:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000ed2:	4b45      	ldr	r3, [pc, #276]	@ (8000fe8 <inference+0x500>)
 8000ed4:	443b      	add	r3, r7
 8000ed6:	edc3 7a00 	vstr	s15, [r3]
        for (int j = 0; j < FC1_IN_FEATURES; j++) {
 8000eda:	4b44      	ldr	r3, [pc, #272]	@ (8000fec <inference+0x504>)
 8000edc:	443b      	add	r3, r7
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	3301      	adds	r3, #1
 8000ee2:	4a42      	ldr	r2, [pc, #264]	@ (8000fec <inference+0x504>)
 8000ee4:	443a      	add	r2, r7
 8000ee6:	6013      	str	r3, [r2, #0]
 8000ee8:	4b40      	ldr	r3, [pc, #256]	@ (8000fec <inference+0x504>)
 8000eea:	443b      	add	r3, r7
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	f5b3 6fc4 	cmp.w	r3, #1568	@ 0x620
 8000ef2:	dbcb      	blt.n	8000e8c <inference+0x3a4>
        }
        update_neuron(&lif3_neurons[i], input_current, LIF3_BETA, THRESHOLD);
 8000ef4:	4b3f      	ldr	r3, [pc, #252]	@ (8000ff4 <inference+0x50c>)
 8000ef6:	f503 3375 	add.w	r3, r3, #250880	@ 0x3d400
 8000efa:	f103 0390 	add.w	r3, r3, #144	@ 0x90
 8000efe:	443b      	add	r3, r7
 8000f00:	4a38      	ldr	r2, [pc, #224]	@ (8000fe4 <inference+0x4fc>)
 8000f02:	443a      	add	r2, r7
 8000f04:	6812      	ldr	r2, [r2, #0]
 8000f06:	00d2      	lsls	r2, r2, #3
 8000f08:	4413      	add	r3, r2
 8000f0a:	eeb7 1a00 	vmov.f32	s2, #112	@ 0x3f800000  1.0
 8000f0e:	eddf 0a3a 	vldr	s1, [pc, #232]	@ 8000ff8 <inference+0x510>
 8000f12:	4a35      	ldr	r2, [pc, #212]	@ (8000fe8 <inference+0x500>)
 8000f14:	443a      	add	r2, r7
 8000f16:	ed92 0a00 	vldr	s0, [r2]
 8000f1a:	4618      	mov	r0, r3
 8000f1c:	f7ff fb6e 	bl	80005fc <update_neuron>
    for (int i = 0; i < FC1_OUT_FEATURES; i++) {
 8000f20:	4b30      	ldr	r3, [pc, #192]	@ (8000fe4 <inference+0x4fc>)
 8000f22:	443b      	add	r3, r7
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	3301      	adds	r3, #1
 8000f28:	4a2e      	ldr	r2, [pc, #184]	@ (8000fe4 <inference+0x4fc>)
 8000f2a:	443a      	add	r2, r7
 8000f2c:	6013      	str	r3, [r2, #0]
 8000f2e:	4b2d      	ldr	r3, [pc, #180]	@ (8000fe4 <inference+0x4fc>)
 8000f30:	443b      	add	r3, r7
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	2b09      	cmp	r3, #9
 8000f36:	dd9f      	ble.n	8000e78 <inference+0x390>
        // fc_layer->neurons[i] = lif3_neurons[i];
    }

    // Find the index of the maximum value in the output (predicted label)
    int predicted_label = 0;
 8000f38:	2300      	movs	r3, #0
 8000f3a:	4a30      	ldr	r2, [pc, #192]	@ (8000ffc <inference+0x514>)
 8000f3c:	443a      	add	r2, r7
 8000f3e:	6013      	str	r3, [r2, #0]
    float max_val = lif3_neurons[0].membrane_potential;
 8000f40:	f507 6392 	add.w	r3, r7, #1168	@ 0x490
 8000f44:	f5a3 6390 	sub.w	r3, r3, #1152	@ 0x480
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	4a2d      	ldr	r2, [pc, #180]	@ (8001000 <inference+0x518>)
 8000f4c:	443a      	add	r2, r7
 8000f4e:	6013      	str	r3, [r2, #0]
    for (int i = 1; i < FC1_OUT_FEATURES; ++i) {
 8000f50:	2301      	movs	r3, #1
 8000f52:	4a2c      	ldr	r2, [pc, #176]	@ (8001004 <inference+0x51c>)
 8000f54:	443a      	add	r2, r7
 8000f56:	6013      	str	r3, [r2, #0]
 8000f58:	e02d      	b.n	8000fb6 <inference+0x4ce>
        // printf("mem_val[%d]:%f\n",i,lif3_neurons[i].membrane_potential);
        if (lif3_neurons[i].membrane_potential > max_val) {
 8000f5a:	f507 6392 	add.w	r3, r7, #1168	@ 0x490
 8000f5e:	f5a3 6290 	sub.w	r2, r3, #1152	@ 0x480
 8000f62:	4b28      	ldr	r3, [pc, #160]	@ (8001004 <inference+0x51c>)
 8000f64:	443b      	add	r3, r7
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	00db      	lsls	r3, r3, #3
 8000f6a:	4413      	add	r3, r2
 8000f6c:	edd3 7a00 	vldr	s15, [r3]
 8000f70:	4b23      	ldr	r3, [pc, #140]	@ (8001000 <inference+0x518>)
 8000f72:	443b      	add	r3, r7
 8000f74:	ed93 7a00 	vldr	s14, [r3]
 8000f78:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000f7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f80:	d512      	bpl.n	8000fa8 <inference+0x4c0>
            max_val = lif3_neurons[i].membrane_potential;
 8000f82:	f507 6392 	add.w	r3, r7, #1168	@ 0x490
 8000f86:	f5a3 6290 	sub.w	r2, r3, #1152	@ 0x480
 8000f8a:	4b1e      	ldr	r3, [pc, #120]	@ (8001004 <inference+0x51c>)
 8000f8c:	443b      	add	r3, r7
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	00db      	lsls	r3, r3, #3
 8000f92:	4413      	add	r3, r2
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	4a1a      	ldr	r2, [pc, #104]	@ (8001000 <inference+0x518>)
 8000f98:	443a      	add	r2, r7
 8000f9a:	6013      	str	r3, [r2, #0]
            predicted_label = i;
 8000f9c:	4b19      	ldr	r3, [pc, #100]	@ (8001004 <inference+0x51c>)
 8000f9e:	443b      	add	r3, r7
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	4a16      	ldr	r2, [pc, #88]	@ (8000ffc <inference+0x514>)
 8000fa4:	443a      	add	r2, r7
 8000fa6:	6013      	str	r3, [r2, #0]
    for (int i = 1; i < FC1_OUT_FEATURES; ++i) {
 8000fa8:	4b16      	ldr	r3, [pc, #88]	@ (8001004 <inference+0x51c>)
 8000faa:	443b      	add	r3, r7
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	3301      	adds	r3, #1
 8000fb0:	4a14      	ldr	r2, [pc, #80]	@ (8001004 <inference+0x51c>)
 8000fb2:	443a      	add	r2, r7
 8000fb4:	6013      	str	r3, [r2, #0]
 8000fb6:	4b13      	ldr	r3, [pc, #76]	@ (8001004 <inference+0x51c>)
 8000fb8:	443b      	add	r3, r7
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	2b09      	cmp	r3, #9
 8000fbe:	ddcc      	ble.n	8000f5a <inference+0x472>
        }
    }

    return predicted_label;
 8000fc0:	4b0e      	ldr	r3, [pc, #56]	@ (8000ffc <inference+0x514>)
 8000fc2:	443b      	add	r3, r7
 8000fc4:	681b      	ldr	r3, [r3, #0]
}
 8000fc6:	4618      	mov	r0, r3
 8000fc8:	f507 3775 	add.w	r7, r7, #250880	@ 0x3d400
 8000fcc:	3794      	adds	r7, #148	@ 0x94
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	bd90      	pop	{r4, r7, pc}
 8000fd2:	bf00      	nop
 8000fd4:	0003d484 	.word	0x0003d484
 8000fd8:	0003d47c 	.word	0x0003d47c
 8000fdc:	0003d480 	.word	0x0003d480
 8000fe0:	0003d478 	.word	0x0003d478
 8000fe4:	0003d474 	.word	0x0003d474
 8000fe8:	0003d470 	.word	0x0003d470
 8000fec:	0003d46c 	.word	0x0003d46c
 8000ff0:	0800c604 	.word	0x0800c604
 8000ff4:	fffc2b80 	.word	0xfffc2b80
 8000ff8:	3f666666 	.word	0x3f666666
 8000ffc:	0003d468 	.word	0x0003d468
 8001000:	0003d464 	.word	0x0003d464
 8001004:	0003d460 	.word	0x0003d460

08001008 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001008:	b5b0      	push	{r4, r5, r7, lr}
 800100a:	b090      	sub	sp, #64	@ 0x40
 800100c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
   conv1 conv1 = {CONV1_IN_CHANNELS, CONV1_OUT_CHANNELS, CONV1_KERNEL_SIZE, CONV1_STRIDE, CONV1_PADDING, (const float (*)[CONV1_IN_CHANNELS][CONV1_KERNEL_SIZE][CONV1_KERNEL_SIZE])conv1_weights};
 800100e:	4b1d      	ldr	r3, [pc, #116]	@ (8001084 <main+0x7c>)
 8001010:	f107 041c 	add.w	r4, r7, #28
 8001014:	461d      	mov	r5, r3
 8001016:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001018:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800101a:	e895 0003 	ldmia.w	r5, {r0, r1}
 800101e:	e884 0003 	stmia.w	r4, {r0, r1}
   conv2 conv2 = {CONV2_IN_CHANNELS, CONV2_OUT_CHANNELS, CONV2_KERNEL_SIZE, CONV2_STRIDE, CONV2_PADDING, (const float (*)[CONV2_IN_CHANNELS][CONV2_KERNEL_SIZE][CONV2_KERNEL_SIZE])conv2_weights};
 8001022:	4b19      	ldr	r3, [pc, #100]	@ (8001088 <main+0x80>)
 8001024:	1d3c      	adds	r4, r7, #4
 8001026:	461d      	mov	r5, r3
 8001028:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800102a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800102c:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001030:	e884 0003 	stmia.w	r4, {r0, r1}

	// Initialize fully connected layer
   FullyConnectedLayer fc_layer = {(const float (*)[FC1_OUT_FEATURES][FC1_IN_FEATURES])fc1_weights};
 8001034:	4b15      	ldr	r3, [pc, #84]	@ (800108c <main+0x84>)
 8001036:	603b      	str	r3, [r7, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001038:	f000 fdfc 	bl	8001c34 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800103c:	f000 f82c 	bl	8001098 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8001040:	f000 f89a 	bl	8001178 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001044:	f000 f9a2 	bl	800138c <MX_GPIO_Init>
  MX_TIM1_Init();
 8001048:	f000 f8c6 	bl	80011d8 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 800104c:	f000 f952 	bl	80012f4 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim1);
 8001050:	480f      	ldr	r0, [pc, #60]	@ (8001090 <main+0x88>)
 8001052:	f003 fecd 	bl	8004df0 <HAL_TIM_Base_Start>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  timestamp0 = htim1.Instance->CNT;
 8001056:	4b0e      	ldr	r3, [pc, #56]	@ (8001090 <main+0x88>)
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800105c:	63fb      	str	r3, [r7, #60]	@ 0x3c
	  predicted_label = inference(mnist_test_images[0], &conv1, &conv2, &fc_layer);
 800105e:	463b      	mov	r3, r7
 8001060:	1d3a      	adds	r2, r7, #4
 8001062:	f107 011c 	add.w	r1, r7, #28
 8001066:	480b      	ldr	r0, [pc, #44]	@ (8001094 <main+0x8c>)
 8001068:	f7ff fd3e 	bl	8000ae8 <inference>
 800106c:	63b8      	str	r0, [r7, #56]	@ 0x38
	  timestamp1 = htim1.Instance->CNT;
 800106e:	4b08      	ldr	r3, [pc, #32]	@ (8001090 <main+0x88>)
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001074:	637b      	str	r3, [r7, #52]	@ 0x34

	  HAL_Delay(500);
 8001076:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800107a:	f000 fe6d 	bl	8001d58 <HAL_Delay>
	  timestamp0 = htim1.Instance->CNT;
 800107e:	bf00      	nop
 8001080:	e7e9      	b.n	8001056 <main+0x4e>
 8001082:	bf00      	nop
 8001084:	08006f54 	.word	0x08006f54
 8001088:	08006f6c 	.word	0x08006f6c
 800108c:	0800c604 	.word	0x0800c604
 8001090:	2400002c 	.word	0x2400002c
 8001094:	08006f84 	.word	0x08006f84

08001098 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b09c      	sub	sp, #112	@ 0x70
 800109c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800109e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80010a2:	224c      	movs	r2, #76	@ 0x4c
 80010a4:	2100      	movs	r1, #0
 80010a6:	4618      	mov	r0, r3
 80010a8:	f005 ff1c 	bl	8006ee4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010ac:	1d3b      	adds	r3, r7, #4
 80010ae:	2220      	movs	r2, #32
 80010b0:	2100      	movs	r1, #0
 80010b2:	4618      	mov	r0, r3
 80010b4:	f005 ff16 	bl	8006ee4 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 80010b8:	2004      	movs	r0, #4
 80010ba:	f001 f917 	bl	80022ec <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80010be:	2300      	movs	r3, #0
 80010c0:	603b      	str	r3, [r7, #0]
 80010c2:	4b2c      	ldr	r3, [pc, #176]	@ (8001174 <SystemClock_Config+0xdc>)
 80010c4:	699b      	ldr	r3, [r3, #24]
 80010c6:	4a2b      	ldr	r2, [pc, #172]	@ (8001174 <SystemClock_Config+0xdc>)
 80010c8:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80010cc:	6193      	str	r3, [r2, #24]
 80010ce:	4b29      	ldr	r3, [pc, #164]	@ (8001174 <SystemClock_Config+0xdc>)
 80010d0:	699b      	ldr	r3, [r3, #24]
 80010d2:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80010d6:	603b      	str	r3, [r7, #0]
 80010d8:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80010da:	bf00      	nop
 80010dc:	4b25      	ldr	r3, [pc, #148]	@ (8001174 <SystemClock_Config+0xdc>)
 80010de:	699b      	ldr	r3, [r3, #24]
 80010e0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80010e4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80010e8:	d1f8      	bne.n	80010dc <SystemClock_Config+0x44>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 80010ea:	2321      	movs	r3, #33	@ 0x21
 80010ec:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80010ee:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80010f2:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80010f4:	2301      	movs	r3, #1
 80010f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010f8:	2302      	movs	r3, #2
 80010fa:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80010fc:	2302      	movs	r3, #2
 80010fe:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 5;
 8001100:	2305      	movs	r3, #5
 8001102:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 110;
 8001104:	236e      	movs	r3, #110	@ 0x6e
 8001106:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 8001108:	2301      	movs	r3, #1
 800110a:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800110c:	2304      	movs	r3, #4
 800110e:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001110:	2302      	movs	r3, #2
 8001112:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 8001114:	2308      	movs	r3, #8
 8001116:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8001118:	2300      	movs	r3, #0
 800111a:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800111c:	2300      	movs	r3, #0
 800111e:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001120:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001124:	4618      	mov	r0, r3
 8001126:	f001 f93b 	bl	80023a0 <HAL_RCC_OscConfig>
 800112a:	4603      	mov	r3, r0
 800112c:	2b00      	cmp	r3, #0
 800112e:	d001      	beq.n	8001134 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8001130:	f000 fad4 	bl	80016dc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001134:	233f      	movs	r3, #63	@ 0x3f
 8001136:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001138:	2303      	movs	r3, #3
 800113a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800113c:	2300      	movs	r3, #0
 800113e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8001140:	2308      	movs	r3, #8
 8001142:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8001144:	2340      	movs	r3, #64	@ 0x40
 8001146:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8001148:	2340      	movs	r3, #64	@ 0x40
 800114a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 800114c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001150:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8001152:	2340      	movs	r3, #64	@ 0x40
 8001154:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001156:	1d3b      	adds	r3, r7, #4
 8001158:	2103      	movs	r1, #3
 800115a:	4618      	mov	r0, r3
 800115c:	f001 fcfa 	bl	8002b54 <HAL_RCC_ClockConfig>
 8001160:	4603      	mov	r3, r0
 8001162:	2b00      	cmp	r3, #0
 8001164:	d001      	beq.n	800116a <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8001166:	f000 fab9 	bl	80016dc <Error_Handler>
  }
}
 800116a:	bf00      	nop
 800116c:	3770      	adds	r7, #112	@ 0x70
 800116e:	46bd      	mov	sp, r7
 8001170:	bd80      	pop	{r7, pc}
 8001172:	bf00      	nop
 8001174:	58024800 	.word	0x58024800

08001178 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	b0ae      	sub	sp, #184	@ 0xb8
 800117c:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800117e:	463b      	mov	r3, r7
 8001180:	22b8      	movs	r2, #184	@ 0xb8
 8001182:	2100      	movs	r1, #0
 8001184:	4618      	mov	r0, r3
 8001186:	f005 fead 	bl	8006ee4 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800118a:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 800118e:	f04f 0300 	mov.w	r3, #0
 8001192:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.PLL2.PLL2M = 5;
 8001196:	2305      	movs	r3, #5
 8001198:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 80;
 800119a:	2350      	movs	r3, #80	@ 0x50
 800119c:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 5;
 800119e:	2305      	movs	r3, #5
 80011a0:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 80011a2:	2302      	movs	r3, #2
 80011a4:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 80011a6:	2302      	movs	r3, #2
 80011a8:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_2;
 80011aa:	2380      	movs	r3, #128	@ 0x80
 80011ac:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 80011ae:	2300      	movs	r3, #0
 80011b0:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 80011b2:	2300      	movs	r3, #0
 80011b4:	627b      	str	r3, [r7, #36]	@ 0x24
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 80011b6:	2300      	movs	r3, #0
 80011b8:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80011bc:	463b      	mov	r3, r7
 80011be:	4618      	mov	r0, r3
 80011c0:	f002 f854 	bl	800326c <HAL_RCCEx_PeriphCLKConfig>
 80011c4:	4603      	mov	r3, r0
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d001      	beq.n	80011ce <PeriphCommonClock_Config+0x56>
  {
    Error_Handler();
 80011ca:	f000 fa87 	bl	80016dc <Error_Handler>
  }
}
 80011ce:	bf00      	nop
 80011d0:	37b8      	adds	r7, #184	@ 0xb8
 80011d2:	46bd      	mov	sp, r7
 80011d4:	bd80      	pop	{r7, pc}
	...

080011d8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	b098      	sub	sp, #96	@ 0x60
 80011dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011de:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80011e2:	2200      	movs	r2, #0
 80011e4:	601a      	str	r2, [r3, #0]
 80011e6:	605a      	str	r2, [r3, #4]
 80011e8:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80011ea:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80011ee:	2200      	movs	r2, #0
 80011f0:	601a      	str	r2, [r3, #0]
 80011f2:	605a      	str	r2, [r3, #4]
 80011f4:	609a      	str	r2, [r3, #8]
 80011f6:	60da      	str	r2, [r3, #12]
 80011f8:	611a      	str	r2, [r3, #16]
 80011fa:	615a      	str	r2, [r3, #20]
 80011fc:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80011fe:	1d3b      	adds	r3, r7, #4
 8001200:	2234      	movs	r2, #52	@ 0x34
 8001202:	2100      	movs	r1, #0
 8001204:	4618      	mov	r0, r3
 8001206:	f005 fe6d 	bl	8006ee4 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800120a:	4b38      	ldr	r3, [pc, #224]	@ (80012ec <MX_TIM1_Init+0x114>)
 800120c:	4a38      	ldr	r2, [pc, #224]	@ (80012f0 <MX_TIM1_Init+0x118>)
 800120e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 244;
 8001210:	4b36      	ldr	r3, [pc, #216]	@ (80012ec <MX_TIM1_Init+0x114>)
 8001212:	22f4      	movs	r2, #244	@ 0xf4
 8001214:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001216:	4b35      	ldr	r3, [pc, #212]	@ (80012ec <MX_TIM1_Init+0x114>)
 8001218:	2200      	movs	r2, #0
 800121a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800121c:	4b33      	ldr	r3, [pc, #204]	@ (80012ec <MX_TIM1_Init+0x114>)
 800121e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001222:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001224:	4b31      	ldr	r3, [pc, #196]	@ (80012ec <MX_TIM1_Init+0x114>)
 8001226:	2200      	movs	r2, #0
 8001228:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800122a:	4b30      	ldr	r3, [pc, #192]	@ (80012ec <MX_TIM1_Init+0x114>)
 800122c:	2200      	movs	r2, #0
 800122e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001230:	4b2e      	ldr	r3, [pc, #184]	@ (80012ec <MX_TIM1_Init+0x114>)
 8001232:	2200      	movs	r2, #0
 8001234:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001236:	482d      	ldr	r0, [pc, #180]	@ (80012ec <MX_TIM1_Init+0x114>)
 8001238:	f003 fe58 	bl	8004eec <HAL_TIM_PWM_Init>
 800123c:	4603      	mov	r3, r0
 800123e:	2b00      	cmp	r3, #0
 8001240:	d001      	beq.n	8001246 <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8001242:	f000 fa4b 	bl	80016dc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001246:	2300      	movs	r3, #0
 8001248:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800124a:	2300      	movs	r3, #0
 800124c:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800124e:	2300      	movs	r3, #0
 8001250:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001252:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001256:	4619      	mov	r1, r3
 8001258:	4824      	ldr	r0, [pc, #144]	@ (80012ec <MX_TIM1_Init+0x114>)
 800125a:	f004 fb3b 	bl	80058d4 <HAL_TIMEx_MasterConfigSynchronization>
 800125e:	4603      	mov	r3, r0
 8001260:	2b00      	cmp	r3, #0
 8001262:	d001      	beq.n	8001268 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8001264:	f000 fa3a 	bl	80016dc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001268:	2360      	movs	r3, #96	@ 0x60
 800126a:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 800126c:	2300      	movs	r3, #0
 800126e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001270:	2300      	movs	r3, #0
 8001272:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001274:	2300      	movs	r3, #0
 8001276:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001278:	2300      	movs	r3, #0
 800127a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800127c:	2300      	movs	r3, #0
 800127e:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001280:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001284:	220c      	movs	r2, #12
 8001286:	4619      	mov	r1, r3
 8001288:	4818      	ldr	r0, [pc, #96]	@ (80012ec <MX_TIM1_Init+0x114>)
 800128a:	f003 fe87 	bl	8004f9c <HAL_TIM_PWM_ConfigChannel>
 800128e:	4603      	mov	r3, r0
 8001290:	2b00      	cmp	r3, #0
 8001292:	d001      	beq.n	8001298 <MX_TIM1_Init+0xc0>
  {
    Error_Handler();
 8001294:	f000 fa22 	bl	80016dc <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001298:	2300      	movs	r3, #0
 800129a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800129c:	2300      	movs	r3, #0
 800129e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80012a0:	2300      	movs	r3, #0
 80012a2:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80012a4:	2300      	movs	r3, #0
 80012a6:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80012a8:	2300      	movs	r3, #0
 80012aa:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80012ac:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80012b0:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80012b2:	2300      	movs	r3, #0
 80012b4:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80012b6:	2300      	movs	r3, #0
 80012b8:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80012ba:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80012be:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 80012c0:	2300      	movs	r3, #0
 80012c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80012c4:	2300      	movs	r3, #0
 80012c6:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80012c8:	1d3b      	adds	r3, r7, #4
 80012ca:	4619      	mov	r1, r3
 80012cc:	4807      	ldr	r0, [pc, #28]	@ (80012ec <MX_TIM1_Init+0x114>)
 80012ce:	f004 fb9d 	bl	8005a0c <HAL_TIMEx_ConfigBreakDeadTime>
 80012d2:	4603      	mov	r3, r0
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d001      	beq.n	80012dc <MX_TIM1_Init+0x104>
  {
    Error_Handler();
 80012d8:	f000 fa00 	bl	80016dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80012dc:	4803      	ldr	r0, [pc, #12]	@ (80012ec <MX_TIM1_Init+0x114>)
 80012de:	f000 fa6d 	bl	80017bc <HAL_TIM_MspPostInit>

}
 80012e2:	bf00      	nop
 80012e4:	3760      	adds	r7, #96	@ 0x60
 80012e6:	46bd      	mov	sp, r7
 80012e8:	bd80      	pop	{r7, pc}
 80012ea:	bf00      	nop
 80012ec:	2400002c 	.word	0x2400002c
 80012f0:	40010000 	.word	0x40010000

080012f4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80012f8:	4b22      	ldr	r3, [pc, #136]	@ (8001384 <MX_USART1_UART_Init+0x90>)
 80012fa:	4a23      	ldr	r2, [pc, #140]	@ (8001388 <MX_USART1_UART_Init+0x94>)
 80012fc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80012fe:	4b21      	ldr	r3, [pc, #132]	@ (8001384 <MX_USART1_UART_Init+0x90>)
 8001300:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001304:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001306:	4b1f      	ldr	r3, [pc, #124]	@ (8001384 <MX_USART1_UART_Init+0x90>)
 8001308:	2200      	movs	r2, #0
 800130a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800130c:	4b1d      	ldr	r3, [pc, #116]	@ (8001384 <MX_USART1_UART_Init+0x90>)
 800130e:	2200      	movs	r2, #0
 8001310:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001312:	4b1c      	ldr	r3, [pc, #112]	@ (8001384 <MX_USART1_UART_Init+0x90>)
 8001314:	2200      	movs	r2, #0
 8001316:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001318:	4b1a      	ldr	r3, [pc, #104]	@ (8001384 <MX_USART1_UART_Init+0x90>)
 800131a:	220c      	movs	r2, #12
 800131c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800131e:	4b19      	ldr	r3, [pc, #100]	@ (8001384 <MX_USART1_UART_Init+0x90>)
 8001320:	2200      	movs	r2, #0
 8001322:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001324:	4b17      	ldr	r3, [pc, #92]	@ (8001384 <MX_USART1_UART_Init+0x90>)
 8001326:	2200      	movs	r2, #0
 8001328:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800132a:	4b16      	ldr	r3, [pc, #88]	@ (8001384 <MX_USART1_UART_Init+0x90>)
 800132c:	2200      	movs	r2, #0
 800132e:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001330:	4b14      	ldr	r3, [pc, #80]	@ (8001384 <MX_USART1_UART_Init+0x90>)
 8001332:	2200      	movs	r2, #0
 8001334:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001336:	4b13      	ldr	r3, [pc, #76]	@ (8001384 <MX_USART1_UART_Init+0x90>)
 8001338:	2200      	movs	r2, #0
 800133a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800133c:	4811      	ldr	r0, [pc, #68]	@ (8001384 <MX_USART1_UART_Init+0x90>)
 800133e:	f004 fbf1 	bl	8005b24 <HAL_UART_Init>
 8001342:	4603      	mov	r3, r0
 8001344:	2b00      	cmp	r3, #0
 8001346:	d001      	beq.n	800134c <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001348:	f000 f9c8 	bl	80016dc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800134c:	2100      	movs	r1, #0
 800134e:	480d      	ldr	r0, [pc, #52]	@ (8001384 <MX_USART1_UART_Init+0x90>)
 8001350:	f005 fcfd 	bl	8006d4e <HAL_UARTEx_SetTxFifoThreshold>
 8001354:	4603      	mov	r3, r0
 8001356:	2b00      	cmp	r3, #0
 8001358:	d001      	beq.n	800135e <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 800135a:	f000 f9bf 	bl	80016dc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800135e:	2100      	movs	r1, #0
 8001360:	4808      	ldr	r0, [pc, #32]	@ (8001384 <MX_USART1_UART_Init+0x90>)
 8001362:	f005 fd32 	bl	8006dca <HAL_UARTEx_SetRxFifoThreshold>
 8001366:	4603      	mov	r3, r0
 8001368:	2b00      	cmp	r3, #0
 800136a:	d001      	beq.n	8001370 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 800136c:	f000 f9b6 	bl	80016dc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001370:	4804      	ldr	r0, [pc, #16]	@ (8001384 <MX_USART1_UART_Init+0x90>)
 8001372:	f005 fcb3 	bl	8006cdc <HAL_UARTEx_DisableFifoMode>
 8001376:	4603      	mov	r3, r0
 8001378:	2b00      	cmp	r3, #0
 800137a:	d001      	beq.n	8001380 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 800137c:	f000 f9ae 	bl	80016dc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001380:	bf00      	nop
 8001382:	bd80      	pop	{r7, pc}
 8001384:	24000078 	.word	0x24000078
 8001388:	40011000 	.word	0x40011000

0800138c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800138c:	b580      	push	{r7, lr}
 800138e:	b08e      	sub	sp, #56	@ 0x38
 8001390:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001392:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001396:	2200      	movs	r2, #0
 8001398:	601a      	str	r2, [r3, #0]
 800139a:	605a      	str	r2, [r3, #4]
 800139c:	609a      	str	r2, [r3, #8]
 800139e:	60da      	str	r2, [r3, #12]
 80013a0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80013a2:	4bc1      	ldr	r3, [pc, #772]	@ (80016a8 <MX_GPIO_Init+0x31c>)
 80013a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80013a8:	4abf      	ldr	r2, [pc, #764]	@ (80016a8 <MX_GPIO_Init+0x31c>)
 80013aa:	f043 0302 	orr.w	r3, r3, #2
 80013ae:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80013b2:	4bbd      	ldr	r3, [pc, #756]	@ (80016a8 <MX_GPIO_Init+0x31c>)
 80013b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80013b8:	f003 0302 	and.w	r3, r3, #2
 80013bc:	623b      	str	r3, [r7, #32]
 80013be:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80013c0:	4bb9      	ldr	r3, [pc, #740]	@ (80016a8 <MX_GPIO_Init+0x31c>)
 80013c2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80013c6:	4ab8      	ldr	r2, [pc, #736]	@ (80016a8 <MX_GPIO_Init+0x31c>)
 80013c8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80013cc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80013d0:	4bb5      	ldr	r3, [pc, #724]	@ (80016a8 <MX_GPIO_Init+0x31c>)
 80013d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80013d6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80013da:	61fb      	str	r3, [r7, #28]
 80013dc:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80013de:	4bb2      	ldr	r3, [pc, #712]	@ (80016a8 <MX_GPIO_Init+0x31c>)
 80013e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80013e4:	4ab0      	ldr	r2, [pc, #704]	@ (80016a8 <MX_GPIO_Init+0x31c>)
 80013e6:	f043 0308 	orr.w	r3, r3, #8
 80013ea:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80013ee:	4bae      	ldr	r3, [pc, #696]	@ (80016a8 <MX_GPIO_Init+0x31c>)
 80013f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80013f4:	f003 0308 	and.w	r3, r3, #8
 80013f8:	61bb      	str	r3, [r7, #24]
 80013fa:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80013fc:	4baa      	ldr	r3, [pc, #680]	@ (80016a8 <MX_GPIO_Init+0x31c>)
 80013fe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001402:	4aa9      	ldr	r2, [pc, #676]	@ (80016a8 <MX_GPIO_Init+0x31c>)
 8001404:	f043 0301 	orr.w	r3, r3, #1
 8001408:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800140c:	4ba6      	ldr	r3, [pc, #664]	@ (80016a8 <MX_GPIO_Init+0x31c>)
 800140e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001412:	f003 0301 	and.w	r3, r3, #1
 8001416:	617b      	str	r3, [r7, #20]
 8001418:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800141a:	4ba3      	ldr	r3, [pc, #652]	@ (80016a8 <MX_GPIO_Init+0x31c>)
 800141c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001420:	4aa1      	ldr	r2, [pc, #644]	@ (80016a8 <MX_GPIO_Init+0x31c>)
 8001422:	f043 0310 	orr.w	r3, r3, #16
 8001426:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800142a:	4b9f      	ldr	r3, [pc, #636]	@ (80016a8 <MX_GPIO_Init+0x31c>)
 800142c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001430:	f003 0310 	and.w	r3, r3, #16
 8001434:	613b      	str	r3, [r7, #16]
 8001436:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001438:	4b9b      	ldr	r3, [pc, #620]	@ (80016a8 <MX_GPIO_Init+0x31c>)
 800143a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800143e:	4a9a      	ldr	r2, [pc, #616]	@ (80016a8 <MX_GPIO_Init+0x31c>)
 8001440:	f043 0304 	orr.w	r3, r3, #4
 8001444:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001448:	4b97      	ldr	r3, [pc, #604]	@ (80016a8 <MX_GPIO_Init+0x31c>)
 800144a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800144e:	f003 0304 	and.w	r3, r3, #4
 8001452:	60fb      	str	r3, [r7, #12]
 8001454:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001456:	4b94      	ldr	r3, [pc, #592]	@ (80016a8 <MX_GPIO_Init+0x31c>)
 8001458:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800145c:	4a92      	ldr	r2, [pc, #584]	@ (80016a8 <MX_GPIO_Init+0x31c>)
 800145e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001462:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001466:	4b90      	ldr	r3, [pc, #576]	@ (80016a8 <MX_GPIO_Init+0x31c>)
 8001468:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800146c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001470:	60bb      	str	r3, [r7, #8]
 8001472:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001474:	4b8c      	ldr	r3, [pc, #560]	@ (80016a8 <MX_GPIO_Init+0x31c>)
 8001476:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800147a:	4a8b      	ldr	r2, [pc, #556]	@ (80016a8 <MX_GPIO_Init+0x31c>)
 800147c:	f043 0320 	orr.w	r3, r3, #32
 8001480:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001484:	4b88      	ldr	r3, [pc, #544]	@ (80016a8 <MX_GPIO_Init+0x31c>)
 8001486:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800148a:	f003 0320 	and.w	r3, r3, #32
 800148e:	607b      	str	r3, [r7, #4]
 8001490:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, Detectn_Pin|LCD_DISP_Pin, GPIO_PIN_RESET);
 8001492:	2200      	movs	r2, #0
 8001494:	f240 4102 	movw	r1, #1026	@ 0x402
 8001498:	4884      	ldr	r0, [pc, #528]	@ (80016ac <MX_GPIO_Init+0x320>)
 800149a:	f000 ff0d 	bl	80022b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, ARD_D8_Pin|STMOD_17_Pin|STMOD_19_Pin|STMOD_18_Pin, GPIO_PIN_RESET);
 800149e:	2200      	movs	r2, #0
 80014a0:	f44f 61d1 	mov.w	r1, #1672	@ 0x688
 80014a4:	4882      	ldr	r0, [pc, #520]	@ (80016b0 <MX_GPIO_Init+0x324>)
 80014a6:	f000 ff07 	bl	80022b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LCD_BL_CTRL_Pin|ARD_D7_Pin|MEMS_LED_Pin|ARD_D4_Pin
 80014aa:	2200      	movs	r2, #0
 80014ac:	f248 1138 	movw	r1, #33080	@ 0x8138
 80014b0:	4880      	ldr	r0, [pc, #512]	@ (80016b4 <MX_GPIO_Init+0x328>)
 80014b2:	f000 ff01 	bl	80022b8 <HAL_GPIO_WritePin>
                          |ARD_D2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, USER_LED2_Pin|USER_LED1_Pin, GPIO_PIN_RESET);
 80014b6:	2200      	movs	r2, #0
 80014b8:	210c      	movs	r1, #12
 80014ba:	487f      	ldr	r0, [pc, #508]	@ (80016b8 <MX_GPIO_Init+0x32c>)
 80014bc:	f000 fefc 	bl	80022b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(STMOD_20_GPIO_Port, STMOD_20_Pin, GPIO_PIN_RESET);
 80014c0:	2200      	movs	r2, #0
 80014c2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80014c6:	487d      	ldr	r0, [pc, #500]	@ (80016bc <MX_GPIO_Init+0x330>)
 80014c8:	f000 fef6 	bl	80022b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, LCD_RST_Pin|USB_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 80014cc:	2200      	movs	r2, #0
 80014ce:	2160      	movs	r1, #96	@ 0x60
 80014d0:	487b      	ldr	r0, [pc, #492]	@ (80016c0 <MX_GPIO_Init+0x334>)
 80014d2:	f000 fef1 	bl	80022b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : Detectn_Pin LCD_DISP_Pin */
  GPIO_InitStruct.Pin = Detectn_Pin|LCD_DISP_Pin;
 80014d6:	f240 4302 	movw	r3, #1026	@ 0x402
 80014da:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014dc:	2301      	movs	r3, #1
 80014de:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014e0:	2300      	movs	r3, #0
 80014e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014e4:	2300      	movs	r3, #0
 80014e6:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80014e8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80014ec:	4619      	mov	r1, r3
 80014ee:	486f      	ldr	r0, [pc, #444]	@ (80016ac <MX_GPIO_Init+0x320>)
 80014f0:	f000 fd3a 	bl	8001f68 <HAL_GPIO_Init>

  /*Configure GPIO pins : SAI4_D2_Pin SAI4_CK2_Pin */
  GPIO_InitStruct.Pin = SAI4_D2_Pin|SAI4_CK2_Pin;
 80014f4:	2330      	movs	r3, #48	@ 0x30
 80014f6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014f8:	2302      	movs	r3, #2
 80014fa:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014fc:	2300      	movs	r3, #0
 80014fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001500:	2300      	movs	r3, #0
 8001502:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI4;
 8001504:	230a      	movs	r3, #10
 8001506:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001508:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800150c:	4619      	mov	r1, r3
 800150e:	4868      	ldr	r0, [pc, #416]	@ (80016b0 <MX_GPIO_Init+0x324>)
 8001510:	f000 fd2a 	bl	8001f68 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D8_Pin STMOD_17_Pin STMOD_19_Pin STMOD_18_Pin */
  GPIO_InitStruct.Pin = ARD_D8_Pin|STMOD_17_Pin|STMOD_19_Pin|STMOD_18_Pin;
 8001514:	f44f 63d1 	mov.w	r3, #1672	@ 0x688
 8001518:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800151a:	2301      	movs	r3, #1
 800151c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800151e:	2300      	movs	r3, #0
 8001520:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001522:	2300      	movs	r3, #0
 8001524:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001526:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800152a:	4619      	mov	r1, r3
 800152c:	4860      	ldr	r0, [pc, #384]	@ (80016b0 <MX_GPIO_Init+0x324>)
 800152e:	f000 fd1b 	bl	8001f68 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_FS_OVCR_Pin CTP_INT_Pin */
  GPIO_InitStruct.Pin = USB_FS_OVCR_Pin|CTP_INT_Pin;
 8001532:	f242 0304 	movw	r3, #8196	@ 0x2004
 8001536:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001538:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800153c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800153e:	2300      	movs	r3, #0
 8001540:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001542:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001546:	4619      	mov	r1, r3
 8001548:	485a      	ldr	r0, [pc, #360]	@ (80016b4 <MX_GPIO_Init+0x328>)
 800154a:	f000 fd0d 	bl	8001f68 <HAL_GPIO_Init>

  /*Configure GPIO pin : Blue_button_B2_used_for_wakeup_Pin */
  GPIO_InitStruct.Pin = Blue_button_B2_used_for_wakeup_Pin;
 800154e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001552:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001554:	2300      	movs	r3, #0
 8001556:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001558:	2300      	movs	r3, #0
 800155a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(Blue_button_B2_used_for_wakeup_GPIO_Port, &GPIO_InitStruct);
 800155c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001560:	4619      	mov	r1, r3
 8001562:	4855      	ldr	r0, [pc, #340]	@ (80016b8 <MX_GPIO_Init+0x32c>)
 8001564:	f000 fd00 	bl	8001f68 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_ID_Pin */
  GPIO_InitStruct.Pin = USB_FS_ID_Pin;
 8001568:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800156c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800156e:	2302      	movs	r3, #2
 8001570:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001572:	2300      	movs	r3, #0
 8001574:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001576:	2300      	movs	r3, #0
 8001578:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_HS;
 800157a:	230a      	movs	r3, #10
 800157c:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(USB_FS_ID_GPIO_Port, &GPIO_InitStruct);
 800157e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001582:	4619      	mov	r1, r3
 8001584:	484f      	ldr	r0, [pc, #316]	@ (80016c4 <MX_GPIO_Init+0x338>)
 8001586:	f000 fcef 	bl	8001f68 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_BL_CTRL_Pin ARD_D7_Pin MEMS_LED_Pin ARD_D4_Pin
                           ARD_D2_Pin */
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin|ARD_D7_Pin|MEMS_LED_Pin|ARD_D4_Pin
 800158a:	f248 1338 	movw	r3, #33080	@ 0x8138
 800158e:	627b      	str	r3, [r7, #36]	@ 0x24
                          |ARD_D2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001590:	2301      	movs	r3, #1
 8001592:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001594:	2300      	movs	r3, #0
 8001596:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001598:	2300      	movs	r3, #0
 800159a:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800159c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80015a0:	4619      	mov	r1, r3
 80015a2:	4844      	ldr	r0, [pc, #272]	@ (80016b4 <MX_GPIO_Init+0x328>)
 80015a4:	f000 fce0 	bl	8001f68 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_FS_VBUS_Pin;
 80015a8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80015ac:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80015ae:	2300      	movs	r3, #0
 80015b0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015b2:	2300      	movs	r3, #0
 80015b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(USB_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 80015b6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80015ba:	4619      	mov	r1, r3
 80015bc:	4841      	ldr	r0, [pc, #260]	@ (80016c4 <MX_GPIO_Init+0x338>)
 80015be:	f000 fcd3 	bl	8001f68 <HAL_GPIO_Init>

  /*Configure GPIO pin : uSD_Detect_Pin */
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 80015c2:	2320      	movs	r3, #32
 80015c4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80015c6:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80015ca:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015cc:	2300      	movs	r3, #0
 80015ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 80015d0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80015d4:	4619      	mov	r1, r3
 80015d6:	4839      	ldr	r0, [pc, #228]	@ (80016bc <MX_GPIO_Init+0x330>)
 80015d8:	f000 fcc6 	bl	8001f68 <HAL_GPIO_Init>

  /*Configure GPIO pins : USER_LED2_Pin USER_LED1_Pin */
  GPIO_InitStruct.Pin = USER_LED2_Pin|USER_LED1_Pin;
 80015dc:	230c      	movs	r3, #12
 80015de:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015e0:	2301      	movs	r3, #1
 80015e2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015e4:	2300      	movs	r3, #0
 80015e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015e8:	2300      	movs	r3, #0
 80015ea:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015ec:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80015f0:	4619      	mov	r1, r3
 80015f2:	4831      	ldr	r0, [pc, #196]	@ (80016b8 <MX_GPIO_Init+0x32c>)
 80015f4:	f000 fcb8 	bl	8001f68 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI5_MISO_Pin */
  GPIO_InitStruct.Pin = SPI5_MISO_Pin;
 80015f8:	2380      	movs	r3, #128	@ 0x80
 80015fa:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015fc:	2302      	movs	r3, #2
 80015fe:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001600:	2300      	movs	r3, #0
 8001602:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001604:	2300      	movs	r3, #0
 8001606:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8001608:	2305      	movs	r3, #5
 800160a:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(SPI5_MISO_GPIO_Port, &GPIO_InitStruct);
 800160c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001610:	4619      	mov	r1, r3
 8001612:	482b      	ldr	r0, [pc, #172]	@ (80016c0 <MX_GPIO_Init+0x334>)
 8001614:	f000 fca8 	bl	8001f68 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI5_MOSI_Pin */
  GPIO_InitStruct.Pin = SPI5_MOSI_Pin;
 8001618:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800161c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800161e:	2302      	movs	r3, #2
 8001620:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001622:	2300      	movs	r3, #0
 8001624:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001626:	2300      	movs	r3, #0
 8001628:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 800162a:	2305      	movs	r3, #5
 800162c:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(SPI5_MOSI_GPIO_Port, &GPIO_InitStruct);
 800162e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001632:	4619      	mov	r1, r3
 8001634:	4821      	ldr	r0, [pc, #132]	@ (80016bc <MX_GPIO_Init+0x330>)
 8001636:	f000 fc97 	bl	8001f68 <HAL_GPIO_Init>

  /*Configure GPIO pin : Audio_Int_Pin */
  GPIO_InitStruct.Pin = Audio_Int_Pin;
 800163a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800163e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001640:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001644:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001646:	2300      	movs	r3, #0
 8001648:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(Audio_Int_GPIO_Port, &GPIO_InitStruct);
 800164a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800164e:	4619      	mov	r1, r3
 8001650:	4817      	ldr	r0, [pc, #92]	@ (80016b0 <MX_GPIO_Init+0x324>)
 8001652:	f000 fc89 	bl	8001f68 <HAL_GPIO_Init>

  /*Configure GPIO pin : STMOD_20_Pin */
  GPIO_InitStruct.Pin = STMOD_20_Pin;
 8001656:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800165a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800165c:	2301      	movs	r3, #1
 800165e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001660:	2300      	movs	r3, #0
 8001662:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001664:	2300      	movs	r3, #0
 8001666:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(STMOD_20_GPIO_Port, &GPIO_InitStruct);
 8001668:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800166c:	4619      	mov	r1, r3
 800166e:	4813      	ldr	r0, [pc, #76]	@ (80016bc <MX_GPIO_Init+0x330>)
 8001670:	f000 fc7a 	bl	8001f68 <HAL_GPIO_Init>

  /*Configure GPIO pin : STMOD_11_INT_Pin */
  GPIO_InitStruct.Pin = STMOD_11_INT_Pin;
 8001674:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001678:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800167a:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800167e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001680:	2300      	movs	r3, #0
 8001682:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(STMOD_11_INT_GPIO_Port, &GPIO_InitStruct);
 8001684:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001688:	4619      	mov	r1, r3
 800168a:	480d      	ldr	r0, [pc, #52]	@ (80016c0 <MX_GPIO_Init+0x334>)
 800168c:	f000 fc6c 	bl	8001f68 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_RST_Pin USB_FS_PWR_EN_Pin */
  GPIO_InitStruct.Pin = LCD_RST_Pin|USB_FS_PWR_EN_Pin;
 8001690:	2360      	movs	r3, #96	@ 0x60
 8001692:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001694:	2301      	movs	r3, #1
 8001696:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001698:	2300      	movs	r3, #0
 800169a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800169c:	2300      	movs	r3, #0
 800169e:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80016a0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80016a4:	e010      	b.n	80016c8 <MX_GPIO_Init+0x33c>
 80016a6:	bf00      	nop
 80016a8:	58024400 	.word	0x58024400
 80016ac:	58020c00 	.word	0x58020c00
 80016b0:	58021000 	.word	0x58021000
 80016b4:	58021800 	.word	0x58021800
 80016b8:	58020800 	.word	0x58020800
 80016bc:	58021400 	.word	0x58021400
 80016c0:	58021c00 	.word	0x58021c00
 80016c4:	58020000 	.word	0x58020000
 80016c8:	4619      	mov	r1, r3
 80016ca:	4803      	ldr	r0, [pc, #12]	@ (80016d8 <MX_GPIO_Init+0x34c>)
 80016cc:	f000 fc4c 	bl	8001f68 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80016d0:	bf00      	nop
 80016d2:	3738      	adds	r7, #56	@ 0x38
 80016d4:	46bd      	mov	sp, r7
 80016d6:	bd80      	pop	{r7, pc}
 80016d8:	58021c00 	.word	0x58021c00

080016dc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80016dc:	b480      	push	{r7}
 80016de:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80016e0:	b672      	cpsid	i
}
 80016e2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80016e4:	bf00      	nop
 80016e6:	e7fd      	b.n	80016e4 <Error_Handler+0x8>

080016e8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80016e8:	b480      	push	{r7}
 80016ea:	b083      	sub	sp, #12
 80016ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016ee:	4b0a      	ldr	r3, [pc, #40]	@ (8001718 <HAL_MspInit+0x30>)
 80016f0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80016f4:	4a08      	ldr	r2, [pc, #32]	@ (8001718 <HAL_MspInit+0x30>)
 80016f6:	f043 0302 	orr.w	r3, r3, #2
 80016fa:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80016fe:	4b06      	ldr	r3, [pc, #24]	@ (8001718 <HAL_MspInit+0x30>)
 8001700:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001704:	f003 0302 	and.w	r3, r3, #2
 8001708:	607b      	str	r3, [r7, #4]
 800170a:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800170c:	bf00      	nop
 800170e:	370c      	adds	r7, #12
 8001710:	46bd      	mov	sp, r7
 8001712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001716:	4770      	bx	lr
 8001718:	58024400 	.word	0x58024400

0800171c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 800171c:	b480      	push	{r7}
 800171e:	b087      	sub	sp, #28
 8001720:	af00      	add	r7, sp, #0
 8001722:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	4a20      	ldr	r2, [pc, #128]	@ (80017ac <HAL_TIM_PWM_MspInit+0x90>)
 800172a:	4293      	cmp	r3, r2
 800172c:	d10f      	bne.n	800174e <HAL_TIM_PWM_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800172e:	4b20      	ldr	r3, [pc, #128]	@ (80017b0 <HAL_TIM_PWM_MspInit+0x94>)
 8001730:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001734:	4a1e      	ldr	r2, [pc, #120]	@ (80017b0 <HAL_TIM_PWM_MspInit+0x94>)
 8001736:	f043 0301 	orr.w	r3, r3, #1
 800173a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800173e:	4b1c      	ldr	r3, [pc, #112]	@ (80017b0 <HAL_TIM_PWM_MspInit+0x94>)
 8001740:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001744:	f003 0301 	and.w	r3, r3, #1
 8001748:	617b      	str	r3, [r7, #20]
 800174a:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 800174c:	e028      	b.n	80017a0 <HAL_TIM_PWM_MspInit+0x84>
  else if(htim_pwm->Instance==TIM4)
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	4a18      	ldr	r2, [pc, #96]	@ (80017b4 <HAL_TIM_PWM_MspInit+0x98>)
 8001754:	4293      	cmp	r3, r2
 8001756:	d10f      	bne.n	8001778 <HAL_TIM_PWM_MspInit+0x5c>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001758:	4b15      	ldr	r3, [pc, #84]	@ (80017b0 <HAL_TIM_PWM_MspInit+0x94>)
 800175a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800175e:	4a14      	ldr	r2, [pc, #80]	@ (80017b0 <HAL_TIM_PWM_MspInit+0x94>)
 8001760:	f043 0304 	orr.w	r3, r3, #4
 8001764:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001768:	4b11      	ldr	r3, [pc, #68]	@ (80017b0 <HAL_TIM_PWM_MspInit+0x94>)
 800176a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800176e:	f003 0304 	and.w	r3, r3, #4
 8001772:	613b      	str	r3, [r7, #16]
 8001774:	693b      	ldr	r3, [r7, #16]
}
 8001776:	e013      	b.n	80017a0 <HAL_TIM_PWM_MspInit+0x84>
  else if(htim_pwm->Instance==TIM5)
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	4a0e      	ldr	r2, [pc, #56]	@ (80017b8 <HAL_TIM_PWM_MspInit+0x9c>)
 800177e:	4293      	cmp	r3, r2
 8001780:	d10e      	bne.n	80017a0 <HAL_TIM_PWM_MspInit+0x84>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001782:	4b0b      	ldr	r3, [pc, #44]	@ (80017b0 <HAL_TIM_PWM_MspInit+0x94>)
 8001784:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001788:	4a09      	ldr	r2, [pc, #36]	@ (80017b0 <HAL_TIM_PWM_MspInit+0x94>)
 800178a:	f043 0308 	orr.w	r3, r3, #8
 800178e:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001792:	4b07      	ldr	r3, [pc, #28]	@ (80017b0 <HAL_TIM_PWM_MspInit+0x94>)
 8001794:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001798:	f003 0308 	and.w	r3, r3, #8
 800179c:	60fb      	str	r3, [r7, #12]
 800179e:	68fb      	ldr	r3, [r7, #12]
}
 80017a0:	bf00      	nop
 80017a2:	371c      	adds	r7, #28
 80017a4:	46bd      	mov	sp, r7
 80017a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017aa:	4770      	bx	lr
 80017ac:	40010000 	.word	0x40010000
 80017b0:	58024400 	.word	0x58024400
 80017b4:	40000800 	.word	0x40000800
 80017b8:	40000c00 	.word	0x40000c00

080017bc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	b08c      	sub	sp, #48	@ 0x30
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017c4:	f107 031c 	add.w	r3, r7, #28
 80017c8:	2200      	movs	r2, #0
 80017ca:	601a      	str	r2, [r3, #0]
 80017cc:	605a      	str	r2, [r3, #4]
 80017ce:	609a      	str	r2, [r3, #8]
 80017d0:	60da      	str	r2, [r3, #12]
 80017d2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	4a48      	ldr	r2, [pc, #288]	@ (80018fc <HAL_TIM_MspPostInit+0x140>)
 80017da:	4293      	cmp	r3, r2
 80017dc:	d120      	bne.n	8001820 <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80017de:	4b48      	ldr	r3, [pc, #288]	@ (8001900 <HAL_TIM_MspPostInit+0x144>)
 80017e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80017e4:	4a46      	ldr	r2, [pc, #280]	@ (8001900 <HAL_TIM_MspPostInit+0x144>)
 80017e6:	f043 0310 	orr.w	r3, r3, #16
 80017ea:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80017ee:	4b44      	ldr	r3, [pc, #272]	@ (8001900 <HAL_TIM_MspPostInit+0x144>)
 80017f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80017f4:	f003 0310 	and.w	r3, r3, #16
 80017f8:	61bb      	str	r3, [r7, #24]
 80017fa:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = ARD_D5_Pin;
 80017fc:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001800:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001802:	2302      	movs	r3, #2
 8001804:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001806:	2300      	movs	r3, #0
 8001808:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800180a:	2300      	movs	r3, #0
 800180c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800180e:	2301      	movs	r3, #1
 8001810:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(ARD_D5_GPIO_Port, &GPIO_InitStruct);
 8001812:	f107 031c 	add.w	r3, r7, #28
 8001816:	4619      	mov	r1, r3
 8001818:	483a      	ldr	r0, [pc, #232]	@ (8001904 <HAL_TIM_MspPostInit+0x148>)
 800181a:	f000 fba5 	bl	8001f68 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 800181e:	e068      	b.n	80018f2 <HAL_TIM_MspPostInit+0x136>
  else if(htim->Instance==TIM4)
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	4a38      	ldr	r2, [pc, #224]	@ (8001908 <HAL_TIM_MspPostInit+0x14c>)
 8001826:	4293      	cmp	r3, r2
 8001828:	d13f      	bne.n	80018aa <HAL_TIM_MspPostInit+0xee>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800182a:	4b35      	ldr	r3, [pc, #212]	@ (8001900 <HAL_TIM_MspPostInit+0x144>)
 800182c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001830:	4a33      	ldr	r2, [pc, #204]	@ (8001900 <HAL_TIM_MspPostInit+0x144>)
 8001832:	f043 0302 	orr.w	r3, r3, #2
 8001836:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800183a:	4b31      	ldr	r3, [pc, #196]	@ (8001900 <HAL_TIM_MspPostInit+0x144>)
 800183c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001840:	f003 0302 	and.w	r3, r3, #2
 8001844:	617b      	str	r3, [r7, #20]
 8001846:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001848:	4b2d      	ldr	r3, [pc, #180]	@ (8001900 <HAL_TIM_MspPostInit+0x144>)
 800184a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800184e:	4a2c      	ldr	r2, [pc, #176]	@ (8001900 <HAL_TIM_MspPostInit+0x144>)
 8001850:	f043 0308 	orr.w	r3, r3, #8
 8001854:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001858:	4b29      	ldr	r3, [pc, #164]	@ (8001900 <HAL_TIM_MspPostInit+0x144>)
 800185a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800185e:	f003 0308 	and.w	r3, r3, #8
 8001862:	613b      	str	r3, [r7, #16]
 8001864:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = ARD_D9_Pin;
 8001866:	2380      	movs	r3, #128	@ 0x80
 8001868:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800186a:	2302      	movs	r3, #2
 800186c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800186e:	2300      	movs	r3, #0
 8001870:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001872:	2300      	movs	r3, #0
 8001874:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001876:	2302      	movs	r3, #2
 8001878:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(ARD_D9_GPIO_Port, &GPIO_InitStruct);
 800187a:	f107 031c 	add.w	r3, r7, #28
 800187e:	4619      	mov	r1, r3
 8001880:	4822      	ldr	r0, [pc, #136]	@ (800190c <HAL_TIM_MspPostInit+0x150>)
 8001882:	f000 fb71 	bl	8001f68 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = STMOD_14_PWM_Pin|ARD_D6_Pin;
 8001886:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 800188a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800188c:	2302      	movs	r3, #2
 800188e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001890:	2300      	movs	r3, #0
 8001892:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001894:	2300      	movs	r3, #0
 8001896:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001898:	2302      	movs	r3, #2
 800189a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800189c:	f107 031c 	add.w	r3, r7, #28
 80018a0:	4619      	mov	r1, r3
 80018a2:	481b      	ldr	r0, [pc, #108]	@ (8001910 <HAL_TIM_MspPostInit+0x154>)
 80018a4:	f000 fb60 	bl	8001f68 <HAL_GPIO_Init>
}
 80018a8:	e023      	b.n	80018f2 <HAL_TIM_MspPostInit+0x136>
  else if(htim->Instance==TIM5)
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	4a19      	ldr	r2, [pc, #100]	@ (8001914 <HAL_TIM_MspPostInit+0x158>)
 80018b0:	4293      	cmp	r3, r2
 80018b2:	d11e      	bne.n	80018f2 <HAL_TIM_MspPostInit+0x136>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018b4:	4b12      	ldr	r3, [pc, #72]	@ (8001900 <HAL_TIM_MspPostInit+0x144>)
 80018b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80018ba:	4a11      	ldr	r2, [pc, #68]	@ (8001900 <HAL_TIM_MspPostInit+0x144>)
 80018bc:	f043 0301 	orr.w	r3, r3, #1
 80018c0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80018c4:	4b0e      	ldr	r3, [pc, #56]	@ (8001900 <HAL_TIM_MspPostInit+0x144>)
 80018c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80018ca:	f003 0301 	and.w	r3, r3, #1
 80018ce:	60fb      	str	r3, [r7, #12]
 80018d0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ARD_D3_Pin;
 80018d2:	2301      	movs	r3, #1
 80018d4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018d6:	2302      	movs	r3, #2
 80018d8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018da:	2300      	movs	r3, #0
 80018dc:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018de:	2300      	movs	r3, #0
 80018e0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 80018e2:	2302      	movs	r3, #2
 80018e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(ARD_D3_GPIO_Port, &GPIO_InitStruct);
 80018e6:	f107 031c 	add.w	r3, r7, #28
 80018ea:	4619      	mov	r1, r3
 80018ec:	480a      	ldr	r0, [pc, #40]	@ (8001918 <HAL_TIM_MspPostInit+0x15c>)
 80018ee:	f000 fb3b 	bl	8001f68 <HAL_GPIO_Init>
}
 80018f2:	bf00      	nop
 80018f4:	3730      	adds	r7, #48	@ 0x30
 80018f6:	46bd      	mov	sp, r7
 80018f8:	bd80      	pop	{r7, pc}
 80018fa:	bf00      	nop
 80018fc:	40010000 	.word	0x40010000
 8001900:	58024400 	.word	0x58024400
 8001904:	58021000 	.word	0x58021000
 8001908:	40000800 	.word	0x40000800
 800190c:	58020400 	.word	0x58020400
 8001910:	58020c00 	.word	0x58020c00
 8001914:	40000c00 	.word	0x40000c00
 8001918:	58020000 	.word	0x58020000

0800191c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	b0ba      	sub	sp, #232	@ 0xe8
 8001920:	af00      	add	r7, sp, #0
 8001922:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001924:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001928:	2200      	movs	r2, #0
 800192a:	601a      	str	r2, [r3, #0]
 800192c:	605a      	str	r2, [r3, #4]
 800192e:	609a      	str	r2, [r3, #8]
 8001930:	60da      	str	r2, [r3, #12]
 8001932:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001934:	f107 0318 	add.w	r3, r7, #24
 8001938:	22b8      	movs	r2, #184	@ 0xb8
 800193a:	2100      	movs	r1, #0
 800193c:	4618      	mov	r0, r3
 800193e:	f005 fad1 	bl	8006ee4 <memset>
  if(huart->Instance==USART1)
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	4a4d      	ldr	r2, [pc, #308]	@ (8001a7c <HAL_UART_MspInit+0x160>)
 8001948:	4293      	cmp	r3, r2
 800194a:	d147      	bne.n	80019dc <HAL_UART_MspInit+0xc0>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800194c:	f04f 0201 	mov.w	r2, #1
 8001950:	f04f 0300 	mov.w	r3, #0
 8001954:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16910CLKSOURCE_D2PCLK2;
 8001958:	2300      	movs	r3, #0
 800195a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800195e:	f107 0318 	add.w	r3, r7, #24
 8001962:	4618      	mov	r0, r3
 8001964:	f001 fc82 	bl	800326c <HAL_RCCEx_PeriphCLKConfig>
 8001968:	4603      	mov	r3, r0
 800196a:	2b00      	cmp	r3, #0
 800196c:	d001      	beq.n	8001972 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 800196e:	f7ff feb5 	bl	80016dc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001972:	4b43      	ldr	r3, [pc, #268]	@ (8001a80 <HAL_UART_MspInit+0x164>)
 8001974:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001978:	4a41      	ldr	r2, [pc, #260]	@ (8001a80 <HAL_UART_MspInit+0x164>)
 800197a:	f043 0310 	orr.w	r3, r3, #16
 800197e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001982:	4b3f      	ldr	r3, [pc, #252]	@ (8001a80 <HAL_UART_MspInit+0x164>)
 8001984:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001988:	f003 0310 	and.w	r3, r3, #16
 800198c:	617b      	str	r3, [r7, #20]
 800198e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001990:	4b3b      	ldr	r3, [pc, #236]	@ (8001a80 <HAL_UART_MspInit+0x164>)
 8001992:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001996:	4a3a      	ldr	r2, [pc, #232]	@ (8001a80 <HAL_UART_MspInit+0x164>)
 8001998:	f043 0302 	orr.w	r3, r3, #2
 800199c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80019a0:	4b37      	ldr	r3, [pc, #220]	@ (8001a80 <HAL_UART_MspInit+0x164>)
 80019a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80019a6:	f003 0302 	and.w	r3, r3, #2
 80019aa:	613b      	str	r3, [r7, #16]
 80019ac:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PB15     ------> USART1_RX
    PB14     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = ARD_D0_Pin|ARD_D1_Pin;
 80019ae:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 80019b2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019b6:	2302      	movs	r3, #2
 80019b8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019bc:	2300      	movs	r3, #0
 80019be:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019c2:	2300      	movs	r3, #0
 80019c4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 80019c8:	2304      	movs	r3, #4
 80019ca:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019ce:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80019d2:	4619      	mov	r1, r3
 80019d4:	482b      	ldr	r0, [pc, #172]	@ (8001a84 <HAL_UART_MspInit+0x168>)
 80019d6:	f000 fac7 	bl	8001f68 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80019da:	e04b      	b.n	8001a74 <HAL_UART_MspInit+0x158>
  else if(huart->Instance==USART3)
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	4a29      	ldr	r2, [pc, #164]	@ (8001a88 <HAL_UART_MspInit+0x16c>)
 80019e2:	4293      	cmp	r3, r2
 80019e4:	d146      	bne.n	8001a74 <HAL_UART_MspInit+0x158>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80019e6:	f04f 0202 	mov.w	r2, #2
 80019ea:	f04f 0300 	mov.w	r3, #0
 80019ee:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80019f2:	2300      	movs	r3, #0
 80019f4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80019f8:	f107 0318 	add.w	r3, r7, #24
 80019fc:	4618      	mov	r0, r3
 80019fe:	f001 fc35 	bl	800326c <HAL_RCCEx_PeriphCLKConfig>
 8001a02:	4603      	mov	r3, r0
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d001      	beq.n	8001a0c <HAL_UART_MspInit+0xf0>
      Error_Handler();
 8001a08:	f7ff fe68 	bl	80016dc <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001a0c:	4b1c      	ldr	r3, [pc, #112]	@ (8001a80 <HAL_UART_MspInit+0x164>)
 8001a0e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001a12:	4a1b      	ldr	r2, [pc, #108]	@ (8001a80 <HAL_UART_MspInit+0x164>)
 8001a14:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001a18:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001a1c:	4b18      	ldr	r3, [pc, #96]	@ (8001a80 <HAL_UART_MspInit+0x164>)
 8001a1e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001a22:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001a26:	60fb      	str	r3, [r7, #12]
 8001a28:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001a2a:	4b15      	ldr	r3, [pc, #84]	@ (8001a80 <HAL_UART_MspInit+0x164>)
 8001a2c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001a30:	4a13      	ldr	r2, [pc, #76]	@ (8001a80 <HAL_UART_MspInit+0x164>)
 8001a32:	f043 0308 	orr.w	r3, r3, #8
 8001a36:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001a3a:	4b11      	ldr	r3, [pc, #68]	@ (8001a80 <HAL_UART_MspInit+0x164>)
 8001a3c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001a40:	f003 0308 	and.w	r3, r3, #8
 8001a44:	60bb      	str	r3, [r7, #8]
 8001a46:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = T_VCP_RX_Pin|T_VCP_TX_Pin;
 8001a48:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001a4c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a50:	2302      	movs	r3, #2
 8001a52:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a56:	2300      	movs	r3, #0
 8001a58:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a5c:	2300      	movs	r3, #0
 8001a5e:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001a62:	2307      	movs	r3, #7
 8001a64:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001a68:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001a6c:	4619      	mov	r1, r3
 8001a6e:	4807      	ldr	r0, [pc, #28]	@ (8001a8c <HAL_UART_MspInit+0x170>)
 8001a70:	f000 fa7a 	bl	8001f68 <HAL_GPIO_Init>
}
 8001a74:	bf00      	nop
 8001a76:	37e8      	adds	r7, #232	@ 0xe8
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	bd80      	pop	{r7, pc}
 8001a7c:	40011000 	.word	0x40011000
 8001a80:	58024400 	.word	0x58024400
 8001a84:	58020400 	.word	0x58020400
 8001a88:	40004800 	.word	0x40004800
 8001a8c:	58020c00 	.word	0x58020c00

08001a90 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a90:	b480      	push	{r7}
 8001a92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001a94:	bf00      	nop
 8001a96:	e7fd      	b.n	8001a94 <NMI_Handler+0x4>

08001a98 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a98:	b480      	push	{r7}
 8001a9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a9c:	bf00      	nop
 8001a9e:	e7fd      	b.n	8001a9c <HardFault_Handler+0x4>

08001aa0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001aa0:	b480      	push	{r7}
 8001aa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001aa4:	bf00      	nop
 8001aa6:	e7fd      	b.n	8001aa4 <MemManage_Handler+0x4>

08001aa8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001aa8:	b480      	push	{r7}
 8001aaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001aac:	bf00      	nop
 8001aae:	e7fd      	b.n	8001aac <BusFault_Handler+0x4>

08001ab0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ab0:	b480      	push	{r7}
 8001ab2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ab4:	bf00      	nop
 8001ab6:	e7fd      	b.n	8001ab4 <UsageFault_Handler+0x4>

08001ab8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001ab8:	b480      	push	{r7}
 8001aba:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001abc:	bf00      	nop
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac4:	4770      	bx	lr

08001ac6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001ac6:	b480      	push	{r7}
 8001ac8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001aca:	bf00      	nop
 8001acc:	46bd      	mov	sp, r7
 8001ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad2:	4770      	bx	lr

08001ad4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001ad4:	b480      	push	{r7}
 8001ad6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001ad8:	bf00      	nop
 8001ada:	46bd      	mov	sp, r7
 8001adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae0:	4770      	bx	lr

08001ae2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001ae2:	b580      	push	{r7, lr}
 8001ae4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001ae6:	f000 f917 	bl	8001d18 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001aea:	bf00      	nop
 8001aec:	bd80      	pop	{r7, pc}
	...

08001af0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001af0:	b480      	push	{r7}
 8001af2:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001af4:	4b32      	ldr	r3, [pc, #200]	@ (8001bc0 <SystemInit+0xd0>)
 8001af6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001afa:	4a31      	ldr	r2, [pc, #196]	@ (8001bc0 <SystemInit+0xd0>)
 8001afc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001b00:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001b04:	4b2f      	ldr	r3, [pc, #188]	@ (8001bc4 <SystemInit+0xd4>)
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	f003 030f 	and.w	r3, r3, #15
 8001b0c:	2b06      	cmp	r3, #6
 8001b0e:	d807      	bhi.n	8001b20 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001b10:	4b2c      	ldr	r3, [pc, #176]	@ (8001bc4 <SystemInit+0xd4>)
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	f023 030f 	bic.w	r3, r3, #15
 8001b18:	4a2a      	ldr	r2, [pc, #168]	@ (8001bc4 <SystemInit+0xd4>)
 8001b1a:	f043 0307 	orr.w	r3, r3, #7
 8001b1e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001b20:	4b29      	ldr	r3, [pc, #164]	@ (8001bc8 <SystemInit+0xd8>)
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	4a28      	ldr	r2, [pc, #160]	@ (8001bc8 <SystemInit+0xd8>)
 8001b26:	f043 0301 	orr.w	r3, r3, #1
 8001b2a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001b2c:	4b26      	ldr	r3, [pc, #152]	@ (8001bc8 <SystemInit+0xd8>)
 8001b2e:	2200      	movs	r2, #0
 8001b30:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001b32:	4b25      	ldr	r3, [pc, #148]	@ (8001bc8 <SystemInit+0xd8>)
 8001b34:	681a      	ldr	r2, [r3, #0]
 8001b36:	4924      	ldr	r1, [pc, #144]	@ (8001bc8 <SystemInit+0xd8>)
 8001b38:	4b24      	ldr	r3, [pc, #144]	@ (8001bcc <SystemInit+0xdc>)
 8001b3a:	4013      	ands	r3, r2
 8001b3c:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001b3e:	4b21      	ldr	r3, [pc, #132]	@ (8001bc4 <SystemInit+0xd4>)
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	f003 0308 	and.w	r3, r3, #8
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d007      	beq.n	8001b5a <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001b4a:	4b1e      	ldr	r3, [pc, #120]	@ (8001bc4 <SystemInit+0xd4>)
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	f023 030f 	bic.w	r3, r3, #15
 8001b52:	4a1c      	ldr	r2, [pc, #112]	@ (8001bc4 <SystemInit+0xd4>)
 8001b54:	f043 0307 	orr.w	r3, r3, #7
 8001b58:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8001b5a:	4b1b      	ldr	r3, [pc, #108]	@ (8001bc8 <SystemInit+0xd8>)
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001b60:	4b19      	ldr	r3, [pc, #100]	@ (8001bc8 <SystemInit+0xd8>)
 8001b62:	2200      	movs	r2, #0
 8001b64:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8001b66:	4b18      	ldr	r3, [pc, #96]	@ (8001bc8 <SystemInit+0xd8>)
 8001b68:	2200      	movs	r2, #0
 8001b6a:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001b6c:	4b16      	ldr	r3, [pc, #88]	@ (8001bc8 <SystemInit+0xd8>)
 8001b6e:	4a18      	ldr	r2, [pc, #96]	@ (8001bd0 <SystemInit+0xe0>)
 8001b70:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001b72:	4b15      	ldr	r3, [pc, #84]	@ (8001bc8 <SystemInit+0xd8>)
 8001b74:	4a17      	ldr	r2, [pc, #92]	@ (8001bd4 <SystemInit+0xe4>)
 8001b76:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001b78:	4b13      	ldr	r3, [pc, #76]	@ (8001bc8 <SystemInit+0xd8>)
 8001b7a:	4a17      	ldr	r2, [pc, #92]	@ (8001bd8 <SystemInit+0xe8>)
 8001b7c:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001b7e:	4b12      	ldr	r3, [pc, #72]	@ (8001bc8 <SystemInit+0xd8>)
 8001b80:	2200      	movs	r2, #0
 8001b82:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001b84:	4b10      	ldr	r3, [pc, #64]	@ (8001bc8 <SystemInit+0xd8>)
 8001b86:	4a14      	ldr	r2, [pc, #80]	@ (8001bd8 <SystemInit+0xe8>)
 8001b88:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001b8a:	4b0f      	ldr	r3, [pc, #60]	@ (8001bc8 <SystemInit+0xd8>)
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001b90:	4b0d      	ldr	r3, [pc, #52]	@ (8001bc8 <SystemInit+0xd8>)
 8001b92:	4a11      	ldr	r2, [pc, #68]	@ (8001bd8 <SystemInit+0xe8>)
 8001b94:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001b96:	4b0c      	ldr	r3, [pc, #48]	@ (8001bc8 <SystemInit+0xd8>)
 8001b98:	2200      	movs	r2, #0
 8001b9a:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001b9c:	4b0a      	ldr	r3, [pc, #40]	@ (8001bc8 <SystemInit+0xd8>)
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	4a09      	ldr	r2, [pc, #36]	@ (8001bc8 <SystemInit+0xd8>)
 8001ba2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001ba6:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001ba8:	4b07      	ldr	r3, [pc, #28]	@ (8001bc8 <SystemInit+0xd8>)
 8001baa:	2200      	movs	r2, #0
 8001bac:	661a      	str	r2, [r3, #96]	@ 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001bae:	4b0b      	ldr	r3, [pc, #44]	@ (8001bdc <SystemInit+0xec>)
 8001bb0:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8001bb4:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8001bb6:	bf00      	nop
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bbe:	4770      	bx	lr
 8001bc0:	e000ed00 	.word	0xe000ed00
 8001bc4:	52002000 	.word	0x52002000
 8001bc8:	58024400 	.word	0x58024400
 8001bcc:	eaf6ed7f 	.word	0xeaf6ed7f
 8001bd0:	02020200 	.word	0x02020200
 8001bd4:	01ff0000 	.word	0x01ff0000
 8001bd8:	01010280 	.word	0x01010280
 8001bdc:	52004000 	.word	0x52004000

08001be0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001be0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001c18 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001be4:	f7ff ff84 	bl	8001af0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001be8:	480c      	ldr	r0, [pc, #48]	@ (8001c1c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001bea:	490d      	ldr	r1, [pc, #52]	@ (8001c20 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001bec:	4a0d      	ldr	r2, [pc, #52]	@ (8001c24 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001bee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001bf0:	e002      	b.n	8001bf8 <LoopCopyDataInit>

08001bf2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001bf2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001bf4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001bf6:	3304      	adds	r3, #4

08001bf8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001bf8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001bfa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001bfc:	d3f9      	bcc.n	8001bf2 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001bfe:	4a0a      	ldr	r2, [pc, #40]	@ (8001c28 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001c00:	4c0a      	ldr	r4, [pc, #40]	@ (8001c2c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001c02:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001c04:	e001      	b.n	8001c0a <LoopFillZerobss>

08001c06 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001c06:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001c08:	3204      	adds	r2, #4

08001c0a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001c0a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001c0c:	d3fb      	bcc.n	8001c06 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001c0e:	f005 f971 	bl	8006ef4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001c12:	f7ff f9f9 	bl	8001008 <main>
  bx  lr
 8001c16:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001c18:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 8001c1c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001c20:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 8001c24:	0801bb4c 	.word	0x0801bb4c
  ldr r2, =_sbss
 8001c28:	24000010 	.word	0x24000010
  ldr r4, =_ebss
 8001c2c:	24000110 	.word	0x24000110

08001c30 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001c30:	e7fe      	b.n	8001c30 <ADC3_IRQHandler>
	...

08001c34 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	b082      	sub	sp, #8
 8001c38:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c3a:	2003      	movs	r0, #3
 8001c3c:	f000 f962 	bl	8001f04 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001c40:	f001 f93e 	bl	8002ec0 <HAL_RCC_GetSysClockFreq>
 8001c44:	4602      	mov	r2, r0
 8001c46:	4b15      	ldr	r3, [pc, #84]	@ (8001c9c <HAL_Init+0x68>)
 8001c48:	699b      	ldr	r3, [r3, #24]
 8001c4a:	0a1b      	lsrs	r3, r3, #8
 8001c4c:	f003 030f 	and.w	r3, r3, #15
 8001c50:	4913      	ldr	r1, [pc, #76]	@ (8001ca0 <HAL_Init+0x6c>)
 8001c52:	5ccb      	ldrb	r3, [r1, r3]
 8001c54:	f003 031f 	and.w	r3, r3, #31
 8001c58:	fa22 f303 	lsr.w	r3, r2, r3
 8001c5c:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001c5e:	4b0f      	ldr	r3, [pc, #60]	@ (8001c9c <HAL_Init+0x68>)
 8001c60:	699b      	ldr	r3, [r3, #24]
 8001c62:	f003 030f 	and.w	r3, r3, #15
 8001c66:	4a0e      	ldr	r2, [pc, #56]	@ (8001ca0 <HAL_Init+0x6c>)
 8001c68:	5cd3      	ldrb	r3, [r2, r3]
 8001c6a:	f003 031f 	and.w	r3, r3, #31
 8001c6e:	687a      	ldr	r2, [r7, #4]
 8001c70:	fa22 f303 	lsr.w	r3, r2, r3
 8001c74:	4a0b      	ldr	r2, [pc, #44]	@ (8001ca4 <HAL_Init+0x70>)
 8001c76:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001c78:	4a0b      	ldr	r2, [pc, #44]	@ (8001ca8 <HAL_Init+0x74>)
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001c7e:	2000      	movs	r0, #0
 8001c80:	f000 f814 	bl	8001cac <HAL_InitTick>
 8001c84:	4603      	mov	r3, r0
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d001      	beq.n	8001c8e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001c8a:	2301      	movs	r3, #1
 8001c8c:	e002      	b.n	8001c94 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001c8e:	f7ff fd2b 	bl	80016e8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001c92:	2300      	movs	r3, #0
}
 8001c94:	4618      	mov	r0, r3
 8001c96:	3708      	adds	r7, #8
 8001c98:	46bd      	mov	sp, r7
 8001c9a:	bd80      	pop	{r7, pc}
 8001c9c:	58024400 	.word	0x58024400
 8001ca0:	0801bb04 	.word	0x0801bb04
 8001ca4:	24000004 	.word	0x24000004
 8001ca8:	24000000 	.word	0x24000000

08001cac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	b082      	sub	sp, #8
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001cb4:	4b15      	ldr	r3, [pc, #84]	@ (8001d0c <HAL_InitTick+0x60>)
 8001cb6:	781b      	ldrb	r3, [r3, #0]
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d101      	bne.n	8001cc0 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001cbc:	2301      	movs	r3, #1
 8001cbe:	e021      	b.n	8001d04 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001cc0:	4b13      	ldr	r3, [pc, #76]	@ (8001d10 <HAL_InitTick+0x64>)
 8001cc2:	681a      	ldr	r2, [r3, #0]
 8001cc4:	4b11      	ldr	r3, [pc, #68]	@ (8001d0c <HAL_InitTick+0x60>)
 8001cc6:	781b      	ldrb	r3, [r3, #0]
 8001cc8:	4619      	mov	r1, r3
 8001cca:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001cce:	fbb3 f3f1 	udiv	r3, r3, r1
 8001cd2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cd6:	4618      	mov	r0, r3
 8001cd8:	f000 f939 	bl	8001f4e <HAL_SYSTICK_Config>
 8001cdc:	4603      	mov	r3, r0
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d001      	beq.n	8001ce6 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001ce2:	2301      	movs	r3, #1
 8001ce4:	e00e      	b.n	8001d04 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	2b0f      	cmp	r3, #15
 8001cea:	d80a      	bhi.n	8001d02 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001cec:	2200      	movs	r2, #0
 8001cee:	6879      	ldr	r1, [r7, #4]
 8001cf0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001cf4:	f000 f911 	bl	8001f1a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001cf8:	4a06      	ldr	r2, [pc, #24]	@ (8001d14 <HAL_InitTick+0x68>)
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001cfe:	2300      	movs	r3, #0
 8001d00:	e000      	b.n	8001d04 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001d02:	2301      	movs	r3, #1
}
 8001d04:	4618      	mov	r0, r3
 8001d06:	3708      	adds	r7, #8
 8001d08:	46bd      	mov	sp, r7
 8001d0a:	bd80      	pop	{r7, pc}
 8001d0c:	2400000c 	.word	0x2400000c
 8001d10:	24000000 	.word	0x24000000
 8001d14:	24000008 	.word	0x24000008

08001d18 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d18:	b480      	push	{r7}
 8001d1a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001d1c:	4b06      	ldr	r3, [pc, #24]	@ (8001d38 <HAL_IncTick+0x20>)
 8001d1e:	781b      	ldrb	r3, [r3, #0]
 8001d20:	461a      	mov	r2, r3
 8001d22:	4b06      	ldr	r3, [pc, #24]	@ (8001d3c <HAL_IncTick+0x24>)
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	4413      	add	r3, r2
 8001d28:	4a04      	ldr	r2, [pc, #16]	@ (8001d3c <HAL_IncTick+0x24>)
 8001d2a:	6013      	str	r3, [r2, #0]
}
 8001d2c:	bf00      	nop
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d34:	4770      	bx	lr
 8001d36:	bf00      	nop
 8001d38:	2400000c 	.word	0x2400000c
 8001d3c:	2400010c 	.word	0x2400010c

08001d40 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d40:	b480      	push	{r7}
 8001d42:	af00      	add	r7, sp, #0
  return uwTick;
 8001d44:	4b03      	ldr	r3, [pc, #12]	@ (8001d54 <HAL_GetTick+0x14>)
 8001d46:	681b      	ldr	r3, [r3, #0]
}
 8001d48:	4618      	mov	r0, r3
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d50:	4770      	bx	lr
 8001d52:	bf00      	nop
 8001d54:	2400010c 	.word	0x2400010c

08001d58 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	b084      	sub	sp, #16
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001d60:	f7ff ffee 	bl	8001d40 <HAL_GetTick>
 8001d64:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001d70:	d005      	beq.n	8001d7e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001d72:	4b0a      	ldr	r3, [pc, #40]	@ (8001d9c <HAL_Delay+0x44>)
 8001d74:	781b      	ldrb	r3, [r3, #0]
 8001d76:	461a      	mov	r2, r3
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	4413      	add	r3, r2
 8001d7c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001d7e:	bf00      	nop
 8001d80:	f7ff ffde 	bl	8001d40 <HAL_GetTick>
 8001d84:	4602      	mov	r2, r0
 8001d86:	68bb      	ldr	r3, [r7, #8]
 8001d88:	1ad3      	subs	r3, r2, r3
 8001d8a:	68fa      	ldr	r2, [r7, #12]
 8001d8c:	429a      	cmp	r2, r3
 8001d8e:	d8f7      	bhi.n	8001d80 <HAL_Delay+0x28>
  {
  }
}
 8001d90:	bf00      	nop
 8001d92:	bf00      	nop
 8001d94:	3710      	adds	r7, #16
 8001d96:	46bd      	mov	sp, r7
 8001d98:	bd80      	pop	{r7, pc}
 8001d9a:	bf00      	nop
 8001d9c:	2400000c 	.word	0x2400000c

08001da0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001da0:	b480      	push	{r7}
 8001da2:	b085      	sub	sp, #20
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	f003 0307 	and.w	r3, r3, #7
 8001dae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001db0:	4b0b      	ldr	r3, [pc, #44]	@ (8001de0 <__NVIC_SetPriorityGrouping+0x40>)
 8001db2:	68db      	ldr	r3, [r3, #12]
 8001db4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001db6:	68ba      	ldr	r2, [r7, #8]
 8001db8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001dbc:	4013      	ands	r3, r2
 8001dbe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001dc4:	68bb      	ldr	r3, [r7, #8]
 8001dc6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001dc8:	4b06      	ldr	r3, [pc, #24]	@ (8001de4 <__NVIC_SetPriorityGrouping+0x44>)
 8001dca:	4313      	orrs	r3, r2
 8001dcc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001dce:	4a04      	ldr	r2, [pc, #16]	@ (8001de0 <__NVIC_SetPriorityGrouping+0x40>)
 8001dd0:	68bb      	ldr	r3, [r7, #8]
 8001dd2:	60d3      	str	r3, [r2, #12]
}
 8001dd4:	bf00      	nop
 8001dd6:	3714      	adds	r7, #20
 8001dd8:	46bd      	mov	sp, r7
 8001dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dde:	4770      	bx	lr
 8001de0:	e000ed00 	.word	0xe000ed00
 8001de4:	05fa0000 	.word	0x05fa0000

08001de8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001de8:	b480      	push	{r7}
 8001dea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001dec:	4b04      	ldr	r3, [pc, #16]	@ (8001e00 <__NVIC_GetPriorityGrouping+0x18>)
 8001dee:	68db      	ldr	r3, [r3, #12]
 8001df0:	0a1b      	lsrs	r3, r3, #8
 8001df2:	f003 0307 	and.w	r3, r3, #7
}
 8001df6:	4618      	mov	r0, r3
 8001df8:	46bd      	mov	sp, r7
 8001dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfe:	4770      	bx	lr
 8001e00:	e000ed00 	.word	0xe000ed00

08001e04 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001e04:	b480      	push	{r7}
 8001e06:	b083      	sub	sp, #12
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	4603      	mov	r3, r0
 8001e0c:	6039      	str	r1, [r7, #0]
 8001e0e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001e10:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	db0a      	blt.n	8001e2e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e18:	683b      	ldr	r3, [r7, #0]
 8001e1a:	b2da      	uxtb	r2, r3
 8001e1c:	490c      	ldr	r1, [pc, #48]	@ (8001e50 <__NVIC_SetPriority+0x4c>)
 8001e1e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001e22:	0112      	lsls	r2, r2, #4
 8001e24:	b2d2      	uxtb	r2, r2
 8001e26:	440b      	add	r3, r1
 8001e28:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001e2c:	e00a      	b.n	8001e44 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e2e:	683b      	ldr	r3, [r7, #0]
 8001e30:	b2da      	uxtb	r2, r3
 8001e32:	4908      	ldr	r1, [pc, #32]	@ (8001e54 <__NVIC_SetPriority+0x50>)
 8001e34:	88fb      	ldrh	r3, [r7, #6]
 8001e36:	f003 030f 	and.w	r3, r3, #15
 8001e3a:	3b04      	subs	r3, #4
 8001e3c:	0112      	lsls	r2, r2, #4
 8001e3e:	b2d2      	uxtb	r2, r2
 8001e40:	440b      	add	r3, r1
 8001e42:	761a      	strb	r2, [r3, #24]
}
 8001e44:	bf00      	nop
 8001e46:	370c      	adds	r7, #12
 8001e48:	46bd      	mov	sp, r7
 8001e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4e:	4770      	bx	lr
 8001e50:	e000e100 	.word	0xe000e100
 8001e54:	e000ed00 	.word	0xe000ed00

08001e58 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e58:	b480      	push	{r7}
 8001e5a:	b089      	sub	sp, #36	@ 0x24
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	60f8      	str	r0, [r7, #12]
 8001e60:	60b9      	str	r1, [r7, #8]
 8001e62:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	f003 0307 	and.w	r3, r3, #7
 8001e6a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e6c:	69fb      	ldr	r3, [r7, #28]
 8001e6e:	f1c3 0307 	rsb	r3, r3, #7
 8001e72:	2b04      	cmp	r3, #4
 8001e74:	bf28      	it	cs
 8001e76:	2304      	movcs	r3, #4
 8001e78:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e7a:	69fb      	ldr	r3, [r7, #28]
 8001e7c:	3304      	adds	r3, #4
 8001e7e:	2b06      	cmp	r3, #6
 8001e80:	d902      	bls.n	8001e88 <NVIC_EncodePriority+0x30>
 8001e82:	69fb      	ldr	r3, [r7, #28]
 8001e84:	3b03      	subs	r3, #3
 8001e86:	e000      	b.n	8001e8a <NVIC_EncodePriority+0x32>
 8001e88:	2300      	movs	r3, #0
 8001e8a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e8c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001e90:	69bb      	ldr	r3, [r7, #24]
 8001e92:	fa02 f303 	lsl.w	r3, r2, r3
 8001e96:	43da      	mvns	r2, r3
 8001e98:	68bb      	ldr	r3, [r7, #8]
 8001e9a:	401a      	ands	r2, r3
 8001e9c:	697b      	ldr	r3, [r7, #20]
 8001e9e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ea0:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001ea4:	697b      	ldr	r3, [r7, #20]
 8001ea6:	fa01 f303 	lsl.w	r3, r1, r3
 8001eaa:	43d9      	mvns	r1, r3
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001eb0:	4313      	orrs	r3, r2
         );
}
 8001eb2:	4618      	mov	r0, r3
 8001eb4:	3724      	adds	r7, #36	@ 0x24
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ebc:	4770      	bx	lr
	...

08001ec0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	b082      	sub	sp, #8
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	3b01      	subs	r3, #1
 8001ecc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001ed0:	d301      	bcc.n	8001ed6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001ed2:	2301      	movs	r3, #1
 8001ed4:	e00f      	b.n	8001ef6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001ed6:	4a0a      	ldr	r2, [pc, #40]	@ (8001f00 <SysTick_Config+0x40>)
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	3b01      	subs	r3, #1
 8001edc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001ede:	210f      	movs	r1, #15
 8001ee0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001ee4:	f7ff ff8e 	bl	8001e04 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ee8:	4b05      	ldr	r3, [pc, #20]	@ (8001f00 <SysTick_Config+0x40>)
 8001eea:	2200      	movs	r2, #0
 8001eec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001eee:	4b04      	ldr	r3, [pc, #16]	@ (8001f00 <SysTick_Config+0x40>)
 8001ef0:	2207      	movs	r2, #7
 8001ef2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ef4:	2300      	movs	r3, #0
}
 8001ef6:	4618      	mov	r0, r3
 8001ef8:	3708      	adds	r7, #8
 8001efa:	46bd      	mov	sp, r7
 8001efc:	bd80      	pop	{r7, pc}
 8001efe:	bf00      	nop
 8001f00:	e000e010 	.word	0xe000e010

08001f04 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f04:	b580      	push	{r7, lr}
 8001f06:	b082      	sub	sp, #8
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001f0c:	6878      	ldr	r0, [r7, #4]
 8001f0e:	f7ff ff47 	bl	8001da0 <__NVIC_SetPriorityGrouping>
}
 8001f12:	bf00      	nop
 8001f14:	3708      	adds	r7, #8
 8001f16:	46bd      	mov	sp, r7
 8001f18:	bd80      	pop	{r7, pc}

08001f1a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f1a:	b580      	push	{r7, lr}
 8001f1c:	b086      	sub	sp, #24
 8001f1e:	af00      	add	r7, sp, #0
 8001f20:	4603      	mov	r3, r0
 8001f22:	60b9      	str	r1, [r7, #8]
 8001f24:	607a      	str	r2, [r7, #4]
 8001f26:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001f28:	f7ff ff5e 	bl	8001de8 <__NVIC_GetPriorityGrouping>
 8001f2c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001f2e:	687a      	ldr	r2, [r7, #4]
 8001f30:	68b9      	ldr	r1, [r7, #8]
 8001f32:	6978      	ldr	r0, [r7, #20]
 8001f34:	f7ff ff90 	bl	8001e58 <NVIC_EncodePriority>
 8001f38:	4602      	mov	r2, r0
 8001f3a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001f3e:	4611      	mov	r1, r2
 8001f40:	4618      	mov	r0, r3
 8001f42:	f7ff ff5f 	bl	8001e04 <__NVIC_SetPriority>
}
 8001f46:	bf00      	nop
 8001f48:	3718      	adds	r7, #24
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	bd80      	pop	{r7, pc}

08001f4e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001f4e:	b580      	push	{r7, lr}
 8001f50:	b082      	sub	sp, #8
 8001f52:	af00      	add	r7, sp, #0
 8001f54:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001f56:	6878      	ldr	r0, [r7, #4]
 8001f58:	f7ff ffb2 	bl	8001ec0 <SysTick_Config>
 8001f5c:	4603      	mov	r3, r0
}
 8001f5e:	4618      	mov	r0, r3
 8001f60:	3708      	adds	r7, #8
 8001f62:	46bd      	mov	sp, r7
 8001f64:	bd80      	pop	{r7, pc}
	...

08001f68 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f68:	b480      	push	{r7}
 8001f6a:	b089      	sub	sp, #36	@ 0x24
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	6078      	str	r0, [r7, #4]
 8001f70:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001f72:	2300      	movs	r3, #0
 8001f74:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8001f76:	4b86      	ldr	r3, [pc, #536]	@ (8002190 <HAL_GPIO_Init+0x228>)
 8001f78:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001f7a:	e18c      	b.n	8002296 <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001f7c:	683b      	ldr	r3, [r7, #0]
 8001f7e:	681a      	ldr	r2, [r3, #0]
 8001f80:	2101      	movs	r1, #1
 8001f82:	69fb      	ldr	r3, [r7, #28]
 8001f84:	fa01 f303 	lsl.w	r3, r1, r3
 8001f88:	4013      	ands	r3, r2
 8001f8a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8001f8c:	693b      	ldr	r3, [r7, #16]
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	f000 817e 	beq.w	8002290 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001f94:	683b      	ldr	r3, [r7, #0]
 8001f96:	685b      	ldr	r3, [r3, #4]
 8001f98:	f003 0303 	and.w	r3, r3, #3
 8001f9c:	2b01      	cmp	r3, #1
 8001f9e:	d005      	beq.n	8001fac <HAL_GPIO_Init+0x44>
 8001fa0:	683b      	ldr	r3, [r7, #0]
 8001fa2:	685b      	ldr	r3, [r3, #4]
 8001fa4:	f003 0303 	and.w	r3, r3, #3
 8001fa8:	2b02      	cmp	r3, #2
 8001faa:	d130      	bne.n	800200e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	689b      	ldr	r3, [r3, #8]
 8001fb0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001fb2:	69fb      	ldr	r3, [r7, #28]
 8001fb4:	005b      	lsls	r3, r3, #1
 8001fb6:	2203      	movs	r2, #3
 8001fb8:	fa02 f303 	lsl.w	r3, r2, r3
 8001fbc:	43db      	mvns	r3, r3
 8001fbe:	69ba      	ldr	r2, [r7, #24]
 8001fc0:	4013      	ands	r3, r2
 8001fc2:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001fc4:	683b      	ldr	r3, [r7, #0]
 8001fc6:	68da      	ldr	r2, [r3, #12]
 8001fc8:	69fb      	ldr	r3, [r7, #28]
 8001fca:	005b      	lsls	r3, r3, #1
 8001fcc:	fa02 f303 	lsl.w	r3, r2, r3
 8001fd0:	69ba      	ldr	r2, [r7, #24]
 8001fd2:	4313      	orrs	r3, r2
 8001fd4:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	69ba      	ldr	r2, [r7, #24]
 8001fda:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	685b      	ldr	r3, [r3, #4]
 8001fe0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001fe2:	2201      	movs	r2, #1
 8001fe4:	69fb      	ldr	r3, [r7, #28]
 8001fe6:	fa02 f303 	lsl.w	r3, r2, r3
 8001fea:	43db      	mvns	r3, r3
 8001fec:	69ba      	ldr	r2, [r7, #24]
 8001fee:	4013      	ands	r3, r2
 8001ff0:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001ff2:	683b      	ldr	r3, [r7, #0]
 8001ff4:	685b      	ldr	r3, [r3, #4]
 8001ff6:	091b      	lsrs	r3, r3, #4
 8001ff8:	f003 0201 	and.w	r2, r3, #1
 8001ffc:	69fb      	ldr	r3, [r7, #28]
 8001ffe:	fa02 f303 	lsl.w	r3, r2, r3
 8002002:	69ba      	ldr	r2, [r7, #24]
 8002004:	4313      	orrs	r3, r2
 8002006:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	69ba      	ldr	r2, [r7, #24]
 800200c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800200e:	683b      	ldr	r3, [r7, #0]
 8002010:	685b      	ldr	r3, [r3, #4]
 8002012:	f003 0303 	and.w	r3, r3, #3
 8002016:	2b03      	cmp	r3, #3
 8002018:	d017      	beq.n	800204a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	68db      	ldr	r3, [r3, #12]
 800201e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002020:	69fb      	ldr	r3, [r7, #28]
 8002022:	005b      	lsls	r3, r3, #1
 8002024:	2203      	movs	r2, #3
 8002026:	fa02 f303 	lsl.w	r3, r2, r3
 800202a:	43db      	mvns	r3, r3
 800202c:	69ba      	ldr	r2, [r7, #24]
 800202e:	4013      	ands	r3, r2
 8002030:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002032:	683b      	ldr	r3, [r7, #0]
 8002034:	689a      	ldr	r2, [r3, #8]
 8002036:	69fb      	ldr	r3, [r7, #28]
 8002038:	005b      	lsls	r3, r3, #1
 800203a:	fa02 f303 	lsl.w	r3, r2, r3
 800203e:	69ba      	ldr	r2, [r7, #24]
 8002040:	4313      	orrs	r3, r2
 8002042:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	69ba      	ldr	r2, [r7, #24]
 8002048:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800204a:	683b      	ldr	r3, [r7, #0]
 800204c:	685b      	ldr	r3, [r3, #4]
 800204e:	f003 0303 	and.w	r3, r3, #3
 8002052:	2b02      	cmp	r3, #2
 8002054:	d123      	bne.n	800209e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002056:	69fb      	ldr	r3, [r7, #28]
 8002058:	08da      	lsrs	r2, r3, #3
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	3208      	adds	r2, #8
 800205e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002062:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002064:	69fb      	ldr	r3, [r7, #28]
 8002066:	f003 0307 	and.w	r3, r3, #7
 800206a:	009b      	lsls	r3, r3, #2
 800206c:	220f      	movs	r2, #15
 800206e:	fa02 f303 	lsl.w	r3, r2, r3
 8002072:	43db      	mvns	r3, r3
 8002074:	69ba      	ldr	r2, [r7, #24]
 8002076:	4013      	ands	r3, r2
 8002078:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800207a:	683b      	ldr	r3, [r7, #0]
 800207c:	691a      	ldr	r2, [r3, #16]
 800207e:	69fb      	ldr	r3, [r7, #28]
 8002080:	f003 0307 	and.w	r3, r3, #7
 8002084:	009b      	lsls	r3, r3, #2
 8002086:	fa02 f303 	lsl.w	r3, r2, r3
 800208a:	69ba      	ldr	r2, [r7, #24]
 800208c:	4313      	orrs	r3, r2
 800208e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002090:	69fb      	ldr	r3, [r7, #28]
 8002092:	08da      	lsrs	r2, r3, #3
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	3208      	adds	r2, #8
 8002098:	69b9      	ldr	r1, [r7, #24]
 800209a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80020a4:	69fb      	ldr	r3, [r7, #28]
 80020a6:	005b      	lsls	r3, r3, #1
 80020a8:	2203      	movs	r2, #3
 80020aa:	fa02 f303 	lsl.w	r3, r2, r3
 80020ae:	43db      	mvns	r3, r3
 80020b0:	69ba      	ldr	r2, [r7, #24]
 80020b2:	4013      	ands	r3, r2
 80020b4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80020b6:	683b      	ldr	r3, [r7, #0]
 80020b8:	685b      	ldr	r3, [r3, #4]
 80020ba:	f003 0203 	and.w	r2, r3, #3
 80020be:	69fb      	ldr	r3, [r7, #28]
 80020c0:	005b      	lsls	r3, r3, #1
 80020c2:	fa02 f303 	lsl.w	r3, r2, r3
 80020c6:	69ba      	ldr	r2, [r7, #24]
 80020c8:	4313      	orrs	r3, r2
 80020ca:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	69ba      	ldr	r2, [r7, #24]
 80020d0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80020d2:	683b      	ldr	r3, [r7, #0]
 80020d4:	685b      	ldr	r3, [r3, #4]
 80020d6:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80020da:	2b00      	cmp	r3, #0
 80020dc:	f000 80d8 	beq.w	8002290 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80020e0:	4b2c      	ldr	r3, [pc, #176]	@ (8002194 <HAL_GPIO_Init+0x22c>)
 80020e2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80020e6:	4a2b      	ldr	r2, [pc, #172]	@ (8002194 <HAL_GPIO_Init+0x22c>)
 80020e8:	f043 0302 	orr.w	r3, r3, #2
 80020ec:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80020f0:	4b28      	ldr	r3, [pc, #160]	@ (8002194 <HAL_GPIO_Init+0x22c>)
 80020f2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80020f6:	f003 0302 	and.w	r3, r3, #2
 80020fa:	60fb      	str	r3, [r7, #12]
 80020fc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80020fe:	4a26      	ldr	r2, [pc, #152]	@ (8002198 <HAL_GPIO_Init+0x230>)
 8002100:	69fb      	ldr	r3, [r7, #28]
 8002102:	089b      	lsrs	r3, r3, #2
 8002104:	3302      	adds	r3, #2
 8002106:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800210a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800210c:	69fb      	ldr	r3, [r7, #28]
 800210e:	f003 0303 	and.w	r3, r3, #3
 8002112:	009b      	lsls	r3, r3, #2
 8002114:	220f      	movs	r2, #15
 8002116:	fa02 f303 	lsl.w	r3, r2, r3
 800211a:	43db      	mvns	r3, r3
 800211c:	69ba      	ldr	r2, [r7, #24]
 800211e:	4013      	ands	r3, r2
 8002120:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	4a1d      	ldr	r2, [pc, #116]	@ (800219c <HAL_GPIO_Init+0x234>)
 8002126:	4293      	cmp	r3, r2
 8002128:	d04a      	beq.n	80021c0 <HAL_GPIO_Init+0x258>
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	4a1c      	ldr	r2, [pc, #112]	@ (80021a0 <HAL_GPIO_Init+0x238>)
 800212e:	4293      	cmp	r3, r2
 8002130:	d02b      	beq.n	800218a <HAL_GPIO_Init+0x222>
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	4a1b      	ldr	r2, [pc, #108]	@ (80021a4 <HAL_GPIO_Init+0x23c>)
 8002136:	4293      	cmp	r3, r2
 8002138:	d025      	beq.n	8002186 <HAL_GPIO_Init+0x21e>
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	4a1a      	ldr	r2, [pc, #104]	@ (80021a8 <HAL_GPIO_Init+0x240>)
 800213e:	4293      	cmp	r3, r2
 8002140:	d01f      	beq.n	8002182 <HAL_GPIO_Init+0x21a>
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	4a19      	ldr	r2, [pc, #100]	@ (80021ac <HAL_GPIO_Init+0x244>)
 8002146:	4293      	cmp	r3, r2
 8002148:	d019      	beq.n	800217e <HAL_GPIO_Init+0x216>
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	4a18      	ldr	r2, [pc, #96]	@ (80021b0 <HAL_GPIO_Init+0x248>)
 800214e:	4293      	cmp	r3, r2
 8002150:	d013      	beq.n	800217a <HAL_GPIO_Init+0x212>
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	4a17      	ldr	r2, [pc, #92]	@ (80021b4 <HAL_GPIO_Init+0x24c>)
 8002156:	4293      	cmp	r3, r2
 8002158:	d00d      	beq.n	8002176 <HAL_GPIO_Init+0x20e>
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	4a16      	ldr	r2, [pc, #88]	@ (80021b8 <HAL_GPIO_Init+0x250>)
 800215e:	4293      	cmp	r3, r2
 8002160:	d007      	beq.n	8002172 <HAL_GPIO_Init+0x20a>
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	4a15      	ldr	r2, [pc, #84]	@ (80021bc <HAL_GPIO_Init+0x254>)
 8002166:	4293      	cmp	r3, r2
 8002168:	d101      	bne.n	800216e <HAL_GPIO_Init+0x206>
 800216a:	2309      	movs	r3, #9
 800216c:	e029      	b.n	80021c2 <HAL_GPIO_Init+0x25a>
 800216e:	230a      	movs	r3, #10
 8002170:	e027      	b.n	80021c2 <HAL_GPIO_Init+0x25a>
 8002172:	2307      	movs	r3, #7
 8002174:	e025      	b.n	80021c2 <HAL_GPIO_Init+0x25a>
 8002176:	2306      	movs	r3, #6
 8002178:	e023      	b.n	80021c2 <HAL_GPIO_Init+0x25a>
 800217a:	2305      	movs	r3, #5
 800217c:	e021      	b.n	80021c2 <HAL_GPIO_Init+0x25a>
 800217e:	2304      	movs	r3, #4
 8002180:	e01f      	b.n	80021c2 <HAL_GPIO_Init+0x25a>
 8002182:	2303      	movs	r3, #3
 8002184:	e01d      	b.n	80021c2 <HAL_GPIO_Init+0x25a>
 8002186:	2302      	movs	r3, #2
 8002188:	e01b      	b.n	80021c2 <HAL_GPIO_Init+0x25a>
 800218a:	2301      	movs	r3, #1
 800218c:	e019      	b.n	80021c2 <HAL_GPIO_Init+0x25a>
 800218e:	bf00      	nop
 8002190:	58000080 	.word	0x58000080
 8002194:	58024400 	.word	0x58024400
 8002198:	58000400 	.word	0x58000400
 800219c:	58020000 	.word	0x58020000
 80021a0:	58020400 	.word	0x58020400
 80021a4:	58020800 	.word	0x58020800
 80021a8:	58020c00 	.word	0x58020c00
 80021ac:	58021000 	.word	0x58021000
 80021b0:	58021400 	.word	0x58021400
 80021b4:	58021800 	.word	0x58021800
 80021b8:	58021c00 	.word	0x58021c00
 80021bc:	58022400 	.word	0x58022400
 80021c0:	2300      	movs	r3, #0
 80021c2:	69fa      	ldr	r2, [r7, #28]
 80021c4:	f002 0203 	and.w	r2, r2, #3
 80021c8:	0092      	lsls	r2, r2, #2
 80021ca:	4093      	lsls	r3, r2
 80021cc:	69ba      	ldr	r2, [r7, #24]
 80021ce:	4313      	orrs	r3, r2
 80021d0:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80021d2:	4938      	ldr	r1, [pc, #224]	@ (80022b4 <HAL_GPIO_Init+0x34c>)
 80021d4:	69fb      	ldr	r3, [r7, #28]
 80021d6:	089b      	lsrs	r3, r3, #2
 80021d8:	3302      	adds	r3, #2
 80021da:	69ba      	ldr	r2, [r7, #24]
 80021dc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80021e0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80021e8:	693b      	ldr	r3, [r7, #16]
 80021ea:	43db      	mvns	r3, r3
 80021ec:	69ba      	ldr	r2, [r7, #24]
 80021ee:	4013      	ands	r3, r2
 80021f0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80021f2:	683b      	ldr	r3, [r7, #0]
 80021f4:	685b      	ldr	r3, [r3, #4]
 80021f6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d003      	beq.n	8002206 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 80021fe:	69ba      	ldr	r2, [r7, #24]
 8002200:	693b      	ldr	r3, [r7, #16]
 8002202:	4313      	orrs	r3, r2
 8002204:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8002206:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800220a:	69bb      	ldr	r3, [r7, #24]
 800220c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800220e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002212:	685b      	ldr	r3, [r3, #4]
 8002214:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002216:	693b      	ldr	r3, [r7, #16]
 8002218:	43db      	mvns	r3, r3
 800221a:	69ba      	ldr	r2, [r7, #24]
 800221c:	4013      	ands	r3, r2
 800221e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002220:	683b      	ldr	r3, [r7, #0]
 8002222:	685b      	ldr	r3, [r3, #4]
 8002224:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002228:	2b00      	cmp	r3, #0
 800222a:	d003      	beq.n	8002234 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 800222c:	69ba      	ldr	r2, [r7, #24]
 800222e:	693b      	ldr	r3, [r7, #16]
 8002230:	4313      	orrs	r3, r2
 8002232:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8002234:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002238:	69bb      	ldr	r3, [r7, #24]
 800223a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 800223c:	697b      	ldr	r3, [r7, #20]
 800223e:	685b      	ldr	r3, [r3, #4]
 8002240:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002242:	693b      	ldr	r3, [r7, #16]
 8002244:	43db      	mvns	r3, r3
 8002246:	69ba      	ldr	r2, [r7, #24]
 8002248:	4013      	ands	r3, r2
 800224a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800224c:	683b      	ldr	r3, [r7, #0]
 800224e:	685b      	ldr	r3, [r3, #4]
 8002250:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002254:	2b00      	cmp	r3, #0
 8002256:	d003      	beq.n	8002260 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 8002258:	69ba      	ldr	r2, [r7, #24]
 800225a:	693b      	ldr	r3, [r7, #16]
 800225c:	4313      	orrs	r3, r2
 800225e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8002260:	697b      	ldr	r3, [r7, #20]
 8002262:	69ba      	ldr	r2, [r7, #24]
 8002264:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8002266:	697b      	ldr	r3, [r7, #20]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800226c:	693b      	ldr	r3, [r7, #16]
 800226e:	43db      	mvns	r3, r3
 8002270:	69ba      	ldr	r2, [r7, #24]
 8002272:	4013      	ands	r3, r2
 8002274:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002276:	683b      	ldr	r3, [r7, #0]
 8002278:	685b      	ldr	r3, [r3, #4]
 800227a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800227e:	2b00      	cmp	r3, #0
 8002280:	d003      	beq.n	800228a <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 8002282:	69ba      	ldr	r2, [r7, #24]
 8002284:	693b      	ldr	r3, [r7, #16]
 8002286:	4313      	orrs	r3, r2
 8002288:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800228a:	697b      	ldr	r3, [r7, #20]
 800228c:	69ba      	ldr	r2, [r7, #24]
 800228e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8002290:	69fb      	ldr	r3, [r7, #28]
 8002292:	3301      	adds	r3, #1
 8002294:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002296:	683b      	ldr	r3, [r7, #0]
 8002298:	681a      	ldr	r2, [r3, #0]
 800229a:	69fb      	ldr	r3, [r7, #28]
 800229c:	fa22 f303 	lsr.w	r3, r2, r3
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	f47f ae6b 	bne.w	8001f7c <HAL_GPIO_Init+0x14>
  }
}
 80022a6:	bf00      	nop
 80022a8:	bf00      	nop
 80022aa:	3724      	adds	r7, #36	@ 0x24
 80022ac:	46bd      	mov	sp, r7
 80022ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b2:	4770      	bx	lr
 80022b4:	58000400 	.word	0x58000400

080022b8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80022b8:	b480      	push	{r7}
 80022ba:	b083      	sub	sp, #12
 80022bc:	af00      	add	r7, sp, #0
 80022be:	6078      	str	r0, [r7, #4]
 80022c0:	460b      	mov	r3, r1
 80022c2:	807b      	strh	r3, [r7, #2]
 80022c4:	4613      	mov	r3, r2
 80022c6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80022c8:	787b      	ldrb	r3, [r7, #1]
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d003      	beq.n	80022d6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80022ce:	887a      	ldrh	r2, [r7, #2]
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80022d4:	e003      	b.n	80022de <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80022d6:	887b      	ldrh	r3, [r7, #2]
 80022d8:	041a      	lsls	r2, r3, #16
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	619a      	str	r2, [r3, #24]
}
 80022de:	bf00      	nop
 80022e0:	370c      	adds	r7, #12
 80022e2:	46bd      	mov	sp, r7
 80022e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e8:	4770      	bx	lr
	...

080022ec <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80022ec:	b580      	push	{r7, lr}
 80022ee:	b084      	sub	sp, #16
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 80022f4:	4b29      	ldr	r3, [pc, #164]	@ (800239c <HAL_PWREx_ConfigSupply+0xb0>)
 80022f6:	68db      	ldr	r3, [r3, #12]
 80022f8:	f003 0307 	and.w	r3, r3, #7
 80022fc:	2b06      	cmp	r3, #6
 80022fe:	d00a      	beq.n	8002316 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8002300:	4b26      	ldr	r3, [pc, #152]	@ (800239c <HAL_PWREx_ConfigSupply+0xb0>)
 8002302:	68db      	ldr	r3, [r3, #12]
 8002304:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002308:	687a      	ldr	r2, [r7, #4]
 800230a:	429a      	cmp	r2, r3
 800230c:	d001      	beq.n	8002312 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800230e:	2301      	movs	r3, #1
 8002310:	e03f      	b.n	8002392 <HAL_PWREx_ConfigSupply+0xa6>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8002312:	2300      	movs	r3, #0
 8002314:	e03d      	b.n	8002392 <HAL_PWREx_ConfigSupply+0xa6>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8002316:	4b21      	ldr	r3, [pc, #132]	@ (800239c <HAL_PWREx_ConfigSupply+0xb0>)
 8002318:	68db      	ldr	r3, [r3, #12]
 800231a:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
 800231e:	491f      	ldr	r1, [pc, #124]	@ (800239c <HAL_PWREx_ConfigSupply+0xb0>)
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	4313      	orrs	r3, r2
 8002324:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8002326:	f7ff fd0b 	bl	8001d40 <HAL_GetTick>
 800232a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800232c:	e009      	b.n	8002342 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800232e:	f7ff fd07 	bl	8001d40 <HAL_GetTick>
 8002332:	4602      	mov	r2, r0
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	1ad3      	subs	r3, r2, r3
 8002338:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800233c:	d901      	bls.n	8002342 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800233e:	2301      	movs	r3, #1
 8002340:	e027      	b.n	8002392 <HAL_PWREx_ConfigSupply+0xa6>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002342:	4b16      	ldr	r3, [pc, #88]	@ (800239c <HAL_PWREx_ConfigSupply+0xb0>)
 8002344:	685b      	ldr	r3, [r3, #4]
 8002346:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800234a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800234e:	d1ee      	bne.n	800232e <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	2b1e      	cmp	r3, #30
 8002354:	d008      	beq.n	8002368 <HAL_PWREx_ConfigSupply+0x7c>
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	2b2e      	cmp	r3, #46	@ 0x2e
 800235a:	d005      	beq.n	8002368 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	2b1d      	cmp	r3, #29
 8002360:	d002      	beq.n	8002368 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	2b2d      	cmp	r3, #45	@ 0x2d
 8002366:	d113      	bne.n	8002390 <HAL_PWREx_ConfigSupply+0xa4>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8002368:	f7ff fcea 	bl	8001d40 <HAL_GetTick>
 800236c:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800236e:	e009      	b.n	8002384 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8002370:	f7ff fce6 	bl	8001d40 <HAL_GetTick>
 8002374:	4602      	mov	r2, r0
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	1ad3      	subs	r3, r2, r3
 800237a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800237e:	d901      	bls.n	8002384 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8002380:	2301      	movs	r3, #1
 8002382:	e006      	b.n	8002392 <HAL_PWREx_ConfigSupply+0xa6>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8002384:	4b05      	ldr	r3, [pc, #20]	@ (800239c <HAL_PWREx_ConfigSupply+0xb0>)
 8002386:	68db      	ldr	r3, [r3, #12]
 8002388:	f003 0311 	and.w	r3, r3, #17
 800238c:	2b11      	cmp	r3, #17
 800238e:	d1ef      	bne.n	8002370 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8002390:	2300      	movs	r3, #0
}
 8002392:	4618      	mov	r0, r3
 8002394:	3710      	adds	r7, #16
 8002396:	46bd      	mov	sp, r7
 8002398:	bd80      	pop	{r7, pc}
 800239a:	bf00      	nop
 800239c:	58024800 	.word	0x58024800

080023a0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80023a0:	b580      	push	{r7, lr}
 80023a2:	b08c      	sub	sp, #48	@ 0x30
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d101      	bne.n	80023b2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80023ae:	2301      	movs	r3, #1
 80023b0:	e3c8      	b.n	8002b44 <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	f003 0301 	and.w	r3, r3, #1
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	f000 8087 	beq.w	80024ce <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80023c0:	4b88      	ldr	r3, [pc, #544]	@ (80025e4 <HAL_RCC_OscConfig+0x244>)
 80023c2:	691b      	ldr	r3, [r3, #16]
 80023c4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80023c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80023ca:	4b86      	ldr	r3, [pc, #536]	@ (80025e4 <HAL_RCC_OscConfig+0x244>)
 80023cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80023ce:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80023d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80023d2:	2b10      	cmp	r3, #16
 80023d4:	d007      	beq.n	80023e6 <HAL_RCC_OscConfig+0x46>
 80023d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80023d8:	2b18      	cmp	r3, #24
 80023da:	d110      	bne.n	80023fe <HAL_RCC_OscConfig+0x5e>
 80023dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80023de:	f003 0303 	and.w	r3, r3, #3
 80023e2:	2b02      	cmp	r3, #2
 80023e4:	d10b      	bne.n	80023fe <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023e6:	4b7f      	ldr	r3, [pc, #508]	@ (80025e4 <HAL_RCC_OscConfig+0x244>)
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d06c      	beq.n	80024cc <HAL_RCC_OscConfig+0x12c>
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	685b      	ldr	r3, [r3, #4]
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d168      	bne.n	80024cc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80023fa:	2301      	movs	r3, #1
 80023fc:	e3a2      	b.n	8002b44 <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	685b      	ldr	r3, [r3, #4]
 8002402:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002406:	d106      	bne.n	8002416 <HAL_RCC_OscConfig+0x76>
 8002408:	4b76      	ldr	r3, [pc, #472]	@ (80025e4 <HAL_RCC_OscConfig+0x244>)
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	4a75      	ldr	r2, [pc, #468]	@ (80025e4 <HAL_RCC_OscConfig+0x244>)
 800240e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002412:	6013      	str	r3, [r2, #0]
 8002414:	e02e      	b.n	8002474 <HAL_RCC_OscConfig+0xd4>
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	685b      	ldr	r3, [r3, #4]
 800241a:	2b00      	cmp	r3, #0
 800241c:	d10c      	bne.n	8002438 <HAL_RCC_OscConfig+0x98>
 800241e:	4b71      	ldr	r3, [pc, #452]	@ (80025e4 <HAL_RCC_OscConfig+0x244>)
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	4a70      	ldr	r2, [pc, #448]	@ (80025e4 <HAL_RCC_OscConfig+0x244>)
 8002424:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002428:	6013      	str	r3, [r2, #0]
 800242a:	4b6e      	ldr	r3, [pc, #440]	@ (80025e4 <HAL_RCC_OscConfig+0x244>)
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	4a6d      	ldr	r2, [pc, #436]	@ (80025e4 <HAL_RCC_OscConfig+0x244>)
 8002430:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002434:	6013      	str	r3, [r2, #0]
 8002436:	e01d      	b.n	8002474 <HAL_RCC_OscConfig+0xd4>
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	685b      	ldr	r3, [r3, #4]
 800243c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002440:	d10c      	bne.n	800245c <HAL_RCC_OscConfig+0xbc>
 8002442:	4b68      	ldr	r3, [pc, #416]	@ (80025e4 <HAL_RCC_OscConfig+0x244>)
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	4a67      	ldr	r2, [pc, #412]	@ (80025e4 <HAL_RCC_OscConfig+0x244>)
 8002448:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800244c:	6013      	str	r3, [r2, #0]
 800244e:	4b65      	ldr	r3, [pc, #404]	@ (80025e4 <HAL_RCC_OscConfig+0x244>)
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	4a64      	ldr	r2, [pc, #400]	@ (80025e4 <HAL_RCC_OscConfig+0x244>)
 8002454:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002458:	6013      	str	r3, [r2, #0]
 800245a:	e00b      	b.n	8002474 <HAL_RCC_OscConfig+0xd4>
 800245c:	4b61      	ldr	r3, [pc, #388]	@ (80025e4 <HAL_RCC_OscConfig+0x244>)
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	4a60      	ldr	r2, [pc, #384]	@ (80025e4 <HAL_RCC_OscConfig+0x244>)
 8002462:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002466:	6013      	str	r3, [r2, #0]
 8002468:	4b5e      	ldr	r3, [pc, #376]	@ (80025e4 <HAL_RCC_OscConfig+0x244>)
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	4a5d      	ldr	r2, [pc, #372]	@ (80025e4 <HAL_RCC_OscConfig+0x244>)
 800246e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002472:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	685b      	ldr	r3, [r3, #4]
 8002478:	2b00      	cmp	r3, #0
 800247a:	d013      	beq.n	80024a4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800247c:	f7ff fc60 	bl	8001d40 <HAL_GetTick>
 8002480:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002482:	e008      	b.n	8002496 <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002484:	f7ff fc5c 	bl	8001d40 <HAL_GetTick>
 8002488:	4602      	mov	r2, r0
 800248a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800248c:	1ad3      	subs	r3, r2, r3
 800248e:	2b64      	cmp	r3, #100	@ 0x64
 8002490:	d901      	bls.n	8002496 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002492:	2303      	movs	r3, #3
 8002494:	e356      	b.n	8002b44 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002496:	4b53      	ldr	r3, [pc, #332]	@ (80025e4 <HAL_RCC_OscConfig+0x244>)
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d0f0      	beq.n	8002484 <HAL_RCC_OscConfig+0xe4>
 80024a2:	e014      	b.n	80024ce <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024a4:	f7ff fc4c 	bl	8001d40 <HAL_GetTick>
 80024a8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80024aa:	e008      	b.n	80024be <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80024ac:	f7ff fc48 	bl	8001d40 <HAL_GetTick>
 80024b0:	4602      	mov	r2, r0
 80024b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024b4:	1ad3      	subs	r3, r2, r3
 80024b6:	2b64      	cmp	r3, #100	@ 0x64
 80024b8:	d901      	bls.n	80024be <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80024ba:	2303      	movs	r3, #3
 80024bc:	e342      	b.n	8002b44 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80024be:	4b49      	ldr	r3, [pc, #292]	@ (80025e4 <HAL_RCC_OscConfig+0x244>)
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d1f0      	bne.n	80024ac <HAL_RCC_OscConfig+0x10c>
 80024ca:	e000      	b.n	80024ce <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024cc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f003 0302 	and.w	r3, r3, #2
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	f000 808c 	beq.w	80025f4 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80024dc:	4b41      	ldr	r3, [pc, #260]	@ (80025e4 <HAL_RCC_OscConfig+0x244>)
 80024de:	691b      	ldr	r3, [r3, #16]
 80024e0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80024e4:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80024e6:	4b3f      	ldr	r3, [pc, #252]	@ (80025e4 <HAL_RCC_OscConfig+0x244>)
 80024e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024ea:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80024ec:	6a3b      	ldr	r3, [r7, #32]
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d007      	beq.n	8002502 <HAL_RCC_OscConfig+0x162>
 80024f2:	6a3b      	ldr	r3, [r7, #32]
 80024f4:	2b18      	cmp	r3, #24
 80024f6:	d137      	bne.n	8002568 <HAL_RCC_OscConfig+0x1c8>
 80024f8:	69fb      	ldr	r3, [r7, #28]
 80024fa:	f003 0303 	and.w	r3, r3, #3
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d132      	bne.n	8002568 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002502:	4b38      	ldr	r3, [pc, #224]	@ (80025e4 <HAL_RCC_OscConfig+0x244>)
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f003 0304 	and.w	r3, r3, #4
 800250a:	2b00      	cmp	r3, #0
 800250c:	d005      	beq.n	800251a <HAL_RCC_OscConfig+0x17a>
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	68db      	ldr	r3, [r3, #12]
 8002512:	2b00      	cmp	r3, #0
 8002514:	d101      	bne.n	800251a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002516:	2301      	movs	r3, #1
 8002518:	e314      	b.n	8002b44 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800251a:	4b32      	ldr	r3, [pc, #200]	@ (80025e4 <HAL_RCC_OscConfig+0x244>)
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f023 0219 	bic.w	r2, r3, #25
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	68db      	ldr	r3, [r3, #12]
 8002526:	492f      	ldr	r1, [pc, #188]	@ (80025e4 <HAL_RCC_OscConfig+0x244>)
 8002528:	4313      	orrs	r3, r2
 800252a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800252c:	f7ff fc08 	bl	8001d40 <HAL_GetTick>
 8002530:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002532:	e008      	b.n	8002546 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002534:	f7ff fc04 	bl	8001d40 <HAL_GetTick>
 8002538:	4602      	mov	r2, r0
 800253a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800253c:	1ad3      	subs	r3, r2, r3
 800253e:	2b02      	cmp	r3, #2
 8002540:	d901      	bls.n	8002546 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8002542:	2303      	movs	r3, #3
 8002544:	e2fe      	b.n	8002b44 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002546:	4b27      	ldr	r3, [pc, #156]	@ (80025e4 <HAL_RCC_OscConfig+0x244>)
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f003 0304 	and.w	r3, r3, #4
 800254e:	2b00      	cmp	r3, #0
 8002550:	d0f0      	beq.n	8002534 <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002552:	4b24      	ldr	r3, [pc, #144]	@ (80025e4 <HAL_RCC_OscConfig+0x244>)
 8002554:	685b      	ldr	r3, [r3, #4]
 8002556:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	691b      	ldr	r3, [r3, #16]
 800255e:	061b      	lsls	r3, r3, #24
 8002560:	4920      	ldr	r1, [pc, #128]	@ (80025e4 <HAL_RCC_OscConfig+0x244>)
 8002562:	4313      	orrs	r3, r2
 8002564:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002566:	e045      	b.n	80025f4 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	68db      	ldr	r3, [r3, #12]
 800256c:	2b00      	cmp	r3, #0
 800256e:	d026      	beq.n	80025be <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002570:	4b1c      	ldr	r3, [pc, #112]	@ (80025e4 <HAL_RCC_OscConfig+0x244>)
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	f023 0219 	bic.w	r2, r3, #25
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	68db      	ldr	r3, [r3, #12]
 800257c:	4919      	ldr	r1, [pc, #100]	@ (80025e4 <HAL_RCC_OscConfig+0x244>)
 800257e:	4313      	orrs	r3, r2
 8002580:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002582:	f7ff fbdd 	bl	8001d40 <HAL_GetTick>
 8002586:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002588:	e008      	b.n	800259c <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800258a:	f7ff fbd9 	bl	8001d40 <HAL_GetTick>
 800258e:	4602      	mov	r2, r0
 8002590:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002592:	1ad3      	subs	r3, r2, r3
 8002594:	2b02      	cmp	r3, #2
 8002596:	d901      	bls.n	800259c <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8002598:	2303      	movs	r3, #3
 800259a:	e2d3      	b.n	8002b44 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800259c:	4b11      	ldr	r3, [pc, #68]	@ (80025e4 <HAL_RCC_OscConfig+0x244>)
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	f003 0304 	and.w	r3, r3, #4
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d0f0      	beq.n	800258a <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025a8:	4b0e      	ldr	r3, [pc, #56]	@ (80025e4 <HAL_RCC_OscConfig+0x244>)
 80025aa:	685b      	ldr	r3, [r3, #4]
 80025ac:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	691b      	ldr	r3, [r3, #16]
 80025b4:	061b      	lsls	r3, r3, #24
 80025b6:	490b      	ldr	r1, [pc, #44]	@ (80025e4 <HAL_RCC_OscConfig+0x244>)
 80025b8:	4313      	orrs	r3, r2
 80025ba:	604b      	str	r3, [r1, #4]
 80025bc:	e01a      	b.n	80025f4 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80025be:	4b09      	ldr	r3, [pc, #36]	@ (80025e4 <HAL_RCC_OscConfig+0x244>)
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	4a08      	ldr	r2, [pc, #32]	@ (80025e4 <HAL_RCC_OscConfig+0x244>)
 80025c4:	f023 0301 	bic.w	r3, r3, #1
 80025c8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025ca:	f7ff fbb9 	bl	8001d40 <HAL_GetTick>
 80025ce:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80025d0:	e00a      	b.n	80025e8 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80025d2:	f7ff fbb5 	bl	8001d40 <HAL_GetTick>
 80025d6:	4602      	mov	r2, r0
 80025d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025da:	1ad3      	subs	r3, r2, r3
 80025dc:	2b02      	cmp	r3, #2
 80025de:	d903      	bls.n	80025e8 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 80025e0:	2303      	movs	r3, #3
 80025e2:	e2af      	b.n	8002b44 <HAL_RCC_OscConfig+0x7a4>
 80025e4:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80025e8:	4b96      	ldr	r3, [pc, #600]	@ (8002844 <HAL_RCC_OscConfig+0x4a4>)
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	f003 0304 	and.w	r3, r3, #4
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d1ee      	bne.n	80025d2 <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	f003 0310 	and.w	r3, r3, #16
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d06a      	beq.n	80026d6 <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002600:	4b90      	ldr	r3, [pc, #576]	@ (8002844 <HAL_RCC_OscConfig+0x4a4>)
 8002602:	691b      	ldr	r3, [r3, #16]
 8002604:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002608:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800260a:	4b8e      	ldr	r3, [pc, #568]	@ (8002844 <HAL_RCC_OscConfig+0x4a4>)
 800260c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800260e:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8002610:	69bb      	ldr	r3, [r7, #24]
 8002612:	2b08      	cmp	r3, #8
 8002614:	d007      	beq.n	8002626 <HAL_RCC_OscConfig+0x286>
 8002616:	69bb      	ldr	r3, [r7, #24]
 8002618:	2b18      	cmp	r3, #24
 800261a:	d11b      	bne.n	8002654 <HAL_RCC_OscConfig+0x2b4>
 800261c:	697b      	ldr	r3, [r7, #20]
 800261e:	f003 0303 	and.w	r3, r3, #3
 8002622:	2b01      	cmp	r3, #1
 8002624:	d116      	bne.n	8002654 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002626:	4b87      	ldr	r3, [pc, #540]	@ (8002844 <HAL_RCC_OscConfig+0x4a4>)
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800262e:	2b00      	cmp	r3, #0
 8002630:	d005      	beq.n	800263e <HAL_RCC_OscConfig+0x29e>
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	69db      	ldr	r3, [r3, #28]
 8002636:	2b80      	cmp	r3, #128	@ 0x80
 8002638:	d001      	beq.n	800263e <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 800263a:	2301      	movs	r3, #1
 800263c:	e282      	b.n	8002b44 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800263e:	4b81      	ldr	r3, [pc, #516]	@ (8002844 <HAL_RCC_OscConfig+0x4a4>)
 8002640:	68db      	ldr	r3, [r3, #12]
 8002642:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	6a1b      	ldr	r3, [r3, #32]
 800264a:	061b      	lsls	r3, r3, #24
 800264c:	497d      	ldr	r1, [pc, #500]	@ (8002844 <HAL_RCC_OscConfig+0x4a4>)
 800264e:	4313      	orrs	r3, r2
 8002650:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002652:	e040      	b.n	80026d6 <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	69db      	ldr	r3, [r3, #28]
 8002658:	2b00      	cmp	r3, #0
 800265a:	d023      	beq.n	80026a4 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800265c:	4b79      	ldr	r3, [pc, #484]	@ (8002844 <HAL_RCC_OscConfig+0x4a4>)
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	4a78      	ldr	r2, [pc, #480]	@ (8002844 <HAL_RCC_OscConfig+0x4a4>)
 8002662:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002666:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002668:	f7ff fb6a 	bl	8001d40 <HAL_GetTick>
 800266c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800266e:	e008      	b.n	8002682 <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8002670:	f7ff fb66 	bl	8001d40 <HAL_GetTick>
 8002674:	4602      	mov	r2, r0
 8002676:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002678:	1ad3      	subs	r3, r2, r3
 800267a:	2b02      	cmp	r3, #2
 800267c:	d901      	bls.n	8002682 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800267e:	2303      	movs	r3, #3
 8002680:	e260      	b.n	8002b44 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002682:	4b70      	ldr	r3, [pc, #448]	@ (8002844 <HAL_RCC_OscConfig+0x4a4>)
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800268a:	2b00      	cmp	r3, #0
 800268c:	d0f0      	beq.n	8002670 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800268e:	4b6d      	ldr	r3, [pc, #436]	@ (8002844 <HAL_RCC_OscConfig+0x4a4>)
 8002690:	68db      	ldr	r3, [r3, #12]
 8002692:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	6a1b      	ldr	r3, [r3, #32]
 800269a:	061b      	lsls	r3, r3, #24
 800269c:	4969      	ldr	r1, [pc, #420]	@ (8002844 <HAL_RCC_OscConfig+0x4a4>)
 800269e:	4313      	orrs	r3, r2
 80026a0:	60cb      	str	r3, [r1, #12]
 80026a2:	e018      	b.n	80026d6 <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80026a4:	4b67      	ldr	r3, [pc, #412]	@ (8002844 <HAL_RCC_OscConfig+0x4a4>)
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	4a66      	ldr	r2, [pc, #408]	@ (8002844 <HAL_RCC_OscConfig+0x4a4>)
 80026aa:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80026ae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026b0:	f7ff fb46 	bl	8001d40 <HAL_GetTick>
 80026b4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80026b6:	e008      	b.n	80026ca <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80026b8:	f7ff fb42 	bl	8001d40 <HAL_GetTick>
 80026bc:	4602      	mov	r2, r0
 80026be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026c0:	1ad3      	subs	r3, r2, r3
 80026c2:	2b02      	cmp	r3, #2
 80026c4:	d901      	bls.n	80026ca <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 80026c6:	2303      	movs	r3, #3
 80026c8:	e23c      	b.n	8002b44 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80026ca:	4b5e      	ldr	r3, [pc, #376]	@ (8002844 <HAL_RCC_OscConfig+0x4a4>)
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d1f0      	bne.n	80026b8 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f003 0308 	and.w	r3, r3, #8
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d036      	beq.n	8002750 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	695b      	ldr	r3, [r3, #20]
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d019      	beq.n	800271e <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80026ea:	4b56      	ldr	r3, [pc, #344]	@ (8002844 <HAL_RCC_OscConfig+0x4a4>)
 80026ec:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80026ee:	4a55      	ldr	r2, [pc, #340]	@ (8002844 <HAL_RCC_OscConfig+0x4a4>)
 80026f0:	f043 0301 	orr.w	r3, r3, #1
 80026f4:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026f6:	f7ff fb23 	bl	8001d40 <HAL_GetTick>
 80026fa:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80026fc:	e008      	b.n	8002710 <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80026fe:	f7ff fb1f 	bl	8001d40 <HAL_GetTick>
 8002702:	4602      	mov	r2, r0
 8002704:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002706:	1ad3      	subs	r3, r2, r3
 8002708:	2b02      	cmp	r3, #2
 800270a:	d901      	bls.n	8002710 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 800270c:	2303      	movs	r3, #3
 800270e:	e219      	b.n	8002b44 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002710:	4b4c      	ldr	r3, [pc, #304]	@ (8002844 <HAL_RCC_OscConfig+0x4a4>)
 8002712:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002714:	f003 0302 	and.w	r3, r3, #2
 8002718:	2b00      	cmp	r3, #0
 800271a:	d0f0      	beq.n	80026fe <HAL_RCC_OscConfig+0x35e>
 800271c:	e018      	b.n	8002750 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800271e:	4b49      	ldr	r3, [pc, #292]	@ (8002844 <HAL_RCC_OscConfig+0x4a4>)
 8002720:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002722:	4a48      	ldr	r2, [pc, #288]	@ (8002844 <HAL_RCC_OscConfig+0x4a4>)
 8002724:	f023 0301 	bic.w	r3, r3, #1
 8002728:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800272a:	f7ff fb09 	bl	8001d40 <HAL_GetTick>
 800272e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002730:	e008      	b.n	8002744 <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002732:	f7ff fb05 	bl	8001d40 <HAL_GetTick>
 8002736:	4602      	mov	r2, r0
 8002738:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800273a:	1ad3      	subs	r3, r2, r3
 800273c:	2b02      	cmp	r3, #2
 800273e:	d901      	bls.n	8002744 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 8002740:	2303      	movs	r3, #3
 8002742:	e1ff      	b.n	8002b44 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002744:	4b3f      	ldr	r3, [pc, #252]	@ (8002844 <HAL_RCC_OscConfig+0x4a4>)
 8002746:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002748:	f003 0302 	and.w	r3, r3, #2
 800274c:	2b00      	cmp	r3, #0
 800274e:	d1f0      	bne.n	8002732 <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	f003 0320 	and.w	r3, r3, #32
 8002758:	2b00      	cmp	r3, #0
 800275a:	d036      	beq.n	80027ca <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	699b      	ldr	r3, [r3, #24]
 8002760:	2b00      	cmp	r3, #0
 8002762:	d019      	beq.n	8002798 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002764:	4b37      	ldr	r3, [pc, #220]	@ (8002844 <HAL_RCC_OscConfig+0x4a4>)
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	4a36      	ldr	r2, [pc, #216]	@ (8002844 <HAL_RCC_OscConfig+0x4a4>)
 800276a:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800276e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002770:	f7ff fae6 	bl	8001d40 <HAL_GetTick>
 8002774:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002776:	e008      	b.n	800278a <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002778:	f7ff fae2 	bl	8001d40 <HAL_GetTick>
 800277c:	4602      	mov	r2, r0
 800277e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002780:	1ad3      	subs	r3, r2, r3
 8002782:	2b02      	cmp	r3, #2
 8002784:	d901      	bls.n	800278a <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 8002786:	2303      	movs	r3, #3
 8002788:	e1dc      	b.n	8002b44 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800278a:	4b2e      	ldr	r3, [pc, #184]	@ (8002844 <HAL_RCC_OscConfig+0x4a4>)
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002792:	2b00      	cmp	r3, #0
 8002794:	d0f0      	beq.n	8002778 <HAL_RCC_OscConfig+0x3d8>
 8002796:	e018      	b.n	80027ca <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002798:	4b2a      	ldr	r3, [pc, #168]	@ (8002844 <HAL_RCC_OscConfig+0x4a4>)
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	4a29      	ldr	r2, [pc, #164]	@ (8002844 <HAL_RCC_OscConfig+0x4a4>)
 800279e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80027a2:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80027a4:	f7ff facc 	bl	8001d40 <HAL_GetTick>
 80027a8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80027aa:	e008      	b.n	80027be <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80027ac:	f7ff fac8 	bl	8001d40 <HAL_GetTick>
 80027b0:	4602      	mov	r2, r0
 80027b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027b4:	1ad3      	subs	r3, r2, r3
 80027b6:	2b02      	cmp	r3, #2
 80027b8:	d901      	bls.n	80027be <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 80027ba:	2303      	movs	r3, #3
 80027bc:	e1c2      	b.n	8002b44 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80027be:	4b21      	ldr	r3, [pc, #132]	@ (8002844 <HAL_RCC_OscConfig+0x4a4>)
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d1f0      	bne.n	80027ac <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	f003 0304 	and.w	r3, r3, #4
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	f000 8086 	beq.w	80028e4 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80027d8:	4b1b      	ldr	r3, [pc, #108]	@ (8002848 <HAL_RCC_OscConfig+0x4a8>)
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	4a1a      	ldr	r2, [pc, #104]	@ (8002848 <HAL_RCC_OscConfig+0x4a8>)
 80027de:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80027e2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80027e4:	f7ff faac 	bl	8001d40 <HAL_GetTick>
 80027e8:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80027ea:	e008      	b.n	80027fe <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80027ec:	f7ff faa8 	bl	8001d40 <HAL_GetTick>
 80027f0:	4602      	mov	r2, r0
 80027f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027f4:	1ad3      	subs	r3, r2, r3
 80027f6:	2b64      	cmp	r3, #100	@ 0x64
 80027f8:	d901      	bls.n	80027fe <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 80027fa:	2303      	movs	r3, #3
 80027fc:	e1a2      	b.n	8002b44 <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80027fe:	4b12      	ldr	r3, [pc, #72]	@ (8002848 <HAL_RCC_OscConfig+0x4a8>)
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002806:	2b00      	cmp	r3, #0
 8002808:	d0f0      	beq.n	80027ec <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	689b      	ldr	r3, [r3, #8]
 800280e:	2b01      	cmp	r3, #1
 8002810:	d106      	bne.n	8002820 <HAL_RCC_OscConfig+0x480>
 8002812:	4b0c      	ldr	r3, [pc, #48]	@ (8002844 <HAL_RCC_OscConfig+0x4a4>)
 8002814:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002816:	4a0b      	ldr	r2, [pc, #44]	@ (8002844 <HAL_RCC_OscConfig+0x4a4>)
 8002818:	f043 0301 	orr.w	r3, r3, #1
 800281c:	6713      	str	r3, [r2, #112]	@ 0x70
 800281e:	e032      	b.n	8002886 <HAL_RCC_OscConfig+0x4e6>
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	689b      	ldr	r3, [r3, #8]
 8002824:	2b00      	cmp	r3, #0
 8002826:	d111      	bne.n	800284c <HAL_RCC_OscConfig+0x4ac>
 8002828:	4b06      	ldr	r3, [pc, #24]	@ (8002844 <HAL_RCC_OscConfig+0x4a4>)
 800282a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800282c:	4a05      	ldr	r2, [pc, #20]	@ (8002844 <HAL_RCC_OscConfig+0x4a4>)
 800282e:	f023 0301 	bic.w	r3, r3, #1
 8002832:	6713      	str	r3, [r2, #112]	@ 0x70
 8002834:	4b03      	ldr	r3, [pc, #12]	@ (8002844 <HAL_RCC_OscConfig+0x4a4>)
 8002836:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002838:	4a02      	ldr	r2, [pc, #8]	@ (8002844 <HAL_RCC_OscConfig+0x4a4>)
 800283a:	f023 0304 	bic.w	r3, r3, #4
 800283e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002840:	e021      	b.n	8002886 <HAL_RCC_OscConfig+0x4e6>
 8002842:	bf00      	nop
 8002844:	58024400 	.word	0x58024400
 8002848:	58024800 	.word	0x58024800
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	689b      	ldr	r3, [r3, #8]
 8002850:	2b05      	cmp	r3, #5
 8002852:	d10c      	bne.n	800286e <HAL_RCC_OscConfig+0x4ce>
 8002854:	4b83      	ldr	r3, [pc, #524]	@ (8002a64 <HAL_RCC_OscConfig+0x6c4>)
 8002856:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002858:	4a82      	ldr	r2, [pc, #520]	@ (8002a64 <HAL_RCC_OscConfig+0x6c4>)
 800285a:	f043 0304 	orr.w	r3, r3, #4
 800285e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002860:	4b80      	ldr	r3, [pc, #512]	@ (8002a64 <HAL_RCC_OscConfig+0x6c4>)
 8002862:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002864:	4a7f      	ldr	r2, [pc, #508]	@ (8002a64 <HAL_RCC_OscConfig+0x6c4>)
 8002866:	f043 0301 	orr.w	r3, r3, #1
 800286a:	6713      	str	r3, [r2, #112]	@ 0x70
 800286c:	e00b      	b.n	8002886 <HAL_RCC_OscConfig+0x4e6>
 800286e:	4b7d      	ldr	r3, [pc, #500]	@ (8002a64 <HAL_RCC_OscConfig+0x6c4>)
 8002870:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002872:	4a7c      	ldr	r2, [pc, #496]	@ (8002a64 <HAL_RCC_OscConfig+0x6c4>)
 8002874:	f023 0301 	bic.w	r3, r3, #1
 8002878:	6713      	str	r3, [r2, #112]	@ 0x70
 800287a:	4b7a      	ldr	r3, [pc, #488]	@ (8002a64 <HAL_RCC_OscConfig+0x6c4>)
 800287c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800287e:	4a79      	ldr	r2, [pc, #484]	@ (8002a64 <HAL_RCC_OscConfig+0x6c4>)
 8002880:	f023 0304 	bic.w	r3, r3, #4
 8002884:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	689b      	ldr	r3, [r3, #8]
 800288a:	2b00      	cmp	r3, #0
 800288c:	d015      	beq.n	80028ba <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800288e:	f7ff fa57 	bl	8001d40 <HAL_GetTick>
 8002892:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002894:	e00a      	b.n	80028ac <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002896:	f7ff fa53 	bl	8001d40 <HAL_GetTick>
 800289a:	4602      	mov	r2, r0
 800289c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800289e:	1ad3      	subs	r3, r2, r3
 80028a0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80028a4:	4293      	cmp	r3, r2
 80028a6:	d901      	bls.n	80028ac <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 80028a8:	2303      	movs	r3, #3
 80028aa:	e14b      	b.n	8002b44 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80028ac:	4b6d      	ldr	r3, [pc, #436]	@ (8002a64 <HAL_RCC_OscConfig+0x6c4>)
 80028ae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80028b0:	f003 0302 	and.w	r3, r3, #2
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d0ee      	beq.n	8002896 <HAL_RCC_OscConfig+0x4f6>
 80028b8:	e014      	b.n	80028e4 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028ba:	f7ff fa41 	bl	8001d40 <HAL_GetTick>
 80028be:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80028c0:	e00a      	b.n	80028d8 <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80028c2:	f7ff fa3d 	bl	8001d40 <HAL_GetTick>
 80028c6:	4602      	mov	r2, r0
 80028c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028ca:	1ad3      	subs	r3, r2, r3
 80028cc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80028d0:	4293      	cmp	r3, r2
 80028d2:	d901      	bls.n	80028d8 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 80028d4:	2303      	movs	r3, #3
 80028d6:	e135      	b.n	8002b44 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80028d8:	4b62      	ldr	r3, [pc, #392]	@ (8002a64 <HAL_RCC_OscConfig+0x6c4>)
 80028da:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80028dc:	f003 0302 	and.w	r3, r3, #2
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d1ee      	bne.n	80028c2 <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	f000 812a 	beq.w	8002b42 <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80028ee:	4b5d      	ldr	r3, [pc, #372]	@ (8002a64 <HAL_RCC_OscConfig+0x6c4>)
 80028f0:	691b      	ldr	r3, [r3, #16]
 80028f2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80028f6:	2b18      	cmp	r3, #24
 80028f8:	f000 80ba 	beq.w	8002a70 <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002900:	2b02      	cmp	r3, #2
 8002902:	f040 8095 	bne.w	8002a30 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002906:	4b57      	ldr	r3, [pc, #348]	@ (8002a64 <HAL_RCC_OscConfig+0x6c4>)
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	4a56      	ldr	r2, [pc, #344]	@ (8002a64 <HAL_RCC_OscConfig+0x6c4>)
 800290c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002910:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002912:	f7ff fa15 	bl	8001d40 <HAL_GetTick>
 8002916:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002918:	e008      	b.n	800292c <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800291a:	f7ff fa11 	bl	8001d40 <HAL_GetTick>
 800291e:	4602      	mov	r2, r0
 8002920:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002922:	1ad3      	subs	r3, r2, r3
 8002924:	2b02      	cmp	r3, #2
 8002926:	d901      	bls.n	800292c <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 8002928:	2303      	movs	r3, #3
 800292a:	e10b      	b.n	8002b44 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800292c:	4b4d      	ldr	r3, [pc, #308]	@ (8002a64 <HAL_RCC_OscConfig+0x6c4>)
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002934:	2b00      	cmp	r3, #0
 8002936:	d1f0      	bne.n	800291a <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002938:	4b4a      	ldr	r3, [pc, #296]	@ (8002a64 <HAL_RCC_OscConfig+0x6c4>)
 800293a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800293c:	4b4a      	ldr	r3, [pc, #296]	@ (8002a68 <HAL_RCC_OscConfig+0x6c8>)
 800293e:	4013      	ands	r3, r2
 8002940:	687a      	ldr	r2, [r7, #4]
 8002942:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8002944:	687a      	ldr	r2, [r7, #4]
 8002946:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8002948:	0112      	lsls	r2, r2, #4
 800294a:	430a      	orrs	r2, r1
 800294c:	4945      	ldr	r1, [pc, #276]	@ (8002a64 <HAL_RCC_OscConfig+0x6c4>)
 800294e:	4313      	orrs	r3, r2
 8002950:	628b      	str	r3, [r1, #40]	@ 0x28
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002956:	3b01      	subs	r3, #1
 8002958:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002960:	3b01      	subs	r3, #1
 8002962:	025b      	lsls	r3, r3, #9
 8002964:	b29b      	uxth	r3, r3
 8002966:	431a      	orrs	r2, r3
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800296c:	3b01      	subs	r3, #1
 800296e:	041b      	lsls	r3, r3, #16
 8002970:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8002974:	431a      	orrs	r2, r3
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800297a:	3b01      	subs	r3, #1
 800297c:	061b      	lsls	r3, r3, #24
 800297e:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8002982:	4938      	ldr	r1, [pc, #224]	@ (8002a64 <HAL_RCC_OscConfig+0x6c4>)
 8002984:	4313      	orrs	r3, r2
 8002986:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8002988:	4b36      	ldr	r3, [pc, #216]	@ (8002a64 <HAL_RCC_OscConfig+0x6c4>)
 800298a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800298c:	4a35      	ldr	r2, [pc, #212]	@ (8002a64 <HAL_RCC_OscConfig+0x6c4>)
 800298e:	f023 0301 	bic.w	r3, r3, #1
 8002992:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002994:	4b33      	ldr	r3, [pc, #204]	@ (8002a64 <HAL_RCC_OscConfig+0x6c4>)
 8002996:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002998:	4b34      	ldr	r3, [pc, #208]	@ (8002a6c <HAL_RCC_OscConfig+0x6cc>)
 800299a:	4013      	ands	r3, r2
 800299c:	687a      	ldr	r2, [r7, #4]
 800299e:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80029a0:	00d2      	lsls	r2, r2, #3
 80029a2:	4930      	ldr	r1, [pc, #192]	@ (8002a64 <HAL_RCC_OscConfig+0x6c4>)
 80029a4:	4313      	orrs	r3, r2
 80029a6:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80029a8:	4b2e      	ldr	r3, [pc, #184]	@ (8002a64 <HAL_RCC_OscConfig+0x6c4>)
 80029aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029ac:	f023 020c 	bic.w	r2, r3, #12
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029b4:	492b      	ldr	r1, [pc, #172]	@ (8002a64 <HAL_RCC_OscConfig+0x6c4>)
 80029b6:	4313      	orrs	r3, r2
 80029b8:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80029ba:	4b2a      	ldr	r3, [pc, #168]	@ (8002a64 <HAL_RCC_OscConfig+0x6c4>)
 80029bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029be:	f023 0202 	bic.w	r2, r3, #2
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029c6:	4927      	ldr	r1, [pc, #156]	@ (8002a64 <HAL_RCC_OscConfig+0x6c4>)
 80029c8:	4313      	orrs	r3, r2
 80029ca:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80029cc:	4b25      	ldr	r3, [pc, #148]	@ (8002a64 <HAL_RCC_OscConfig+0x6c4>)
 80029ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029d0:	4a24      	ldr	r2, [pc, #144]	@ (8002a64 <HAL_RCC_OscConfig+0x6c4>)
 80029d2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80029d6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80029d8:	4b22      	ldr	r3, [pc, #136]	@ (8002a64 <HAL_RCC_OscConfig+0x6c4>)
 80029da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029dc:	4a21      	ldr	r2, [pc, #132]	@ (8002a64 <HAL_RCC_OscConfig+0x6c4>)
 80029de:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80029e2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80029e4:	4b1f      	ldr	r3, [pc, #124]	@ (8002a64 <HAL_RCC_OscConfig+0x6c4>)
 80029e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029e8:	4a1e      	ldr	r2, [pc, #120]	@ (8002a64 <HAL_RCC_OscConfig+0x6c4>)
 80029ea:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80029ee:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 80029f0:	4b1c      	ldr	r3, [pc, #112]	@ (8002a64 <HAL_RCC_OscConfig+0x6c4>)
 80029f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029f4:	4a1b      	ldr	r2, [pc, #108]	@ (8002a64 <HAL_RCC_OscConfig+0x6c4>)
 80029f6:	f043 0301 	orr.w	r3, r3, #1
 80029fa:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80029fc:	4b19      	ldr	r3, [pc, #100]	@ (8002a64 <HAL_RCC_OscConfig+0x6c4>)
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	4a18      	ldr	r2, [pc, #96]	@ (8002a64 <HAL_RCC_OscConfig+0x6c4>)
 8002a02:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002a06:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a08:	f7ff f99a 	bl	8001d40 <HAL_GetTick>
 8002a0c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002a0e:	e008      	b.n	8002a22 <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a10:	f7ff f996 	bl	8001d40 <HAL_GetTick>
 8002a14:	4602      	mov	r2, r0
 8002a16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a18:	1ad3      	subs	r3, r2, r3
 8002a1a:	2b02      	cmp	r3, #2
 8002a1c:	d901      	bls.n	8002a22 <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 8002a1e:	2303      	movs	r3, #3
 8002a20:	e090      	b.n	8002b44 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002a22:	4b10      	ldr	r3, [pc, #64]	@ (8002a64 <HAL_RCC_OscConfig+0x6c4>)
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d0f0      	beq.n	8002a10 <HAL_RCC_OscConfig+0x670>
 8002a2e:	e088      	b.n	8002b42 <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a30:	4b0c      	ldr	r3, [pc, #48]	@ (8002a64 <HAL_RCC_OscConfig+0x6c4>)
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	4a0b      	ldr	r2, [pc, #44]	@ (8002a64 <HAL_RCC_OscConfig+0x6c4>)
 8002a36:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002a3a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a3c:	f7ff f980 	bl	8001d40 <HAL_GetTick>
 8002a40:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002a42:	e008      	b.n	8002a56 <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a44:	f7ff f97c 	bl	8001d40 <HAL_GetTick>
 8002a48:	4602      	mov	r2, r0
 8002a4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a4c:	1ad3      	subs	r3, r2, r3
 8002a4e:	2b02      	cmp	r3, #2
 8002a50:	d901      	bls.n	8002a56 <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 8002a52:	2303      	movs	r3, #3
 8002a54:	e076      	b.n	8002b44 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002a56:	4b03      	ldr	r3, [pc, #12]	@ (8002a64 <HAL_RCC_OscConfig+0x6c4>)
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d1f0      	bne.n	8002a44 <HAL_RCC_OscConfig+0x6a4>
 8002a62:	e06e      	b.n	8002b42 <HAL_RCC_OscConfig+0x7a2>
 8002a64:	58024400 	.word	0x58024400
 8002a68:	fffffc0c 	.word	0xfffffc0c
 8002a6c:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8002a70:	4b36      	ldr	r3, [pc, #216]	@ (8002b4c <HAL_RCC_OscConfig+0x7ac>)
 8002a72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a74:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8002a76:	4b35      	ldr	r3, [pc, #212]	@ (8002b4c <HAL_RCC_OscConfig+0x7ac>)
 8002a78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a7a:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a80:	2b01      	cmp	r3, #1
 8002a82:	d031      	beq.n	8002ae8 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a84:	693b      	ldr	r3, [r7, #16]
 8002a86:	f003 0203 	and.w	r2, r3, #3
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002a8e:	429a      	cmp	r2, r3
 8002a90:	d12a      	bne.n	8002ae8 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002a92:	693b      	ldr	r3, [r7, #16]
 8002a94:	091b      	lsrs	r3, r3, #4
 8002a96:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a9e:	429a      	cmp	r2, r3
 8002aa0:	d122      	bne.n	8002ae8 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002aac:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002aae:	429a      	cmp	r2, r3
 8002ab0:	d11a      	bne.n	8002ae8 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	0a5b      	lsrs	r3, r3, #9
 8002ab6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002abe:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002ac0:	429a      	cmp	r2, r3
 8002ac2:	d111      	bne.n	8002ae8 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	0c1b      	lsrs	r3, r3, #16
 8002ac8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ad0:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002ad2:	429a      	cmp	r2, r3
 8002ad4:	d108      	bne.n	8002ae8 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	0e1b      	lsrs	r3, r3, #24
 8002ada:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ae2:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002ae4:	429a      	cmp	r2, r3
 8002ae6:	d001      	beq.n	8002aec <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 8002ae8:	2301      	movs	r3, #1
 8002aea:	e02b      	b.n	8002b44 <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8002aec:	4b17      	ldr	r3, [pc, #92]	@ (8002b4c <HAL_RCC_OscConfig+0x7ac>)
 8002aee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002af0:	08db      	lsrs	r3, r3, #3
 8002af2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002af6:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002afc:	693a      	ldr	r2, [r7, #16]
 8002afe:	429a      	cmp	r2, r3
 8002b00:	d01f      	beq.n	8002b42 <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8002b02:	4b12      	ldr	r3, [pc, #72]	@ (8002b4c <HAL_RCC_OscConfig+0x7ac>)
 8002b04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b06:	4a11      	ldr	r2, [pc, #68]	@ (8002b4c <HAL_RCC_OscConfig+0x7ac>)
 8002b08:	f023 0301 	bic.w	r3, r3, #1
 8002b0c:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002b0e:	f7ff f917 	bl	8001d40 <HAL_GetTick>
 8002b12:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8002b14:	bf00      	nop
 8002b16:	f7ff f913 	bl	8001d40 <HAL_GetTick>
 8002b1a:	4602      	mov	r2, r0
 8002b1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b1e:	4293      	cmp	r3, r2
 8002b20:	d0f9      	beq.n	8002b16 <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002b22:	4b0a      	ldr	r3, [pc, #40]	@ (8002b4c <HAL_RCC_OscConfig+0x7ac>)
 8002b24:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002b26:	4b0a      	ldr	r3, [pc, #40]	@ (8002b50 <HAL_RCC_OscConfig+0x7b0>)
 8002b28:	4013      	ands	r3, r2
 8002b2a:	687a      	ldr	r2, [r7, #4]
 8002b2c:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002b2e:	00d2      	lsls	r2, r2, #3
 8002b30:	4906      	ldr	r1, [pc, #24]	@ (8002b4c <HAL_RCC_OscConfig+0x7ac>)
 8002b32:	4313      	orrs	r3, r2
 8002b34:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8002b36:	4b05      	ldr	r3, [pc, #20]	@ (8002b4c <HAL_RCC_OscConfig+0x7ac>)
 8002b38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b3a:	4a04      	ldr	r2, [pc, #16]	@ (8002b4c <HAL_RCC_OscConfig+0x7ac>)
 8002b3c:	f043 0301 	orr.w	r3, r3, #1
 8002b40:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8002b42:	2300      	movs	r3, #0
}
 8002b44:	4618      	mov	r0, r3
 8002b46:	3730      	adds	r7, #48	@ 0x30
 8002b48:	46bd      	mov	sp, r7
 8002b4a:	bd80      	pop	{r7, pc}
 8002b4c:	58024400 	.word	0x58024400
 8002b50:	ffff0007 	.word	0xffff0007

08002b54 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002b54:	b580      	push	{r7, lr}
 8002b56:	b086      	sub	sp, #24
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	6078      	str	r0, [r7, #4]
 8002b5c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d101      	bne.n	8002b68 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002b64:	2301      	movs	r3, #1
 8002b66:	e19c      	b.n	8002ea2 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002b68:	4b8a      	ldr	r3, [pc, #552]	@ (8002d94 <HAL_RCC_ClockConfig+0x240>)
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	f003 030f 	and.w	r3, r3, #15
 8002b70:	683a      	ldr	r2, [r7, #0]
 8002b72:	429a      	cmp	r2, r3
 8002b74:	d910      	bls.n	8002b98 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b76:	4b87      	ldr	r3, [pc, #540]	@ (8002d94 <HAL_RCC_ClockConfig+0x240>)
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f023 020f 	bic.w	r2, r3, #15
 8002b7e:	4985      	ldr	r1, [pc, #532]	@ (8002d94 <HAL_RCC_ClockConfig+0x240>)
 8002b80:	683b      	ldr	r3, [r7, #0]
 8002b82:	4313      	orrs	r3, r2
 8002b84:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b86:	4b83      	ldr	r3, [pc, #524]	@ (8002d94 <HAL_RCC_ClockConfig+0x240>)
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f003 030f 	and.w	r3, r3, #15
 8002b8e:	683a      	ldr	r2, [r7, #0]
 8002b90:	429a      	cmp	r2, r3
 8002b92:	d001      	beq.n	8002b98 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002b94:	2301      	movs	r3, #1
 8002b96:	e184      	b.n	8002ea2 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f003 0304 	and.w	r3, r3, #4
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d010      	beq.n	8002bc6 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	691a      	ldr	r2, [r3, #16]
 8002ba8:	4b7b      	ldr	r3, [pc, #492]	@ (8002d98 <HAL_RCC_ClockConfig+0x244>)
 8002baa:	699b      	ldr	r3, [r3, #24]
 8002bac:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002bb0:	429a      	cmp	r2, r3
 8002bb2:	d908      	bls.n	8002bc6 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002bb4:	4b78      	ldr	r3, [pc, #480]	@ (8002d98 <HAL_RCC_ClockConfig+0x244>)
 8002bb6:	699b      	ldr	r3, [r3, #24]
 8002bb8:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	691b      	ldr	r3, [r3, #16]
 8002bc0:	4975      	ldr	r1, [pc, #468]	@ (8002d98 <HAL_RCC_ClockConfig+0x244>)
 8002bc2:	4313      	orrs	r3, r2
 8002bc4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f003 0308 	and.w	r3, r3, #8
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d010      	beq.n	8002bf4 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	695a      	ldr	r2, [r3, #20]
 8002bd6:	4b70      	ldr	r3, [pc, #448]	@ (8002d98 <HAL_RCC_ClockConfig+0x244>)
 8002bd8:	69db      	ldr	r3, [r3, #28]
 8002bda:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002bde:	429a      	cmp	r2, r3
 8002be0:	d908      	bls.n	8002bf4 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002be2:	4b6d      	ldr	r3, [pc, #436]	@ (8002d98 <HAL_RCC_ClockConfig+0x244>)
 8002be4:	69db      	ldr	r3, [r3, #28]
 8002be6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	695b      	ldr	r3, [r3, #20]
 8002bee:	496a      	ldr	r1, [pc, #424]	@ (8002d98 <HAL_RCC_ClockConfig+0x244>)
 8002bf0:	4313      	orrs	r3, r2
 8002bf2:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	f003 0310 	and.w	r3, r3, #16
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d010      	beq.n	8002c22 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	699a      	ldr	r2, [r3, #24]
 8002c04:	4b64      	ldr	r3, [pc, #400]	@ (8002d98 <HAL_RCC_ClockConfig+0x244>)
 8002c06:	69db      	ldr	r3, [r3, #28]
 8002c08:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002c0c:	429a      	cmp	r2, r3
 8002c0e:	d908      	bls.n	8002c22 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002c10:	4b61      	ldr	r3, [pc, #388]	@ (8002d98 <HAL_RCC_ClockConfig+0x244>)
 8002c12:	69db      	ldr	r3, [r3, #28]
 8002c14:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	699b      	ldr	r3, [r3, #24]
 8002c1c:	495e      	ldr	r1, [pc, #376]	@ (8002d98 <HAL_RCC_ClockConfig+0x244>)
 8002c1e:	4313      	orrs	r3, r2
 8002c20:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	f003 0320 	and.w	r3, r3, #32
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d010      	beq.n	8002c50 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	69da      	ldr	r2, [r3, #28]
 8002c32:	4b59      	ldr	r3, [pc, #356]	@ (8002d98 <HAL_RCC_ClockConfig+0x244>)
 8002c34:	6a1b      	ldr	r3, [r3, #32]
 8002c36:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002c3a:	429a      	cmp	r2, r3
 8002c3c:	d908      	bls.n	8002c50 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8002c3e:	4b56      	ldr	r3, [pc, #344]	@ (8002d98 <HAL_RCC_ClockConfig+0x244>)
 8002c40:	6a1b      	ldr	r3, [r3, #32]
 8002c42:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	69db      	ldr	r3, [r3, #28]
 8002c4a:	4953      	ldr	r1, [pc, #332]	@ (8002d98 <HAL_RCC_ClockConfig+0x244>)
 8002c4c:	4313      	orrs	r3, r2
 8002c4e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	f003 0302 	and.w	r3, r3, #2
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d010      	beq.n	8002c7e <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	68da      	ldr	r2, [r3, #12]
 8002c60:	4b4d      	ldr	r3, [pc, #308]	@ (8002d98 <HAL_RCC_ClockConfig+0x244>)
 8002c62:	699b      	ldr	r3, [r3, #24]
 8002c64:	f003 030f 	and.w	r3, r3, #15
 8002c68:	429a      	cmp	r2, r3
 8002c6a:	d908      	bls.n	8002c7e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002c6c:	4b4a      	ldr	r3, [pc, #296]	@ (8002d98 <HAL_RCC_ClockConfig+0x244>)
 8002c6e:	699b      	ldr	r3, [r3, #24]
 8002c70:	f023 020f 	bic.w	r2, r3, #15
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	68db      	ldr	r3, [r3, #12]
 8002c78:	4947      	ldr	r1, [pc, #284]	@ (8002d98 <HAL_RCC_ClockConfig+0x244>)
 8002c7a:	4313      	orrs	r3, r2
 8002c7c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f003 0301 	and.w	r3, r3, #1
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d055      	beq.n	8002d36 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8002c8a:	4b43      	ldr	r3, [pc, #268]	@ (8002d98 <HAL_RCC_ClockConfig+0x244>)
 8002c8c:	699b      	ldr	r3, [r3, #24]
 8002c8e:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	689b      	ldr	r3, [r3, #8]
 8002c96:	4940      	ldr	r1, [pc, #256]	@ (8002d98 <HAL_RCC_ClockConfig+0x244>)
 8002c98:	4313      	orrs	r3, r2
 8002c9a:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	685b      	ldr	r3, [r3, #4]
 8002ca0:	2b02      	cmp	r3, #2
 8002ca2:	d107      	bne.n	8002cb4 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002ca4:	4b3c      	ldr	r3, [pc, #240]	@ (8002d98 <HAL_RCC_ClockConfig+0x244>)
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d121      	bne.n	8002cf4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002cb0:	2301      	movs	r3, #1
 8002cb2:	e0f6      	b.n	8002ea2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	685b      	ldr	r3, [r3, #4]
 8002cb8:	2b03      	cmp	r3, #3
 8002cba:	d107      	bne.n	8002ccc <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002cbc:	4b36      	ldr	r3, [pc, #216]	@ (8002d98 <HAL_RCC_ClockConfig+0x244>)
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d115      	bne.n	8002cf4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002cc8:	2301      	movs	r3, #1
 8002cca:	e0ea      	b.n	8002ea2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	685b      	ldr	r3, [r3, #4]
 8002cd0:	2b01      	cmp	r3, #1
 8002cd2:	d107      	bne.n	8002ce4 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002cd4:	4b30      	ldr	r3, [pc, #192]	@ (8002d98 <HAL_RCC_ClockConfig+0x244>)
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d109      	bne.n	8002cf4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002ce0:	2301      	movs	r3, #1
 8002ce2:	e0de      	b.n	8002ea2 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002ce4:	4b2c      	ldr	r3, [pc, #176]	@ (8002d98 <HAL_RCC_ClockConfig+0x244>)
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	f003 0304 	and.w	r3, r3, #4
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d101      	bne.n	8002cf4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002cf0:	2301      	movs	r3, #1
 8002cf2:	e0d6      	b.n	8002ea2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002cf4:	4b28      	ldr	r3, [pc, #160]	@ (8002d98 <HAL_RCC_ClockConfig+0x244>)
 8002cf6:	691b      	ldr	r3, [r3, #16]
 8002cf8:	f023 0207 	bic.w	r2, r3, #7
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	685b      	ldr	r3, [r3, #4]
 8002d00:	4925      	ldr	r1, [pc, #148]	@ (8002d98 <HAL_RCC_ClockConfig+0x244>)
 8002d02:	4313      	orrs	r3, r2
 8002d04:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002d06:	f7ff f81b 	bl	8001d40 <HAL_GetTick>
 8002d0a:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d0c:	e00a      	b.n	8002d24 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d0e:	f7ff f817 	bl	8001d40 <HAL_GetTick>
 8002d12:	4602      	mov	r2, r0
 8002d14:	697b      	ldr	r3, [r7, #20]
 8002d16:	1ad3      	subs	r3, r2, r3
 8002d18:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002d1c:	4293      	cmp	r3, r2
 8002d1e:	d901      	bls.n	8002d24 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8002d20:	2303      	movs	r3, #3
 8002d22:	e0be      	b.n	8002ea2 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d24:	4b1c      	ldr	r3, [pc, #112]	@ (8002d98 <HAL_RCC_ClockConfig+0x244>)
 8002d26:	691b      	ldr	r3, [r3, #16]
 8002d28:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	685b      	ldr	r3, [r3, #4]
 8002d30:	00db      	lsls	r3, r3, #3
 8002d32:	429a      	cmp	r2, r3
 8002d34:	d1eb      	bne.n	8002d0e <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f003 0302 	and.w	r3, r3, #2
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d010      	beq.n	8002d64 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	68da      	ldr	r2, [r3, #12]
 8002d46:	4b14      	ldr	r3, [pc, #80]	@ (8002d98 <HAL_RCC_ClockConfig+0x244>)
 8002d48:	699b      	ldr	r3, [r3, #24]
 8002d4a:	f003 030f 	and.w	r3, r3, #15
 8002d4e:	429a      	cmp	r2, r3
 8002d50:	d208      	bcs.n	8002d64 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002d52:	4b11      	ldr	r3, [pc, #68]	@ (8002d98 <HAL_RCC_ClockConfig+0x244>)
 8002d54:	699b      	ldr	r3, [r3, #24]
 8002d56:	f023 020f 	bic.w	r2, r3, #15
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	68db      	ldr	r3, [r3, #12]
 8002d5e:	490e      	ldr	r1, [pc, #56]	@ (8002d98 <HAL_RCC_ClockConfig+0x244>)
 8002d60:	4313      	orrs	r3, r2
 8002d62:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002d64:	4b0b      	ldr	r3, [pc, #44]	@ (8002d94 <HAL_RCC_ClockConfig+0x240>)
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	f003 030f 	and.w	r3, r3, #15
 8002d6c:	683a      	ldr	r2, [r7, #0]
 8002d6e:	429a      	cmp	r2, r3
 8002d70:	d214      	bcs.n	8002d9c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d72:	4b08      	ldr	r3, [pc, #32]	@ (8002d94 <HAL_RCC_ClockConfig+0x240>)
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f023 020f 	bic.w	r2, r3, #15
 8002d7a:	4906      	ldr	r1, [pc, #24]	@ (8002d94 <HAL_RCC_ClockConfig+0x240>)
 8002d7c:	683b      	ldr	r3, [r7, #0]
 8002d7e:	4313      	orrs	r3, r2
 8002d80:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d82:	4b04      	ldr	r3, [pc, #16]	@ (8002d94 <HAL_RCC_ClockConfig+0x240>)
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	f003 030f 	and.w	r3, r3, #15
 8002d8a:	683a      	ldr	r2, [r7, #0]
 8002d8c:	429a      	cmp	r2, r3
 8002d8e:	d005      	beq.n	8002d9c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8002d90:	2301      	movs	r3, #1
 8002d92:	e086      	b.n	8002ea2 <HAL_RCC_ClockConfig+0x34e>
 8002d94:	52002000 	.word	0x52002000
 8002d98:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	f003 0304 	and.w	r3, r3, #4
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d010      	beq.n	8002dca <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	691a      	ldr	r2, [r3, #16]
 8002dac:	4b3f      	ldr	r3, [pc, #252]	@ (8002eac <HAL_RCC_ClockConfig+0x358>)
 8002dae:	699b      	ldr	r3, [r3, #24]
 8002db0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002db4:	429a      	cmp	r2, r3
 8002db6:	d208      	bcs.n	8002dca <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002db8:	4b3c      	ldr	r3, [pc, #240]	@ (8002eac <HAL_RCC_ClockConfig+0x358>)
 8002dba:	699b      	ldr	r3, [r3, #24]
 8002dbc:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	691b      	ldr	r3, [r3, #16]
 8002dc4:	4939      	ldr	r1, [pc, #228]	@ (8002eac <HAL_RCC_ClockConfig+0x358>)
 8002dc6:	4313      	orrs	r3, r2
 8002dc8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f003 0308 	and.w	r3, r3, #8
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d010      	beq.n	8002df8 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	695a      	ldr	r2, [r3, #20]
 8002dda:	4b34      	ldr	r3, [pc, #208]	@ (8002eac <HAL_RCC_ClockConfig+0x358>)
 8002ddc:	69db      	ldr	r3, [r3, #28]
 8002dde:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002de2:	429a      	cmp	r2, r3
 8002de4:	d208      	bcs.n	8002df8 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002de6:	4b31      	ldr	r3, [pc, #196]	@ (8002eac <HAL_RCC_ClockConfig+0x358>)
 8002de8:	69db      	ldr	r3, [r3, #28]
 8002dea:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	695b      	ldr	r3, [r3, #20]
 8002df2:	492e      	ldr	r1, [pc, #184]	@ (8002eac <HAL_RCC_ClockConfig+0x358>)
 8002df4:	4313      	orrs	r3, r2
 8002df6:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	f003 0310 	and.w	r3, r3, #16
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d010      	beq.n	8002e26 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	699a      	ldr	r2, [r3, #24]
 8002e08:	4b28      	ldr	r3, [pc, #160]	@ (8002eac <HAL_RCC_ClockConfig+0x358>)
 8002e0a:	69db      	ldr	r3, [r3, #28]
 8002e0c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002e10:	429a      	cmp	r2, r3
 8002e12:	d208      	bcs.n	8002e26 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002e14:	4b25      	ldr	r3, [pc, #148]	@ (8002eac <HAL_RCC_ClockConfig+0x358>)
 8002e16:	69db      	ldr	r3, [r3, #28]
 8002e18:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	699b      	ldr	r3, [r3, #24]
 8002e20:	4922      	ldr	r1, [pc, #136]	@ (8002eac <HAL_RCC_ClockConfig+0x358>)
 8002e22:	4313      	orrs	r3, r2
 8002e24:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f003 0320 	and.w	r3, r3, #32
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d010      	beq.n	8002e54 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	69da      	ldr	r2, [r3, #28]
 8002e36:	4b1d      	ldr	r3, [pc, #116]	@ (8002eac <HAL_RCC_ClockConfig+0x358>)
 8002e38:	6a1b      	ldr	r3, [r3, #32]
 8002e3a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002e3e:	429a      	cmp	r2, r3
 8002e40:	d208      	bcs.n	8002e54 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8002e42:	4b1a      	ldr	r3, [pc, #104]	@ (8002eac <HAL_RCC_ClockConfig+0x358>)
 8002e44:	6a1b      	ldr	r3, [r3, #32]
 8002e46:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	69db      	ldr	r3, [r3, #28]
 8002e4e:	4917      	ldr	r1, [pc, #92]	@ (8002eac <HAL_RCC_ClockConfig+0x358>)
 8002e50:	4313      	orrs	r3, r2
 8002e52:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002e54:	f000 f834 	bl	8002ec0 <HAL_RCC_GetSysClockFreq>
 8002e58:	4602      	mov	r2, r0
 8002e5a:	4b14      	ldr	r3, [pc, #80]	@ (8002eac <HAL_RCC_ClockConfig+0x358>)
 8002e5c:	699b      	ldr	r3, [r3, #24]
 8002e5e:	0a1b      	lsrs	r3, r3, #8
 8002e60:	f003 030f 	and.w	r3, r3, #15
 8002e64:	4912      	ldr	r1, [pc, #72]	@ (8002eb0 <HAL_RCC_ClockConfig+0x35c>)
 8002e66:	5ccb      	ldrb	r3, [r1, r3]
 8002e68:	f003 031f 	and.w	r3, r3, #31
 8002e6c:	fa22 f303 	lsr.w	r3, r2, r3
 8002e70:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002e72:	4b0e      	ldr	r3, [pc, #56]	@ (8002eac <HAL_RCC_ClockConfig+0x358>)
 8002e74:	699b      	ldr	r3, [r3, #24]
 8002e76:	f003 030f 	and.w	r3, r3, #15
 8002e7a:	4a0d      	ldr	r2, [pc, #52]	@ (8002eb0 <HAL_RCC_ClockConfig+0x35c>)
 8002e7c:	5cd3      	ldrb	r3, [r2, r3]
 8002e7e:	f003 031f 	and.w	r3, r3, #31
 8002e82:	693a      	ldr	r2, [r7, #16]
 8002e84:	fa22 f303 	lsr.w	r3, r2, r3
 8002e88:	4a0a      	ldr	r2, [pc, #40]	@ (8002eb4 <HAL_RCC_ClockConfig+0x360>)
 8002e8a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002e8c:	4a0a      	ldr	r2, [pc, #40]	@ (8002eb8 <HAL_RCC_ClockConfig+0x364>)
 8002e8e:	693b      	ldr	r3, [r7, #16]
 8002e90:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8002e92:	4b0a      	ldr	r3, [pc, #40]	@ (8002ebc <HAL_RCC_ClockConfig+0x368>)
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	4618      	mov	r0, r3
 8002e98:	f7fe ff08 	bl	8001cac <HAL_InitTick>
 8002e9c:	4603      	mov	r3, r0
 8002e9e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8002ea0:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ea2:	4618      	mov	r0, r3
 8002ea4:	3718      	adds	r7, #24
 8002ea6:	46bd      	mov	sp, r7
 8002ea8:	bd80      	pop	{r7, pc}
 8002eaa:	bf00      	nop
 8002eac:	58024400 	.word	0x58024400
 8002eb0:	0801bb04 	.word	0x0801bb04
 8002eb4:	24000004 	.word	0x24000004
 8002eb8:	24000000 	.word	0x24000000
 8002ebc:	24000008 	.word	0x24000008

08002ec0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002ec0:	b480      	push	{r7}
 8002ec2:	b089      	sub	sp, #36	@ 0x24
 8002ec4:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002ec6:	4bb3      	ldr	r3, [pc, #716]	@ (8003194 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002ec8:	691b      	ldr	r3, [r3, #16]
 8002eca:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002ece:	2b18      	cmp	r3, #24
 8002ed0:	f200 8155 	bhi.w	800317e <HAL_RCC_GetSysClockFreq+0x2be>
 8002ed4:	a201      	add	r2, pc, #4	@ (adr r2, 8002edc <HAL_RCC_GetSysClockFreq+0x1c>)
 8002ed6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002eda:	bf00      	nop
 8002edc:	08002f41 	.word	0x08002f41
 8002ee0:	0800317f 	.word	0x0800317f
 8002ee4:	0800317f 	.word	0x0800317f
 8002ee8:	0800317f 	.word	0x0800317f
 8002eec:	0800317f 	.word	0x0800317f
 8002ef0:	0800317f 	.word	0x0800317f
 8002ef4:	0800317f 	.word	0x0800317f
 8002ef8:	0800317f 	.word	0x0800317f
 8002efc:	08002f67 	.word	0x08002f67
 8002f00:	0800317f 	.word	0x0800317f
 8002f04:	0800317f 	.word	0x0800317f
 8002f08:	0800317f 	.word	0x0800317f
 8002f0c:	0800317f 	.word	0x0800317f
 8002f10:	0800317f 	.word	0x0800317f
 8002f14:	0800317f 	.word	0x0800317f
 8002f18:	0800317f 	.word	0x0800317f
 8002f1c:	08002f6d 	.word	0x08002f6d
 8002f20:	0800317f 	.word	0x0800317f
 8002f24:	0800317f 	.word	0x0800317f
 8002f28:	0800317f 	.word	0x0800317f
 8002f2c:	0800317f 	.word	0x0800317f
 8002f30:	0800317f 	.word	0x0800317f
 8002f34:	0800317f 	.word	0x0800317f
 8002f38:	0800317f 	.word	0x0800317f
 8002f3c:	08002f73 	.word	0x08002f73
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002f40:	4b94      	ldr	r3, [pc, #592]	@ (8003194 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	f003 0320 	and.w	r3, r3, #32
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d009      	beq.n	8002f60 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002f4c:	4b91      	ldr	r3, [pc, #580]	@ (8003194 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	08db      	lsrs	r3, r3, #3
 8002f52:	f003 0303 	and.w	r3, r3, #3
 8002f56:	4a90      	ldr	r2, [pc, #576]	@ (8003198 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002f58:	fa22 f303 	lsr.w	r3, r2, r3
 8002f5c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8002f5e:	e111      	b.n	8003184 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8002f60:	4b8d      	ldr	r3, [pc, #564]	@ (8003198 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002f62:	61bb      	str	r3, [r7, #24]
      break;
 8002f64:	e10e      	b.n	8003184 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8002f66:	4b8d      	ldr	r3, [pc, #564]	@ (800319c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002f68:	61bb      	str	r3, [r7, #24]
      break;
 8002f6a:	e10b      	b.n	8003184 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8002f6c:	4b8c      	ldr	r3, [pc, #560]	@ (80031a0 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8002f6e:	61bb      	str	r3, [r7, #24]
      break;
 8002f70:	e108      	b.n	8003184 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8002f72:	4b88      	ldr	r3, [pc, #544]	@ (8003194 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002f74:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f76:	f003 0303 	and.w	r3, r3, #3
 8002f7a:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8002f7c:	4b85      	ldr	r3, [pc, #532]	@ (8003194 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002f7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f80:	091b      	lsrs	r3, r3, #4
 8002f82:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002f86:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8002f88:	4b82      	ldr	r3, [pc, #520]	@ (8003194 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002f8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f8c:	f003 0301 	and.w	r3, r3, #1
 8002f90:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8002f92:	4b80      	ldr	r3, [pc, #512]	@ (8003194 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002f94:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002f96:	08db      	lsrs	r3, r3, #3
 8002f98:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002f9c:	68fa      	ldr	r2, [r7, #12]
 8002f9e:	fb02 f303 	mul.w	r3, r2, r3
 8002fa2:	ee07 3a90 	vmov	s15, r3
 8002fa6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002faa:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8002fae:	693b      	ldr	r3, [r7, #16]
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	f000 80e1 	beq.w	8003178 <HAL_RCC_GetSysClockFreq+0x2b8>
 8002fb6:	697b      	ldr	r3, [r7, #20]
 8002fb8:	2b02      	cmp	r3, #2
 8002fba:	f000 8083 	beq.w	80030c4 <HAL_RCC_GetSysClockFreq+0x204>
 8002fbe:	697b      	ldr	r3, [r7, #20]
 8002fc0:	2b02      	cmp	r3, #2
 8002fc2:	f200 80a1 	bhi.w	8003108 <HAL_RCC_GetSysClockFreq+0x248>
 8002fc6:	697b      	ldr	r3, [r7, #20]
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d003      	beq.n	8002fd4 <HAL_RCC_GetSysClockFreq+0x114>
 8002fcc:	697b      	ldr	r3, [r7, #20]
 8002fce:	2b01      	cmp	r3, #1
 8002fd0:	d056      	beq.n	8003080 <HAL_RCC_GetSysClockFreq+0x1c0>
 8002fd2:	e099      	b.n	8003108 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002fd4:	4b6f      	ldr	r3, [pc, #444]	@ (8003194 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	f003 0320 	and.w	r3, r3, #32
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d02d      	beq.n	800303c <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002fe0:	4b6c      	ldr	r3, [pc, #432]	@ (8003194 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	08db      	lsrs	r3, r3, #3
 8002fe6:	f003 0303 	and.w	r3, r3, #3
 8002fea:	4a6b      	ldr	r2, [pc, #428]	@ (8003198 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002fec:	fa22 f303 	lsr.w	r3, r2, r3
 8002ff0:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	ee07 3a90 	vmov	s15, r3
 8002ff8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002ffc:	693b      	ldr	r3, [r7, #16]
 8002ffe:	ee07 3a90 	vmov	s15, r3
 8003002:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003006:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800300a:	4b62      	ldr	r3, [pc, #392]	@ (8003194 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800300c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800300e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003012:	ee07 3a90 	vmov	s15, r3
 8003016:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800301a:	ed97 6a02 	vldr	s12, [r7, #8]
 800301e:	eddf 5a61 	vldr	s11, [pc, #388]	@ 80031a4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003022:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003026:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800302a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800302e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003032:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003036:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800303a:	e087      	b.n	800314c <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800303c:	693b      	ldr	r3, [r7, #16]
 800303e:	ee07 3a90 	vmov	s15, r3
 8003042:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003046:	eddf 6a58 	vldr	s13, [pc, #352]	@ 80031a8 <HAL_RCC_GetSysClockFreq+0x2e8>
 800304a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800304e:	4b51      	ldr	r3, [pc, #324]	@ (8003194 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003050:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003052:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003056:	ee07 3a90 	vmov	s15, r3
 800305a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800305e:	ed97 6a02 	vldr	s12, [r7, #8]
 8003062:	eddf 5a50 	vldr	s11, [pc, #320]	@ 80031a4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003066:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800306a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800306e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003072:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003076:	ee67 7a27 	vmul.f32	s15, s14, s15
 800307a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800307e:	e065      	b.n	800314c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003080:	693b      	ldr	r3, [r7, #16]
 8003082:	ee07 3a90 	vmov	s15, r3
 8003086:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800308a:	eddf 6a48 	vldr	s13, [pc, #288]	@ 80031ac <HAL_RCC_GetSysClockFreq+0x2ec>
 800308e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003092:	4b40      	ldr	r3, [pc, #256]	@ (8003194 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003094:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003096:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800309a:	ee07 3a90 	vmov	s15, r3
 800309e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80030a2:	ed97 6a02 	vldr	s12, [r7, #8]
 80030a6:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 80031a4 <HAL_RCC_GetSysClockFreq+0x2e4>
 80030aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80030ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80030b2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80030b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80030ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80030be:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80030c2:	e043      	b.n	800314c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80030c4:	693b      	ldr	r3, [r7, #16]
 80030c6:	ee07 3a90 	vmov	s15, r3
 80030ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80030ce:	eddf 6a38 	vldr	s13, [pc, #224]	@ 80031b0 <HAL_RCC_GetSysClockFreq+0x2f0>
 80030d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80030d6:	4b2f      	ldr	r3, [pc, #188]	@ (8003194 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80030d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80030de:	ee07 3a90 	vmov	s15, r3
 80030e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80030e6:	ed97 6a02 	vldr	s12, [r7, #8]
 80030ea:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 80031a4 <HAL_RCC_GetSysClockFreq+0x2e4>
 80030ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80030f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80030f6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80030fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80030fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003102:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003106:	e021      	b.n	800314c <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003108:	693b      	ldr	r3, [r7, #16]
 800310a:	ee07 3a90 	vmov	s15, r3
 800310e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003112:	eddf 6a26 	vldr	s13, [pc, #152]	@ 80031ac <HAL_RCC_GetSysClockFreq+0x2ec>
 8003116:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800311a:	4b1e      	ldr	r3, [pc, #120]	@ (8003194 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800311c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800311e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003122:	ee07 3a90 	vmov	s15, r3
 8003126:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800312a:	ed97 6a02 	vldr	s12, [r7, #8]
 800312e:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 80031a4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003132:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003136:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800313a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800313e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003142:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003146:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800314a:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800314c:	4b11      	ldr	r3, [pc, #68]	@ (8003194 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800314e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003150:	0a5b      	lsrs	r3, r3, #9
 8003152:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003156:	3301      	adds	r3, #1
 8003158:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800315a:	683b      	ldr	r3, [r7, #0]
 800315c:	ee07 3a90 	vmov	s15, r3
 8003160:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003164:	edd7 6a07 	vldr	s13, [r7, #28]
 8003168:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800316c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003170:	ee17 3a90 	vmov	r3, s15
 8003174:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8003176:	e005      	b.n	8003184 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8003178:	2300      	movs	r3, #0
 800317a:	61bb      	str	r3, [r7, #24]
      break;
 800317c:	e002      	b.n	8003184 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800317e:	4b07      	ldr	r3, [pc, #28]	@ (800319c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003180:	61bb      	str	r3, [r7, #24]
      break;
 8003182:	bf00      	nop
  }

  return sysclockfreq;
 8003184:	69bb      	ldr	r3, [r7, #24]
}
 8003186:	4618      	mov	r0, r3
 8003188:	3724      	adds	r7, #36	@ 0x24
 800318a:	46bd      	mov	sp, r7
 800318c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003190:	4770      	bx	lr
 8003192:	bf00      	nop
 8003194:	58024400 	.word	0x58024400
 8003198:	03d09000 	.word	0x03d09000
 800319c:	003d0900 	.word	0x003d0900
 80031a0:	017d7840 	.word	0x017d7840
 80031a4:	46000000 	.word	0x46000000
 80031a8:	4c742400 	.word	0x4c742400
 80031ac:	4a742400 	.word	0x4a742400
 80031b0:	4bbebc20 	.word	0x4bbebc20

080031b4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80031b4:	b580      	push	{r7, lr}
 80031b6:	b082      	sub	sp, #8
 80031b8:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80031ba:	f7ff fe81 	bl	8002ec0 <HAL_RCC_GetSysClockFreq>
 80031be:	4602      	mov	r2, r0
 80031c0:	4b10      	ldr	r3, [pc, #64]	@ (8003204 <HAL_RCC_GetHCLKFreq+0x50>)
 80031c2:	699b      	ldr	r3, [r3, #24]
 80031c4:	0a1b      	lsrs	r3, r3, #8
 80031c6:	f003 030f 	and.w	r3, r3, #15
 80031ca:	490f      	ldr	r1, [pc, #60]	@ (8003208 <HAL_RCC_GetHCLKFreq+0x54>)
 80031cc:	5ccb      	ldrb	r3, [r1, r3]
 80031ce:	f003 031f 	and.w	r3, r3, #31
 80031d2:	fa22 f303 	lsr.w	r3, r2, r3
 80031d6:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80031d8:	4b0a      	ldr	r3, [pc, #40]	@ (8003204 <HAL_RCC_GetHCLKFreq+0x50>)
 80031da:	699b      	ldr	r3, [r3, #24]
 80031dc:	f003 030f 	and.w	r3, r3, #15
 80031e0:	4a09      	ldr	r2, [pc, #36]	@ (8003208 <HAL_RCC_GetHCLKFreq+0x54>)
 80031e2:	5cd3      	ldrb	r3, [r2, r3]
 80031e4:	f003 031f 	and.w	r3, r3, #31
 80031e8:	687a      	ldr	r2, [r7, #4]
 80031ea:	fa22 f303 	lsr.w	r3, r2, r3
 80031ee:	4a07      	ldr	r2, [pc, #28]	@ (800320c <HAL_RCC_GetHCLKFreq+0x58>)
 80031f0:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80031f2:	4a07      	ldr	r2, [pc, #28]	@ (8003210 <HAL_RCC_GetHCLKFreq+0x5c>)
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80031f8:	4b04      	ldr	r3, [pc, #16]	@ (800320c <HAL_RCC_GetHCLKFreq+0x58>)
 80031fa:	681b      	ldr	r3, [r3, #0]
}
 80031fc:	4618      	mov	r0, r3
 80031fe:	3708      	adds	r7, #8
 8003200:	46bd      	mov	sp, r7
 8003202:	bd80      	pop	{r7, pc}
 8003204:	58024400 	.word	0x58024400
 8003208:	0801bb04 	.word	0x0801bb04
 800320c:	24000004 	.word	0x24000004
 8003210:	24000000 	.word	0x24000000

08003214 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003214:	b580      	push	{r7, lr}
 8003216:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8003218:	f7ff ffcc 	bl	80031b4 <HAL_RCC_GetHCLKFreq>
 800321c:	4602      	mov	r2, r0
 800321e:	4b06      	ldr	r3, [pc, #24]	@ (8003238 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003220:	69db      	ldr	r3, [r3, #28]
 8003222:	091b      	lsrs	r3, r3, #4
 8003224:	f003 0307 	and.w	r3, r3, #7
 8003228:	4904      	ldr	r1, [pc, #16]	@ (800323c <HAL_RCC_GetPCLK1Freq+0x28>)
 800322a:	5ccb      	ldrb	r3, [r1, r3]
 800322c:	f003 031f 	and.w	r3, r3, #31
 8003230:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8003234:	4618      	mov	r0, r3
 8003236:	bd80      	pop	{r7, pc}
 8003238:	58024400 	.word	0x58024400
 800323c:	0801bb04 	.word	0x0801bb04

08003240 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003240:	b580      	push	{r7, lr}
 8003242:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8003244:	f7ff ffb6 	bl	80031b4 <HAL_RCC_GetHCLKFreq>
 8003248:	4602      	mov	r2, r0
 800324a:	4b06      	ldr	r3, [pc, #24]	@ (8003264 <HAL_RCC_GetPCLK2Freq+0x24>)
 800324c:	69db      	ldr	r3, [r3, #28]
 800324e:	0a1b      	lsrs	r3, r3, #8
 8003250:	f003 0307 	and.w	r3, r3, #7
 8003254:	4904      	ldr	r1, [pc, #16]	@ (8003268 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003256:	5ccb      	ldrb	r3, [r1, r3]
 8003258:	f003 031f 	and.w	r3, r3, #31
 800325c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8003260:	4618      	mov	r0, r3
 8003262:	bd80      	pop	{r7, pc}
 8003264:	58024400 	.word	0x58024400
 8003268:	0801bb04 	.word	0x0801bb04

0800326c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800326c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003270:	b0c6      	sub	sp, #280	@ 0x118
 8003272:	af00      	add	r7, sp, #0
 8003274:	f8c7 0104 	str.w	r0, [r7, #260]	@ 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003278:	2300      	movs	r3, #0
 800327a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800327e:	2300      	movs	r3, #0
 8003280:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003284:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003288:	e9d3 2300 	ldrd	r2, r3, [r3]
 800328c:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8003290:	2500      	movs	r5, #0
 8003292:	ea54 0305 	orrs.w	r3, r4, r5
 8003296:	d049      	beq.n	800332c <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8003298:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800329c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800329e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80032a2:	d02f      	beq.n	8003304 <HAL_RCCEx_PeriphCLKConfig+0x98>
 80032a4:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80032a8:	d828      	bhi.n	80032fc <HAL_RCCEx_PeriphCLKConfig+0x90>
 80032aa:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80032ae:	d01a      	beq.n	80032e6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80032b0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80032b4:	d822      	bhi.n	80032fc <HAL_RCCEx_PeriphCLKConfig+0x90>
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d003      	beq.n	80032c2 <HAL_RCCEx_PeriphCLKConfig+0x56>
 80032ba:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80032be:	d007      	beq.n	80032d0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80032c0:	e01c      	b.n	80032fc <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80032c2:	4bab      	ldr	r3, [pc, #684]	@ (8003570 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80032c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032c6:	4aaa      	ldr	r2, [pc, #680]	@ (8003570 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80032c8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80032cc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80032ce:	e01a      	b.n	8003306 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80032d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80032d4:	3308      	adds	r3, #8
 80032d6:	2102      	movs	r1, #2
 80032d8:	4618      	mov	r0, r3
 80032da:	f001 fc25 	bl	8004b28 <RCCEx_PLL2_Config>
 80032de:	4603      	mov	r3, r0
 80032e0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80032e4:	e00f      	b.n	8003306 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80032e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80032ea:	3328      	adds	r3, #40	@ 0x28
 80032ec:	2102      	movs	r1, #2
 80032ee:	4618      	mov	r0, r3
 80032f0:	f001 fccc 	bl	8004c8c <RCCEx_PLL3_Config>
 80032f4:	4603      	mov	r3, r0
 80032f6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80032fa:	e004      	b.n	8003306 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80032fc:	2301      	movs	r3, #1
 80032fe:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003302:	e000      	b.n	8003306 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8003304:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003306:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800330a:	2b00      	cmp	r3, #0
 800330c:	d10a      	bne.n	8003324 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800330e:	4b98      	ldr	r3, [pc, #608]	@ (8003570 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003310:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003312:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8003316:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800331a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800331c:	4a94      	ldr	r2, [pc, #592]	@ (8003570 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800331e:	430b      	orrs	r3, r1
 8003320:	6513      	str	r3, [r2, #80]	@ 0x50
 8003322:	e003      	b.n	800332c <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003324:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003328:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800332c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003330:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003334:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8003338:	f04f 0900 	mov.w	r9, #0
 800333c:	ea58 0309 	orrs.w	r3, r8, r9
 8003340:	d047      	beq.n	80033d2 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8003342:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003346:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003348:	2b04      	cmp	r3, #4
 800334a:	d82a      	bhi.n	80033a2 <HAL_RCCEx_PeriphCLKConfig+0x136>
 800334c:	a201      	add	r2, pc, #4	@ (adr r2, 8003354 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800334e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003352:	bf00      	nop
 8003354:	08003369 	.word	0x08003369
 8003358:	08003377 	.word	0x08003377
 800335c:	0800338d 	.word	0x0800338d
 8003360:	080033ab 	.word	0x080033ab
 8003364:	080033ab 	.word	0x080033ab
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003368:	4b81      	ldr	r3, [pc, #516]	@ (8003570 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800336a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800336c:	4a80      	ldr	r2, [pc, #512]	@ (8003570 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800336e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003372:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003374:	e01a      	b.n	80033ac <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003376:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800337a:	3308      	adds	r3, #8
 800337c:	2100      	movs	r1, #0
 800337e:	4618      	mov	r0, r3
 8003380:	f001 fbd2 	bl	8004b28 <RCCEx_PLL2_Config>
 8003384:	4603      	mov	r3, r0
 8003386:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800338a:	e00f      	b.n	80033ac <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800338c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003390:	3328      	adds	r3, #40	@ 0x28
 8003392:	2100      	movs	r1, #0
 8003394:	4618      	mov	r0, r3
 8003396:	f001 fc79 	bl	8004c8c <RCCEx_PLL3_Config>
 800339a:	4603      	mov	r3, r0
 800339c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80033a0:	e004      	b.n	80033ac <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80033a2:	2301      	movs	r3, #1
 80033a4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80033a8:	e000      	b.n	80033ac <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 80033aa:	bf00      	nop
    }

    if (ret == HAL_OK)
 80033ac:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d10a      	bne.n	80033ca <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80033b4:	4b6e      	ldr	r3, [pc, #440]	@ (8003570 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80033b6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80033b8:	f023 0107 	bic.w	r1, r3, #7
 80033bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80033c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80033c2:	4a6b      	ldr	r2, [pc, #428]	@ (8003570 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80033c4:	430b      	orrs	r3, r1
 80033c6:	6513      	str	r3, [r2, #80]	@ 0x50
 80033c8:	e003      	b.n	80033d2 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80033ca:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80033ce:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80033d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80033d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033da:	f402 6a80 	and.w	sl, r2, #1024	@ 0x400
 80033de:	f04f 0b00 	mov.w	fp, #0
 80033e2:	ea5a 030b 	orrs.w	r3, sl, fp
 80033e6:	d05b      	beq.n	80034a0 <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 80033e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80033ec:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80033f0:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 80033f4:	d03b      	beq.n	800346e <HAL_RCCEx_PeriphCLKConfig+0x202>
 80033f6:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 80033fa:	d834      	bhi.n	8003466 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 80033fc:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003400:	d037      	beq.n	8003472 <HAL_RCCEx_PeriphCLKConfig+0x206>
 8003402:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003406:	d82e      	bhi.n	8003466 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8003408:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800340c:	d033      	beq.n	8003476 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 800340e:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8003412:	d828      	bhi.n	8003466 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8003414:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003418:	d01a      	beq.n	8003450 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 800341a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800341e:	d822      	bhi.n	8003466 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8003420:	2b00      	cmp	r3, #0
 8003422:	d003      	beq.n	800342c <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 8003424:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003428:	d007      	beq.n	800343a <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 800342a:	e01c      	b.n	8003466 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800342c:	4b50      	ldr	r3, [pc, #320]	@ (8003570 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800342e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003430:	4a4f      	ldr	r2, [pc, #316]	@ (8003570 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003432:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003436:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003438:	e01e      	b.n	8003478 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800343a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800343e:	3308      	adds	r3, #8
 8003440:	2100      	movs	r1, #0
 8003442:	4618      	mov	r0, r3
 8003444:	f001 fb70 	bl	8004b28 <RCCEx_PLL2_Config>
 8003448:	4603      	mov	r3, r0
 800344a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800344e:	e013      	b.n	8003478 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003450:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003454:	3328      	adds	r3, #40	@ 0x28
 8003456:	2100      	movs	r1, #0
 8003458:	4618      	mov	r0, r3
 800345a:	f001 fc17 	bl	8004c8c <RCCEx_PLL3_Config>
 800345e:	4603      	mov	r3, r0
 8003460:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003464:	e008      	b.n	8003478 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8003466:	2301      	movs	r3, #1
 8003468:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800346c:	e004      	b.n	8003478 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800346e:	bf00      	nop
 8003470:	e002      	b.n	8003478 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8003472:	bf00      	nop
 8003474:	e000      	b.n	8003478 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8003476:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003478:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800347c:	2b00      	cmp	r3, #0
 800347e:	d10b      	bne.n	8003498 <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8003480:	4b3b      	ldr	r3, [pc, #236]	@ (8003570 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003482:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003484:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8003488:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800348c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8003490:	4a37      	ldr	r2, [pc, #220]	@ (8003570 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003492:	430b      	orrs	r3, r1
 8003494:	6593      	str	r3, [r2, #88]	@ 0x58
 8003496:	e003      	b.n	80034a0 <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003498:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800349c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80034a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80034a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034a8:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 80034ac:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80034b0:	2300      	movs	r3, #0
 80034b2:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80034b6:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 80034ba:	460b      	mov	r3, r1
 80034bc:	4313      	orrs	r3, r2
 80034be:	d05d      	beq.n	800357c <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 80034c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80034c4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80034c8:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 80034cc:	d03b      	beq.n	8003546 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 80034ce:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 80034d2:	d834      	bhi.n	800353e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 80034d4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80034d8:	d037      	beq.n	800354a <HAL_RCCEx_PeriphCLKConfig+0x2de>
 80034da:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80034de:	d82e      	bhi.n	800353e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 80034e0:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80034e4:	d033      	beq.n	800354e <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 80034e6:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80034ea:	d828      	bhi.n	800353e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 80034ec:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80034f0:	d01a      	beq.n	8003528 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 80034f2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80034f6:	d822      	bhi.n	800353e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d003      	beq.n	8003504 <HAL_RCCEx_PeriphCLKConfig+0x298>
 80034fc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003500:	d007      	beq.n	8003512 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8003502:	e01c      	b.n	800353e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003504:	4b1a      	ldr	r3, [pc, #104]	@ (8003570 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003506:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003508:	4a19      	ldr	r2, [pc, #100]	@ (8003570 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800350a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800350e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003510:	e01e      	b.n	8003550 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003512:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003516:	3308      	adds	r3, #8
 8003518:	2100      	movs	r1, #0
 800351a:	4618      	mov	r0, r3
 800351c:	f001 fb04 	bl	8004b28 <RCCEx_PLL2_Config>
 8003520:	4603      	mov	r3, r0
 8003522:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8003526:	e013      	b.n	8003550 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003528:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800352c:	3328      	adds	r3, #40	@ 0x28
 800352e:	2100      	movs	r1, #0
 8003530:	4618      	mov	r0, r3
 8003532:	f001 fbab 	bl	8004c8c <RCCEx_PLL3_Config>
 8003536:	4603      	mov	r3, r0
 8003538:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800353c:	e008      	b.n	8003550 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800353e:	2301      	movs	r3, #1
 8003540:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003544:	e004      	b.n	8003550 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8003546:	bf00      	nop
 8003548:	e002      	b.n	8003550 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800354a:	bf00      	nop
 800354c:	e000      	b.n	8003550 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800354e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003550:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003554:	2b00      	cmp	r3, #0
 8003556:	d10d      	bne.n	8003574 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8003558:	4b05      	ldr	r3, [pc, #20]	@ (8003570 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800355a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800355c:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8003560:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003564:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8003568:	4a01      	ldr	r2, [pc, #4]	@ (8003570 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800356a:	430b      	orrs	r3, r1
 800356c:	6593      	str	r3, [r2, #88]	@ 0x58
 800356e:	e005      	b.n	800357c <HAL_RCCEx_PeriphCLKConfig+0x310>
 8003570:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003574:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003578:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800357c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003580:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003584:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8003588:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800358c:	2300      	movs	r3, #0
 800358e:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8003592:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8003596:	460b      	mov	r3, r1
 8003598:	4313      	orrs	r3, r2
 800359a:	d03a      	beq.n	8003612 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 800359c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80035a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80035a2:	2b30      	cmp	r3, #48	@ 0x30
 80035a4:	d01f      	beq.n	80035e6 <HAL_RCCEx_PeriphCLKConfig+0x37a>
 80035a6:	2b30      	cmp	r3, #48	@ 0x30
 80035a8:	d819      	bhi.n	80035de <HAL_RCCEx_PeriphCLKConfig+0x372>
 80035aa:	2b20      	cmp	r3, #32
 80035ac:	d00c      	beq.n	80035c8 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 80035ae:	2b20      	cmp	r3, #32
 80035b0:	d815      	bhi.n	80035de <HAL_RCCEx_PeriphCLKConfig+0x372>
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d019      	beq.n	80035ea <HAL_RCCEx_PeriphCLKConfig+0x37e>
 80035b6:	2b10      	cmp	r3, #16
 80035b8:	d111      	bne.n	80035de <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80035ba:	4baa      	ldr	r3, [pc, #680]	@ (8003864 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80035bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035be:	4aa9      	ldr	r2, [pc, #676]	@ (8003864 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80035c0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80035c4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 80035c6:	e011      	b.n	80035ec <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80035c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80035cc:	3308      	adds	r3, #8
 80035ce:	2102      	movs	r1, #2
 80035d0:	4618      	mov	r0, r3
 80035d2:	f001 faa9 	bl	8004b28 <RCCEx_PLL2_Config>
 80035d6:	4603      	mov	r3, r0
 80035d8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 80035dc:	e006      	b.n	80035ec <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80035de:	2301      	movs	r3, #1
 80035e0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80035e4:	e002      	b.n	80035ec <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 80035e6:	bf00      	nop
 80035e8:	e000      	b.n	80035ec <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 80035ea:	bf00      	nop
    }

    if (ret == HAL_OK)
 80035ec:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d10a      	bne.n	800360a <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 80035f4:	4b9b      	ldr	r3, [pc, #620]	@ (8003864 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80035f6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80035f8:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 80035fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003600:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003602:	4a98      	ldr	r2, [pc, #608]	@ (8003864 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003604:	430b      	orrs	r3, r1
 8003606:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003608:	e003      	b.n	8003612 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800360a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800360e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8003612:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003616:	e9d3 2300 	ldrd	r2, r3, [r3]
 800361a:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 800361e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003622:	2300      	movs	r3, #0
 8003624:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8003628:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 800362c:	460b      	mov	r3, r1
 800362e:	4313      	orrs	r3, r2
 8003630:	d051      	beq.n	80036d6 <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8003632:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003636:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003638:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800363c:	d035      	beq.n	80036aa <HAL_RCCEx_PeriphCLKConfig+0x43e>
 800363e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003642:	d82e      	bhi.n	80036a2 <HAL_RCCEx_PeriphCLKConfig+0x436>
 8003644:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003648:	d031      	beq.n	80036ae <HAL_RCCEx_PeriphCLKConfig+0x442>
 800364a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800364e:	d828      	bhi.n	80036a2 <HAL_RCCEx_PeriphCLKConfig+0x436>
 8003650:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003654:	d01a      	beq.n	800368c <HAL_RCCEx_PeriphCLKConfig+0x420>
 8003656:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800365a:	d822      	bhi.n	80036a2 <HAL_RCCEx_PeriphCLKConfig+0x436>
 800365c:	2b00      	cmp	r3, #0
 800365e:	d003      	beq.n	8003668 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 8003660:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003664:	d007      	beq.n	8003676 <HAL_RCCEx_PeriphCLKConfig+0x40a>
 8003666:	e01c      	b.n	80036a2 <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003668:	4b7e      	ldr	r3, [pc, #504]	@ (8003864 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800366a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800366c:	4a7d      	ldr	r2, [pc, #500]	@ (8003864 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800366e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003672:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003674:	e01c      	b.n	80036b0 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003676:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800367a:	3308      	adds	r3, #8
 800367c:	2100      	movs	r1, #0
 800367e:	4618      	mov	r0, r3
 8003680:	f001 fa52 	bl	8004b28 <RCCEx_PLL2_Config>
 8003684:	4603      	mov	r3, r0
 8003686:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800368a:	e011      	b.n	80036b0 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800368c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003690:	3328      	adds	r3, #40	@ 0x28
 8003692:	2100      	movs	r1, #0
 8003694:	4618      	mov	r0, r3
 8003696:	f001 faf9 	bl	8004c8c <RCCEx_PLL3_Config>
 800369a:	4603      	mov	r3, r0
 800369c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80036a0:	e006      	b.n	80036b0 <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80036a2:	2301      	movs	r3, #1
 80036a4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80036a8:	e002      	b.n	80036b0 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 80036aa:	bf00      	nop
 80036ac:	e000      	b.n	80036b0 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 80036ae:	bf00      	nop
    }

    if (ret == HAL_OK)
 80036b0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d10a      	bne.n	80036ce <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80036b8:	4b6a      	ldr	r3, [pc, #424]	@ (8003864 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80036ba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80036bc:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 80036c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80036c4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80036c6:	4a67      	ldr	r2, [pc, #412]	@ (8003864 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80036c8:	430b      	orrs	r3, r1
 80036ca:	6513      	str	r3, [r2, #80]	@ 0x50
 80036cc:	e003      	b.n	80036d6 <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80036ce:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80036d2:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80036d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80036da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036de:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 80036e2:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80036e6:	2300      	movs	r3, #0
 80036e8:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80036ec:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 80036f0:	460b      	mov	r3, r1
 80036f2:	4313      	orrs	r3, r2
 80036f4:	d053      	beq.n	800379e <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 80036f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80036fa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80036fc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003700:	d033      	beq.n	800376a <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 8003702:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003706:	d82c      	bhi.n	8003762 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8003708:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800370c:	d02f      	beq.n	800376e <HAL_RCCEx_PeriphCLKConfig+0x502>
 800370e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003712:	d826      	bhi.n	8003762 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8003714:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003718:	d02b      	beq.n	8003772 <HAL_RCCEx_PeriphCLKConfig+0x506>
 800371a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800371e:	d820      	bhi.n	8003762 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8003720:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003724:	d012      	beq.n	800374c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 8003726:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800372a:	d81a      	bhi.n	8003762 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800372c:	2b00      	cmp	r3, #0
 800372e:	d022      	beq.n	8003776 <HAL_RCCEx_PeriphCLKConfig+0x50a>
 8003730:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003734:	d115      	bne.n	8003762 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003736:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800373a:	3308      	adds	r3, #8
 800373c:	2101      	movs	r1, #1
 800373e:	4618      	mov	r0, r3
 8003740:	f001 f9f2 	bl	8004b28 <RCCEx_PLL2_Config>
 8003744:	4603      	mov	r3, r0
 8003746:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800374a:	e015      	b.n	8003778 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800374c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003750:	3328      	adds	r3, #40	@ 0x28
 8003752:	2101      	movs	r1, #1
 8003754:	4618      	mov	r0, r3
 8003756:	f001 fa99 	bl	8004c8c <RCCEx_PLL3_Config>
 800375a:	4603      	mov	r3, r0
 800375c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8003760:	e00a      	b.n	8003778 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003762:	2301      	movs	r3, #1
 8003764:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003768:	e006      	b.n	8003778 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800376a:	bf00      	nop
 800376c:	e004      	b.n	8003778 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800376e:	bf00      	nop
 8003770:	e002      	b.n	8003778 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8003772:	bf00      	nop
 8003774:	e000      	b.n	8003778 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8003776:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003778:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800377c:	2b00      	cmp	r3, #0
 800377e:	d10a      	bne.n	8003796 <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8003780:	4b38      	ldr	r3, [pc, #224]	@ (8003864 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003782:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003784:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8003788:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800378c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800378e:	4a35      	ldr	r2, [pc, #212]	@ (8003864 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003790:	430b      	orrs	r3, r1
 8003792:	6513      	str	r3, [r2, #80]	@ 0x50
 8003794:	e003      	b.n	800379e <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003796:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800379a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800379e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80037a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037a6:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 80037aa:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80037ae:	2300      	movs	r3, #0
 80037b0:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80037b4:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80037b8:	460b      	mov	r3, r1
 80037ba:	4313      	orrs	r3, r2
 80037bc:	d058      	beq.n	8003870 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 80037be:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80037c2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80037c6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80037ca:	d033      	beq.n	8003834 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 80037cc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80037d0:	d82c      	bhi.n	800382c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 80037d2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80037d6:	d02f      	beq.n	8003838 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 80037d8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80037dc:	d826      	bhi.n	800382c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 80037de:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80037e2:	d02b      	beq.n	800383c <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 80037e4:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80037e8:	d820      	bhi.n	800382c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 80037ea:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80037ee:	d012      	beq.n	8003816 <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 80037f0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80037f4:	d81a      	bhi.n	800382c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d022      	beq.n	8003840 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 80037fa:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80037fe:	d115      	bne.n	800382c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003800:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003804:	3308      	adds	r3, #8
 8003806:	2101      	movs	r1, #1
 8003808:	4618      	mov	r0, r3
 800380a:	f001 f98d 	bl	8004b28 <RCCEx_PLL2_Config>
 800380e:	4603      	mov	r3, r0
 8003810:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8003814:	e015      	b.n	8003842 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003816:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800381a:	3328      	adds	r3, #40	@ 0x28
 800381c:	2101      	movs	r1, #1
 800381e:	4618      	mov	r0, r3
 8003820:	f001 fa34 	bl	8004c8c <RCCEx_PLL3_Config>
 8003824:	4603      	mov	r3, r0
 8003826:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800382a:	e00a      	b.n	8003842 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800382c:	2301      	movs	r3, #1
 800382e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003832:	e006      	b.n	8003842 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8003834:	bf00      	nop
 8003836:	e004      	b.n	8003842 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8003838:	bf00      	nop
 800383a:	e002      	b.n	8003842 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800383c:	bf00      	nop
 800383e:	e000      	b.n	8003842 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8003840:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003842:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003846:	2b00      	cmp	r3, #0
 8003848:	d10e      	bne.n	8003868 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800384a:	4b06      	ldr	r3, [pc, #24]	@ (8003864 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800384c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800384e:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8003852:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003856:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800385a:	4a02      	ldr	r2, [pc, #8]	@ (8003864 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800385c:	430b      	orrs	r3, r1
 800385e:	6593      	str	r3, [r2, #88]	@ 0x58
 8003860:	e006      	b.n	8003870 <HAL_RCCEx_PeriphCLKConfig+0x604>
 8003862:	bf00      	nop
 8003864:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003868:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800386c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003870:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003874:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003878:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 800387c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003880:	2300      	movs	r3, #0
 8003882:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8003886:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 800388a:	460b      	mov	r3, r1
 800388c:	4313      	orrs	r3, r2
 800388e:	d037      	beq.n	8003900 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8003890:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003894:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003896:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800389a:	d00e      	beq.n	80038ba <HAL_RCCEx_PeriphCLKConfig+0x64e>
 800389c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80038a0:	d816      	bhi.n	80038d0 <HAL_RCCEx_PeriphCLKConfig+0x664>
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d018      	beq.n	80038d8 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 80038a6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80038aa:	d111      	bne.n	80038d0 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80038ac:	4bc4      	ldr	r3, [pc, #784]	@ (8003bc0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80038ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038b0:	4ac3      	ldr	r2, [pc, #780]	@ (8003bc0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80038b2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80038b6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80038b8:	e00f      	b.n	80038da <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80038ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80038be:	3308      	adds	r3, #8
 80038c0:	2101      	movs	r1, #1
 80038c2:	4618      	mov	r0, r3
 80038c4:	f001 f930 	bl	8004b28 <RCCEx_PLL2_Config>
 80038c8:	4603      	mov	r3, r0
 80038ca:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80038ce:	e004      	b.n	80038da <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80038d0:	2301      	movs	r3, #1
 80038d2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80038d6:	e000      	b.n	80038da <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 80038d8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80038da:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d10a      	bne.n	80038f8 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80038e2:	4bb7      	ldr	r3, [pc, #732]	@ (8003bc0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80038e4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80038e6:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 80038ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80038ee:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80038f0:	4ab3      	ldr	r2, [pc, #716]	@ (8003bc0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80038f2:	430b      	orrs	r3, r1
 80038f4:	6513      	str	r3, [r2, #80]	@ 0x50
 80038f6:	e003      	b.n	8003900 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80038f8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80038fc:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8003900:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003904:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003908:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 800390c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003910:	2300      	movs	r3, #0
 8003912:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003916:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 800391a:	460b      	mov	r3, r1
 800391c:	4313      	orrs	r3, r2
 800391e:	d039      	beq.n	8003994 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8003920:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003924:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003926:	2b03      	cmp	r3, #3
 8003928:	d81c      	bhi.n	8003964 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 800392a:	a201      	add	r2, pc, #4	@ (adr r2, 8003930 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 800392c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003930:	0800396d 	.word	0x0800396d
 8003934:	08003941 	.word	0x08003941
 8003938:	0800394f 	.word	0x0800394f
 800393c:	0800396d 	.word	0x0800396d
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003940:	4b9f      	ldr	r3, [pc, #636]	@ (8003bc0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003942:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003944:	4a9e      	ldr	r2, [pc, #632]	@ (8003bc0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003946:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800394a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 800394c:	e00f      	b.n	800396e <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800394e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003952:	3308      	adds	r3, #8
 8003954:	2102      	movs	r1, #2
 8003956:	4618      	mov	r0, r3
 8003958:	f001 f8e6 	bl	8004b28 <RCCEx_PLL2_Config>
 800395c:	4603      	mov	r3, r0
 800395e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 8003962:	e004      	b.n	800396e <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8003964:	2301      	movs	r3, #1
 8003966:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800396a:	e000      	b.n	800396e <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 800396c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800396e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003972:	2b00      	cmp	r3, #0
 8003974:	d10a      	bne.n	800398c <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8003976:	4b92      	ldr	r3, [pc, #584]	@ (8003bc0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003978:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800397a:	f023 0103 	bic.w	r1, r3, #3
 800397e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003982:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003984:	4a8e      	ldr	r2, [pc, #568]	@ (8003bc0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003986:	430b      	orrs	r3, r1
 8003988:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800398a:	e003      	b.n	8003994 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800398c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003990:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003994:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003998:	e9d3 2300 	ldrd	r2, r3, [r3]
 800399c:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 80039a0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80039a4:	2300      	movs	r3, #0
 80039a6:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80039aa:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80039ae:	460b      	mov	r3, r1
 80039b0:	4313      	orrs	r3, r2
 80039b2:	f000 8099 	beq.w	8003ae8 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80039b6:	4b83      	ldr	r3, [pc, #524]	@ (8003bc4 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	4a82      	ldr	r2, [pc, #520]	@ (8003bc4 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80039bc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80039c0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80039c2:	f7fe f9bd 	bl	8001d40 <HAL_GetTick>
 80039c6:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80039ca:	e00b      	b.n	80039e4 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80039cc:	f7fe f9b8 	bl	8001d40 <HAL_GetTick>
 80039d0:	4602      	mov	r2, r0
 80039d2:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 80039d6:	1ad3      	subs	r3, r2, r3
 80039d8:	2b64      	cmp	r3, #100	@ 0x64
 80039da:	d903      	bls.n	80039e4 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 80039dc:	2303      	movs	r3, #3
 80039de:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80039e2:	e005      	b.n	80039f0 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80039e4:	4b77      	ldr	r3, [pc, #476]	@ (8003bc4 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d0ed      	beq.n	80039cc <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 80039f0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d173      	bne.n	8003ae0 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80039f8:	4b71      	ldr	r3, [pc, #452]	@ (8003bc0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80039fa:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80039fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003a00:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8003a04:	4053      	eors	r3, r2
 8003a06:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d015      	beq.n	8003a3a <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003a0e:	4b6c      	ldr	r3, [pc, #432]	@ (8003bc0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003a10:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a12:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003a16:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003a1a:	4b69      	ldr	r3, [pc, #420]	@ (8003bc0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003a1c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a1e:	4a68      	ldr	r2, [pc, #416]	@ (8003bc0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003a20:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003a24:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003a26:	4b66      	ldr	r3, [pc, #408]	@ (8003bc0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003a28:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a2a:	4a65      	ldr	r2, [pc, #404]	@ (8003bc0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003a2c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003a30:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8003a32:	4a63      	ldr	r2, [pc, #396]	@ (8003bc0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003a34:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003a38:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8003a3a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003a3e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8003a42:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003a46:	d118      	bne.n	8003a7a <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a48:	f7fe f97a 	bl	8001d40 <HAL_GetTick>
 8003a4c:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003a50:	e00d      	b.n	8003a6e <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a52:	f7fe f975 	bl	8001d40 <HAL_GetTick>
 8003a56:	4602      	mov	r2, r0
 8003a58:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8003a5c:	1ad2      	subs	r2, r2, r3
 8003a5e:	f241 3388 	movw	r3, #5000	@ 0x1388
 8003a62:	429a      	cmp	r2, r3
 8003a64:	d903      	bls.n	8003a6e <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 8003a66:	2303      	movs	r3, #3
 8003a68:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
            break;
 8003a6c:	e005      	b.n	8003a7a <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003a6e:	4b54      	ldr	r3, [pc, #336]	@ (8003bc0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003a70:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a72:	f003 0302 	and.w	r3, r3, #2
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d0eb      	beq.n	8003a52 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 8003a7a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d129      	bne.n	8003ad6 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003a82:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003a86:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8003a8a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003a8e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003a92:	d10e      	bne.n	8003ab2 <HAL_RCCEx_PeriphCLKConfig+0x846>
 8003a94:	4b4a      	ldr	r3, [pc, #296]	@ (8003bc0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003a96:	691b      	ldr	r3, [r3, #16]
 8003a98:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8003a9c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003aa0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8003aa4:	091a      	lsrs	r2, r3, #4
 8003aa6:	4b48      	ldr	r3, [pc, #288]	@ (8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8003aa8:	4013      	ands	r3, r2
 8003aaa:	4a45      	ldr	r2, [pc, #276]	@ (8003bc0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003aac:	430b      	orrs	r3, r1
 8003aae:	6113      	str	r3, [r2, #16]
 8003ab0:	e005      	b.n	8003abe <HAL_RCCEx_PeriphCLKConfig+0x852>
 8003ab2:	4b43      	ldr	r3, [pc, #268]	@ (8003bc0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003ab4:	691b      	ldr	r3, [r3, #16]
 8003ab6:	4a42      	ldr	r2, [pc, #264]	@ (8003bc0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003ab8:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8003abc:	6113      	str	r3, [r2, #16]
 8003abe:	4b40      	ldr	r3, [pc, #256]	@ (8003bc0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003ac0:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8003ac2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003ac6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8003aca:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003ace:	4a3c      	ldr	r2, [pc, #240]	@ (8003bc0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003ad0:	430b      	orrs	r3, r1
 8003ad2:	6713      	str	r3, [r2, #112]	@ 0x70
 8003ad4:	e008      	b.n	8003ae8 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003ad6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003ada:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 8003ade:	e003      	b.n	8003ae8 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ae0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003ae4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8003ae8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003aec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003af0:	f002 0301 	and.w	r3, r2, #1
 8003af4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003af8:	2300      	movs	r3, #0
 8003afa:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8003afe:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8003b02:	460b      	mov	r3, r1
 8003b04:	4313      	orrs	r3, r2
 8003b06:	f000 808f 	beq.w	8003c28 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8003b0a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003b0e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003b10:	2b28      	cmp	r3, #40	@ 0x28
 8003b12:	d871      	bhi.n	8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 8003b14:	a201      	add	r2, pc, #4	@ (adr r2, 8003b1c <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 8003b16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b1a:	bf00      	nop
 8003b1c:	08003c01 	.word	0x08003c01
 8003b20:	08003bf9 	.word	0x08003bf9
 8003b24:	08003bf9 	.word	0x08003bf9
 8003b28:	08003bf9 	.word	0x08003bf9
 8003b2c:	08003bf9 	.word	0x08003bf9
 8003b30:	08003bf9 	.word	0x08003bf9
 8003b34:	08003bf9 	.word	0x08003bf9
 8003b38:	08003bf9 	.word	0x08003bf9
 8003b3c:	08003bcd 	.word	0x08003bcd
 8003b40:	08003bf9 	.word	0x08003bf9
 8003b44:	08003bf9 	.word	0x08003bf9
 8003b48:	08003bf9 	.word	0x08003bf9
 8003b4c:	08003bf9 	.word	0x08003bf9
 8003b50:	08003bf9 	.word	0x08003bf9
 8003b54:	08003bf9 	.word	0x08003bf9
 8003b58:	08003bf9 	.word	0x08003bf9
 8003b5c:	08003be3 	.word	0x08003be3
 8003b60:	08003bf9 	.word	0x08003bf9
 8003b64:	08003bf9 	.word	0x08003bf9
 8003b68:	08003bf9 	.word	0x08003bf9
 8003b6c:	08003bf9 	.word	0x08003bf9
 8003b70:	08003bf9 	.word	0x08003bf9
 8003b74:	08003bf9 	.word	0x08003bf9
 8003b78:	08003bf9 	.word	0x08003bf9
 8003b7c:	08003c01 	.word	0x08003c01
 8003b80:	08003bf9 	.word	0x08003bf9
 8003b84:	08003bf9 	.word	0x08003bf9
 8003b88:	08003bf9 	.word	0x08003bf9
 8003b8c:	08003bf9 	.word	0x08003bf9
 8003b90:	08003bf9 	.word	0x08003bf9
 8003b94:	08003bf9 	.word	0x08003bf9
 8003b98:	08003bf9 	.word	0x08003bf9
 8003b9c:	08003c01 	.word	0x08003c01
 8003ba0:	08003bf9 	.word	0x08003bf9
 8003ba4:	08003bf9 	.word	0x08003bf9
 8003ba8:	08003bf9 	.word	0x08003bf9
 8003bac:	08003bf9 	.word	0x08003bf9
 8003bb0:	08003bf9 	.word	0x08003bf9
 8003bb4:	08003bf9 	.word	0x08003bf9
 8003bb8:	08003bf9 	.word	0x08003bf9
 8003bbc:	08003c01 	.word	0x08003c01
 8003bc0:	58024400 	.word	0x58024400
 8003bc4:	58024800 	.word	0x58024800
 8003bc8:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003bcc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003bd0:	3308      	adds	r3, #8
 8003bd2:	2101      	movs	r1, #1
 8003bd4:	4618      	mov	r0, r3
 8003bd6:	f000 ffa7 	bl	8004b28 <RCCEx_PLL2_Config>
 8003bda:	4603      	mov	r3, r0
 8003bdc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8003be0:	e00f      	b.n	8003c02 <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003be2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003be6:	3328      	adds	r3, #40	@ 0x28
 8003be8:	2101      	movs	r1, #1
 8003bea:	4618      	mov	r0, r3
 8003bec:	f001 f84e 	bl	8004c8c <RCCEx_PLL3_Config>
 8003bf0:	4603      	mov	r3, r0
 8003bf2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8003bf6:	e004      	b.n	8003c02 <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003bf8:	2301      	movs	r3, #1
 8003bfa:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003bfe:	e000      	b.n	8003c02 <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 8003c00:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003c02:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d10a      	bne.n	8003c20 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8003c0a:	4bbf      	ldr	r3, [pc, #764]	@ (8003f08 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8003c0c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003c0e:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8003c12:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003c16:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003c18:	4abb      	ldr	r2, [pc, #748]	@ (8003f08 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8003c1a:	430b      	orrs	r3, r1
 8003c1c:	6553      	str	r3, [r2, #84]	@ 0x54
 8003c1e:	e003      	b.n	8003c28 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c20:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003c24:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8003c28:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003c2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c30:	f002 0302 	and.w	r3, r2, #2
 8003c34:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003c38:	2300      	movs	r3, #0
 8003c3a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003c3e:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8003c42:	460b      	mov	r3, r1
 8003c44:	4313      	orrs	r3, r2
 8003c46:	d041      	beq.n	8003ccc <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8003c48:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003c4c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003c4e:	2b05      	cmp	r3, #5
 8003c50:	d824      	bhi.n	8003c9c <HAL_RCCEx_PeriphCLKConfig+0xa30>
 8003c52:	a201      	add	r2, pc, #4	@ (adr r2, 8003c58 <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 8003c54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c58:	08003ca5 	.word	0x08003ca5
 8003c5c:	08003c71 	.word	0x08003c71
 8003c60:	08003c87 	.word	0x08003c87
 8003c64:	08003ca5 	.word	0x08003ca5
 8003c68:	08003ca5 	.word	0x08003ca5
 8003c6c:	08003ca5 	.word	0x08003ca5
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003c70:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003c74:	3308      	adds	r3, #8
 8003c76:	2101      	movs	r1, #1
 8003c78:	4618      	mov	r0, r3
 8003c7a:	f000 ff55 	bl	8004b28 <RCCEx_PLL2_Config>
 8003c7e:	4603      	mov	r3, r0
 8003c80:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8003c84:	e00f      	b.n	8003ca6 <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003c86:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003c8a:	3328      	adds	r3, #40	@ 0x28
 8003c8c:	2101      	movs	r1, #1
 8003c8e:	4618      	mov	r0, r3
 8003c90:	f000 fffc 	bl	8004c8c <RCCEx_PLL3_Config>
 8003c94:	4603      	mov	r3, r0
 8003c96:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8003c9a:	e004      	b.n	8003ca6 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003c9c:	2301      	movs	r3, #1
 8003c9e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003ca2:	e000      	b.n	8003ca6 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 8003ca4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003ca6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d10a      	bne.n	8003cc4 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8003cae:	4b96      	ldr	r3, [pc, #600]	@ (8003f08 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8003cb0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003cb2:	f023 0107 	bic.w	r1, r3, #7
 8003cb6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003cba:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003cbc:	4a92      	ldr	r2, [pc, #584]	@ (8003f08 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8003cbe:	430b      	orrs	r3, r1
 8003cc0:	6553      	str	r3, [r2, #84]	@ 0x54
 8003cc2:	e003      	b.n	8003ccc <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003cc4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003cc8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003ccc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003cd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cd4:	f002 0304 	and.w	r3, r2, #4
 8003cd8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003cdc:	2300      	movs	r3, #0
 8003cde:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003ce2:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003ce6:	460b      	mov	r3, r1
 8003ce8:	4313      	orrs	r3, r2
 8003cea:	d044      	beq.n	8003d76 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8003cec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003cf0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003cf4:	2b05      	cmp	r3, #5
 8003cf6:	d825      	bhi.n	8003d44 <HAL_RCCEx_PeriphCLKConfig+0xad8>
 8003cf8:	a201      	add	r2, pc, #4	@ (adr r2, 8003d00 <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 8003cfa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cfe:	bf00      	nop
 8003d00:	08003d4d 	.word	0x08003d4d
 8003d04:	08003d19 	.word	0x08003d19
 8003d08:	08003d2f 	.word	0x08003d2f
 8003d0c:	08003d4d 	.word	0x08003d4d
 8003d10:	08003d4d 	.word	0x08003d4d
 8003d14:	08003d4d 	.word	0x08003d4d
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003d18:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003d1c:	3308      	adds	r3, #8
 8003d1e:	2101      	movs	r1, #1
 8003d20:	4618      	mov	r0, r3
 8003d22:	f000 ff01 	bl	8004b28 <RCCEx_PLL2_Config>
 8003d26:	4603      	mov	r3, r0
 8003d28:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8003d2c:	e00f      	b.n	8003d4e <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003d2e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003d32:	3328      	adds	r3, #40	@ 0x28
 8003d34:	2101      	movs	r1, #1
 8003d36:	4618      	mov	r0, r3
 8003d38:	f000 ffa8 	bl	8004c8c <RCCEx_PLL3_Config>
 8003d3c:	4603      	mov	r3, r0
 8003d3e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8003d42:	e004      	b.n	8003d4e <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003d44:	2301      	movs	r3, #1
 8003d46:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003d4a:	e000      	b.n	8003d4e <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 8003d4c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003d4e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d10b      	bne.n	8003d6e <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003d56:	4b6c      	ldr	r3, [pc, #432]	@ (8003f08 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8003d58:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d5a:	f023 0107 	bic.w	r1, r3, #7
 8003d5e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003d62:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d66:	4a68      	ldr	r2, [pc, #416]	@ (8003f08 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8003d68:	430b      	orrs	r3, r1
 8003d6a:	6593      	str	r3, [r2, #88]	@ 0x58
 8003d6c:	e003      	b.n	8003d76 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d6e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003d72:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003d76:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003d7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d7e:	f002 0320 	and.w	r3, r2, #32
 8003d82:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003d86:	2300      	movs	r3, #0
 8003d88:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8003d8c:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8003d90:	460b      	mov	r3, r1
 8003d92:	4313      	orrs	r3, r2
 8003d94:	d055      	beq.n	8003e42 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8003d96:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003d9a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003d9e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003da2:	d033      	beq.n	8003e0c <HAL_RCCEx_PeriphCLKConfig+0xba0>
 8003da4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003da8:	d82c      	bhi.n	8003e04 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8003daa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003dae:	d02f      	beq.n	8003e10 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 8003db0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003db4:	d826      	bhi.n	8003e04 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8003db6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003dba:	d02b      	beq.n	8003e14 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 8003dbc:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003dc0:	d820      	bhi.n	8003e04 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8003dc2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003dc6:	d012      	beq.n	8003dee <HAL_RCCEx_PeriphCLKConfig+0xb82>
 8003dc8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003dcc:	d81a      	bhi.n	8003e04 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d022      	beq.n	8003e18 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 8003dd2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003dd6:	d115      	bne.n	8003e04 <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003dd8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003ddc:	3308      	adds	r3, #8
 8003dde:	2100      	movs	r1, #0
 8003de0:	4618      	mov	r0, r3
 8003de2:	f000 fea1 	bl	8004b28 <RCCEx_PLL2_Config>
 8003de6:	4603      	mov	r3, r0
 8003de8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8003dec:	e015      	b.n	8003e1a <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003dee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003df2:	3328      	adds	r3, #40	@ 0x28
 8003df4:	2102      	movs	r1, #2
 8003df6:	4618      	mov	r0, r3
 8003df8:	f000 ff48 	bl	8004c8c <RCCEx_PLL3_Config>
 8003dfc:	4603      	mov	r3, r0
 8003dfe:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8003e02:	e00a      	b.n	8003e1a <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003e04:	2301      	movs	r3, #1
 8003e06:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003e0a:	e006      	b.n	8003e1a <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8003e0c:	bf00      	nop
 8003e0e:	e004      	b.n	8003e1a <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8003e10:	bf00      	nop
 8003e12:	e002      	b.n	8003e1a <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8003e14:	bf00      	nop
 8003e16:	e000      	b.n	8003e1a <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8003e18:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003e1a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d10b      	bne.n	8003e3a <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003e22:	4b39      	ldr	r3, [pc, #228]	@ (8003f08 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8003e24:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003e26:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8003e2a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003e2e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003e32:	4a35      	ldr	r2, [pc, #212]	@ (8003f08 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8003e34:	430b      	orrs	r3, r1
 8003e36:	6553      	str	r3, [r2, #84]	@ 0x54
 8003e38:	e003      	b.n	8003e42 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e3a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003e3e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8003e42:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003e46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e4a:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8003e4e:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003e52:	2300      	movs	r3, #0
 8003e54:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003e58:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8003e5c:	460b      	mov	r3, r1
 8003e5e:	4313      	orrs	r3, r2
 8003e60:	d058      	beq.n	8003f14 <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8003e62:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003e66:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003e6a:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8003e6e:	d033      	beq.n	8003ed8 <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 8003e70:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8003e74:	d82c      	bhi.n	8003ed0 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8003e76:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003e7a:	d02f      	beq.n	8003edc <HAL_RCCEx_PeriphCLKConfig+0xc70>
 8003e7c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003e80:	d826      	bhi.n	8003ed0 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8003e82:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003e86:	d02b      	beq.n	8003ee0 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 8003e88:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003e8c:	d820      	bhi.n	8003ed0 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8003e8e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003e92:	d012      	beq.n	8003eba <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 8003e94:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003e98:	d81a      	bhi.n	8003ed0 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d022      	beq.n	8003ee4 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 8003e9e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003ea2:	d115      	bne.n	8003ed0 <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003ea4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003ea8:	3308      	adds	r3, #8
 8003eaa:	2100      	movs	r1, #0
 8003eac:	4618      	mov	r0, r3
 8003eae:	f000 fe3b 	bl	8004b28 <RCCEx_PLL2_Config>
 8003eb2:	4603      	mov	r3, r0
 8003eb4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8003eb8:	e015      	b.n	8003ee6 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003eba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003ebe:	3328      	adds	r3, #40	@ 0x28
 8003ec0:	2102      	movs	r1, #2
 8003ec2:	4618      	mov	r0, r3
 8003ec4:	f000 fee2 	bl	8004c8c <RCCEx_PLL3_Config>
 8003ec8:	4603      	mov	r3, r0
 8003eca:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8003ece:	e00a      	b.n	8003ee6 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003ed0:	2301      	movs	r3, #1
 8003ed2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003ed6:	e006      	b.n	8003ee6 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8003ed8:	bf00      	nop
 8003eda:	e004      	b.n	8003ee6 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8003edc:	bf00      	nop
 8003ede:	e002      	b.n	8003ee6 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8003ee0:	bf00      	nop
 8003ee2:	e000      	b.n	8003ee6 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8003ee4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003ee6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d10e      	bne.n	8003f0c <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003eee:	4b06      	ldr	r3, [pc, #24]	@ (8003f08 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8003ef0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ef2:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8003ef6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003efa:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003efe:	4a02      	ldr	r2, [pc, #8]	@ (8003f08 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8003f00:	430b      	orrs	r3, r1
 8003f02:	6593      	str	r3, [r2, #88]	@ 0x58
 8003f04:	e006      	b.n	8003f14 <HAL_RCCEx_PeriphCLKConfig+0xca8>
 8003f06:	bf00      	nop
 8003f08:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f0c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003f10:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8003f14:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003f18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f1c:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8003f20:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003f24:	2300      	movs	r3, #0
 8003f26:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8003f2a:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8003f2e:	460b      	mov	r3, r1
 8003f30:	4313      	orrs	r3, r2
 8003f32:	d055      	beq.n	8003fe0 <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8003f34:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003f38:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003f3c:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8003f40:	d033      	beq.n	8003faa <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 8003f42:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8003f46:	d82c      	bhi.n	8003fa2 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8003f48:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003f4c:	d02f      	beq.n	8003fae <HAL_RCCEx_PeriphCLKConfig+0xd42>
 8003f4e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003f52:	d826      	bhi.n	8003fa2 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8003f54:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8003f58:	d02b      	beq.n	8003fb2 <HAL_RCCEx_PeriphCLKConfig+0xd46>
 8003f5a:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8003f5e:	d820      	bhi.n	8003fa2 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8003f60:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003f64:	d012      	beq.n	8003f8c <HAL_RCCEx_PeriphCLKConfig+0xd20>
 8003f66:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003f6a:	d81a      	bhi.n	8003fa2 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d022      	beq.n	8003fb6 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 8003f70:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003f74:	d115      	bne.n	8003fa2 <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003f76:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003f7a:	3308      	adds	r3, #8
 8003f7c:	2100      	movs	r1, #0
 8003f7e:	4618      	mov	r0, r3
 8003f80:	f000 fdd2 	bl	8004b28 <RCCEx_PLL2_Config>
 8003f84:	4603      	mov	r3, r0
 8003f86:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8003f8a:	e015      	b.n	8003fb8 <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003f8c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003f90:	3328      	adds	r3, #40	@ 0x28
 8003f92:	2102      	movs	r1, #2
 8003f94:	4618      	mov	r0, r3
 8003f96:	f000 fe79 	bl	8004c8c <RCCEx_PLL3_Config>
 8003f9a:	4603      	mov	r3, r0
 8003f9c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8003fa0:	e00a      	b.n	8003fb8 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003fa2:	2301      	movs	r3, #1
 8003fa4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003fa8:	e006      	b.n	8003fb8 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8003faa:	bf00      	nop
 8003fac:	e004      	b.n	8003fb8 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8003fae:	bf00      	nop
 8003fb0:	e002      	b.n	8003fb8 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8003fb2:	bf00      	nop
 8003fb4:	e000      	b.n	8003fb8 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8003fb6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003fb8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d10b      	bne.n	8003fd8 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8003fc0:	4ba0      	ldr	r3, [pc, #640]	@ (8004244 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8003fc2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003fc4:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8003fc8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003fcc:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003fd0:	4a9c      	ldr	r2, [pc, #624]	@ (8004244 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8003fd2:	430b      	orrs	r3, r1
 8003fd4:	6593      	str	r3, [r2, #88]	@ 0x58
 8003fd6:	e003      	b.n	8003fe0 <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003fd8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003fdc:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 8003fe0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003fe4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fe8:	f002 0308 	and.w	r3, r2, #8
 8003fec:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003ff0:	2300      	movs	r3, #0
 8003ff2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8003ff6:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8003ffa:	460b      	mov	r3, r1
 8003ffc:	4313      	orrs	r3, r2
 8003ffe:	d01e      	beq.n	800403e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 8004000:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004004:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004008:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800400c:	d10c      	bne.n	8004028 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800400e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004012:	3328      	adds	r3, #40	@ 0x28
 8004014:	2102      	movs	r1, #2
 8004016:	4618      	mov	r0, r3
 8004018:	f000 fe38 	bl	8004c8c <RCCEx_PLL3_Config>
 800401c:	4603      	mov	r3, r0
 800401e:	2b00      	cmp	r3, #0
 8004020:	d002      	beq.n	8004028 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 8004022:	2301      	movs	r3, #1
 8004024:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 8004028:	4b86      	ldr	r3, [pc, #536]	@ (8004244 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800402a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800402c:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004030:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004034:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004038:	4a82      	ldr	r2, [pc, #520]	@ (8004244 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800403a:	430b      	orrs	r3, r1
 800403c:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800403e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004042:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004046:	f002 0310 	and.w	r3, r2, #16
 800404a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800404e:	2300      	movs	r3, #0
 8004050:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004054:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8004058:	460b      	mov	r3, r1
 800405a:	4313      	orrs	r3, r2
 800405c:	d01e      	beq.n	800409c <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800405e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004062:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004066:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800406a:	d10c      	bne.n	8004086 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800406c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004070:	3328      	adds	r3, #40	@ 0x28
 8004072:	2102      	movs	r1, #2
 8004074:	4618      	mov	r0, r3
 8004076:	f000 fe09 	bl	8004c8c <RCCEx_PLL3_Config>
 800407a:	4603      	mov	r3, r0
 800407c:	2b00      	cmp	r3, #0
 800407e:	d002      	beq.n	8004086 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 8004080:	2301      	movs	r3, #1
 8004082:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004086:	4b6f      	ldr	r3, [pc, #444]	@ (8004244 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004088:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800408a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800408e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004092:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004096:	4a6b      	ldr	r2, [pc, #428]	@ (8004244 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004098:	430b      	orrs	r3, r1
 800409a:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800409c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80040a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040a4:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 80040a8:	67bb      	str	r3, [r7, #120]	@ 0x78
 80040aa:	2300      	movs	r3, #0
 80040ac:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80040ae:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 80040b2:	460b      	mov	r3, r1
 80040b4:	4313      	orrs	r3, r2
 80040b6:	d03e      	beq.n	8004136 <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 80040b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80040bc:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80040c0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80040c4:	d022      	beq.n	800410c <HAL_RCCEx_PeriphCLKConfig+0xea0>
 80040c6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80040ca:	d81b      	bhi.n	8004104 <HAL_RCCEx_PeriphCLKConfig+0xe98>
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d003      	beq.n	80040d8 <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 80040d0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80040d4:	d00b      	beq.n	80040ee <HAL_RCCEx_PeriphCLKConfig+0xe82>
 80040d6:	e015      	b.n	8004104 <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80040d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80040dc:	3308      	adds	r3, #8
 80040de:	2100      	movs	r1, #0
 80040e0:	4618      	mov	r0, r3
 80040e2:	f000 fd21 	bl	8004b28 <RCCEx_PLL2_Config>
 80040e6:	4603      	mov	r3, r0
 80040e8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 80040ec:	e00f      	b.n	800410e <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80040ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80040f2:	3328      	adds	r3, #40	@ 0x28
 80040f4:	2102      	movs	r1, #2
 80040f6:	4618      	mov	r0, r3
 80040f8:	f000 fdc8 	bl	8004c8c <RCCEx_PLL3_Config>
 80040fc:	4603      	mov	r3, r0
 80040fe:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 8004102:	e004      	b.n	800410e <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004104:	2301      	movs	r3, #1
 8004106:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800410a:	e000      	b.n	800410e <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 800410c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800410e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004112:	2b00      	cmp	r3, #0
 8004114:	d10b      	bne.n	800412e <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004116:	4b4b      	ldr	r3, [pc, #300]	@ (8004244 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004118:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800411a:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800411e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004122:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8004126:	4a47      	ldr	r2, [pc, #284]	@ (8004244 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004128:	430b      	orrs	r3, r1
 800412a:	6593      	str	r3, [r2, #88]	@ 0x58
 800412c:	e003      	b.n	8004136 <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800412e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004132:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004136:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800413a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800413e:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8004142:	673b      	str	r3, [r7, #112]	@ 0x70
 8004144:	2300      	movs	r3, #0
 8004146:	677b      	str	r3, [r7, #116]	@ 0x74
 8004148:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 800414c:	460b      	mov	r3, r1
 800414e:	4313      	orrs	r3, r2
 8004150:	d03b      	beq.n	80041ca <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8004152:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004156:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800415a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800415e:	d01f      	beq.n	80041a0 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 8004160:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004164:	d818      	bhi.n	8004198 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 8004166:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800416a:	d003      	beq.n	8004174 <HAL_RCCEx_PeriphCLKConfig+0xf08>
 800416c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004170:	d007      	beq.n	8004182 <HAL_RCCEx_PeriphCLKConfig+0xf16>
 8004172:	e011      	b.n	8004198 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004174:	4b33      	ldr	r3, [pc, #204]	@ (8004244 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004176:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004178:	4a32      	ldr	r2, [pc, #200]	@ (8004244 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800417a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800417e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8004180:	e00f      	b.n	80041a2 <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004182:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004186:	3328      	adds	r3, #40	@ 0x28
 8004188:	2101      	movs	r1, #1
 800418a:	4618      	mov	r0, r3
 800418c:	f000 fd7e 	bl	8004c8c <RCCEx_PLL3_Config>
 8004190:	4603      	mov	r3, r0
 8004192:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 8004196:	e004      	b.n	80041a2 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004198:	2301      	movs	r3, #1
 800419a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800419e:	e000      	b.n	80041a2 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 80041a0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80041a2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d10b      	bne.n	80041c2 <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80041aa:	4b26      	ldr	r3, [pc, #152]	@ (8004244 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80041ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80041ae:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80041b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80041b6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80041ba:	4a22      	ldr	r2, [pc, #136]	@ (8004244 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80041bc:	430b      	orrs	r3, r1
 80041be:	6553      	str	r3, [r2, #84]	@ 0x54
 80041c0:	e003      	b.n	80041ca <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80041c2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80041c6:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80041ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80041ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041d2:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 80041d6:	66bb      	str	r3, [r7, #104]	@ 0x68
 80041d8:	2300      	movs	r3, #0
 80041da:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80041dc:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 80041e0:	460b      	mov	r3, r1
 80041e2:	4313      	orrs	r3, r2
 80041e4:	d034      	beq.n	8004250 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 80041e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80041ea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d003      	beq.n	80041f8 <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 80041f0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80041f4:	d007      	beq.n	8004206 <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 80041f6:	e011      	b.n	800421c <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80041f8:	4b12      	ldr	r3, [pc, #72]	@ (8004244 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80041fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041fc:	4a11      	ldr	r2, [pc, #68]	@ (8004244 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80041fe:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004202:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8004204:	e00e      	b.n	8004224 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004206:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800420a:	3308      	adds	r3, #8
 800420c:	2102      	movs	r1, #2
 800420e:	4618      	mov	r0, r3
 8004210:	f000 fc8a 	bl	8004b28 <RCCEx_PLL2_Config>
 8004214:	4603      	mov	r3, r0
 8004216:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800421a:	e003      	b.n	8004224 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 800421c:	2301      	movs	r3, #1
 800421e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8004222:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004224:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004228:	2b00      	cmp	r3, #0
 800422a:	d10d      	bne.n	8004248 <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800422c:	4b05      	ldr	r3, [pc, #20]	@ (8004244 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800422e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004230:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004234:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004238:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800423a:	4a02      	ldr	r2, [pc, #8]	@ (8004244 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800423c:	430b      	orrs	r3, r1
 800423e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004240:	e006      	b.n	8004250 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 8004242:	bf00      	nop
 8004244:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004248:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800424c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004250:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004254:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004258:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 800425c:	663b      	str	r3, [r7, #96]	@ 0x60
 800425e:	2300      	movs	r3, #0
 8004260:	667b      	str	r3, [r7, #100]	@ 0x64
 8004262:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8004266:	460b      	mov	r3, r1
 8004268:	4313      	orrs	r3, r2
 800426a:	d00c      	beq.n	8004286 <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800426c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004270:	3328      	adds	r3, #40	@ 0x28
 8004272:	2102      	movs	r1, #2
 8004274:	4618      	mov	r0, r3
 8004276:	f000 fd09 	bl	8004c8c <RCCEx_PLL3_Config>
 800427a:	4603      	mov	r3, r0
 800427c:	2b00      	cmp	r3, #0
 800427e:	d002      	beq.n	8004286 <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 8004280:	2301      	movs	r3, #1
 8004282:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8004286:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800428a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800428e:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8004292:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004294:	2300      	movs	r3, #0
 8004296:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004298:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 800429c:	460b      	mov	r3, r1
 800429e:	4313      	orrs	r3, r2
 80042a0:	d036      	beq.n	8004310 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 80042a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80042a6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80042a8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80042ac:	d018      	beq.n	80042e0 <HAL_RCCEx_PeriphCLKConfig+0x1074>
 80042ae:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80042b2:	d811      	bhi.n	80042d8 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 80042b4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80042b8:	d014      	beq.n	80042e4 <HAL_RCCEx_PeriphCLKConfig+0x1078>
 80042ba:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80042be:	d80b      	bhi.n	80042d8 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d011      	beq.n	80042e8 <HAL_RCCEx_PeriphCLKConfig+0x107c>
 80042c4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80042c8:	d106      	bne.n	80042d8 <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80042ca:	4bb7      	ldr	r3, [pc, #732]	@ (80045a8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80042cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042ce:	4ab6      	ldr	r2, [pc, #728]	@ (80045a8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80042d0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80042d4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 80042d6:	e008      	b.n	80042ea <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80042d8:	2301      	movs	r3, #1
 80042da:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80042de:	e004      	b.n	80042ea <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 80042e0:	bf00      	nop
 80042e2:	e002      	b.n	80042ea <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 80042e4:	bf00      	nop
 80042e6:	e000      	b.n	80042ea <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 80042e8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80042ea:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d10a      	bne.n	8004308 <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80042f2:	4bad      	ldr	r3, [pc, #692]	@ (80045a8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80042f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80042f6:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80042fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80042fe:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004300:	4aa9      	ldr	r2, [pc, #676]	@ (80045a8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004302:	430b      	orrs	r3, r1
 8004304:	6553      	str	r3, [r2, #84]	@ 0x54
 8004306:	e003      	b.n	8004310 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004308:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800430c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004310:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004314:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004318:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 800431c:	653b      	str	r3, [r7, #80]	@ 0x50
 800431e:	2300      	movs	r3, #0
 8004320:	657b      	str	r3, [r7, #84]	@ 0x54
 8004322:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8004326:	460b      	mov	r3, r1
 8004328:	4313      	orrs	r3, r2
 800432a:	d009      	beq.n	8004340 <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800432c:	4b9e      	ldr	r3, [pc, #632]	@ (80045a8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800432e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004330:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8004334:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004338:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800433a:	4a9b      	ldr	r2, [pc, #620]	@ (80045a8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800433c:	430b      	orrs	r3, r1
 800433e:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004340:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004344:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004348:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 800434c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800434e:	2300      	movs	r3, #0
 8004350:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004352:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8004356:	460b      	mov	r3, r1
 8004358:	4313      	orrs	r3, r2
 800435a:	d009      	beq.n	8004370 <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800435c:	4b92      	ldr	r3, [pc, #584]	@ (80045a8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800435e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004360:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8004364:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004368:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800436a:	4a8f      	ldr	r2, [pc, #572]	@ (80045a8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800436c:	430b      	orrs	r3, r1
 800436e:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8004370:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004374:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004378:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 800437c:	643b      	str	r3, [r7, #64]	@ 0x40
 800437e:	2300      	movs	r3, #0
 8004380:	647b      	str	r3, [r7, #68]	@ 0x44
 8004382:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8004386:	460b      	mov	r3, r1
 8004388:	4313      	orrs	r3, r2
 800438a:	d00e      	beq.n	80043aa <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800438c:	4b86      	ldr	r3, [pc, #536]	@ (80045a8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800438e:	691b      	ldr	r3, [r3, #16]
 8004390:	4a85      	ldr	r2, [pc, #532]	@ (80045a8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004392:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8004396:	6113      	str	r3, [r2, #16]
 8004398:	4b83      	ldr	r3, [pc, #524]	@ (80045a8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800439a:	6919      	ldr	r1, [r3, #16]
 800439c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80043a0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80043a4:	4a80      	ldr	r2, [pc, #512]	@ (80045a8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80043a6:	430b      	orrs	r3, r1
 80043a8:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80043aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80043ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043b2:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 80043b6:	63bb      	str	r3, [r7, #56]	@ 0x38
 80043b8:	2300      	movs	r3, #0
 80043ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80043bc:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 80043c0:	460b      	mov	r3, r1
 80043c2:	4313      	orrs	r3, r2
 80043c4:	d009      	beq.n	80043da <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80043c6:	4b78      	ldr	r3, [pc, #480]	@ (80045a8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80043c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80043ca:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 80043ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80043d2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80043d4:	4a74      	ldr	r2, [pc, #464]	@ (80045a8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80043d6:	430b      	orrs	r3, r1
 80043d8:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80043da:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80043de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043e2:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 80043e6:	633b      	str	r3, [r7, #48]	@ 0x30
 80043e8:	2300      	movs	r3, #0
 80043ea:	637b      	str	r3, [r7, #52]	@ 0x34
 80043ec:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 80043f0:	460b      	mov	r3, r1
 80043f2:	4313      	orrs	r3, r2
 80043f4:	d00a      	beq.n	800440c <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80043f6:	4b6c      	ldr	r3, [pc, #432]	@ (80045a8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80043f8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80043fa:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 80043fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004402:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004406:	4a68      	ldr	r2, [pc, #416]	@ (80045a8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004408:	430b      	orrs	r3, r1
 800440a:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800440c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004410:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004414:	2100      	movs	r1, #0
 8004416:	62b9      	str	r1, [r7, #40]	@ 0x28
 8004418:	f003 0301 	and.w	r3, r3, #1
 800441c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800441e:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8004422:	460b      	mov	r3, r1
 8004424:	4313      	orrs	r3, r2
 8004426:	d011      	beq.n	800444c <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004428:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800442c:	3308      	adds	r3, #8
 800442e:	2100      	movs	r1, #0
 8004430:	4618      	mov	r0, r3
 8004432:	f000 fb79 	bl	8004b28 <RCCEx_PLL2_Config>
 8004436:	4603      	mov	r3, r0
 8004438:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800443c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004440:	2b00      	cmp	r3, #0
 8004442:	d003      	beq.n	800444c <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004444:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004448:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800444c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004450:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004454:	2100      	movs	r1, #0
 8004456:	6239      	str	r1, [r7, #32]
 8004458:	f003 0302 	and.w	r3, r3, #2
 800445c:	627b      	str	r3, [r7, #36]	@ 0x24
 800445e:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8004462:	460b      	mov	r3, r1
 8004464:	4313      	orrs	r3, r2
 8004466:	d011      	beq.n	800448c <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004468:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800446c:	3308      	adds	r3, #8
 800446e:	2101      	movs	r1, #1
 8004470:	4618      	mov	r0, r3
 8004472:	f000 fb59 	bl	8004b28 <RCCEx_PLL2_Config>
 8004476:	4603      	mov	r3, r0
 8004478:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800447c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004480:	2b00      	cmp	r3, #0
 8004482:	d003      	beq.n	800448c <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004484:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004488:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800448c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004490:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004494:	2100      	movs	r1, #0
 8004496:	61b9      	str	r1, [r7, #24]
 8004498:	f003 0304 	and.w	r3, r3, #4
 800449c:	61fb      	str	r3, [r7, #28]
 800449e:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80044a2:	460b      	mov	r3, r1
 80044a4:	4313      	orrs	r3, r2
 80044a6:	d011      	beq.n	80044cc <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80044a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80044ac:	3308      	adds	r3, #8
 80044ae:	2102      	movs	r1, #2
 80044b0:	4618      	mov	r0, r3
 80044b2:	f000 fb39 	bl	8004b28 <RCCEx_PLL2_Config>
 80044b6:	4603      	mov	r3, r0
 80044b8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 80044bc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d003      	beq.n	80044cc <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80044c4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80044c8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 80044cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80044d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044d4:	2100      	movs	r1, #0
 80044d6:	6139      	str	r1, [r7, #16]
 80044d8:	f003 0308 	and.w	r3, r3, #8
 80044dc:	617b      	str	r3, [r7, #20]
 80044de:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80044e2:	460b      	mov	r3, r1
 80044e4:	4313      	orrs	r3, r2
 80044e6:	d011      	beq.n	800450c <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80044e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80044ec:	3328      	adds	r3, #40	@ 0x28
 80044ee:	2100      	movs	r1, #0
 80044f0:	4618      	mov	r0, r3
 80044f2:	f000 fbcb 	bl	8004c8c <RCCEx_PLL3_Config>
 80044f6:	4603      	mov	r3, r0
 80044f8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  
    if (ret == HAL_OK)
 80044fc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004500:	2b00      	cmp	r3, #0
 8004502:	d003      	beq.n	800450c <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004504:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004508:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800450c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004510:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004514:	2100      	movs	r1, #0
 8004516:	60b9      	str	r1, [r7, #8]
 8004518:	f003 0310 	and.w	r3, r3, #16
 800451c:	60fb      	str	r3, [r7, #12]
 800451e:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8004522:	460b      	mov	r3, r1
 8004524:	4313      	orrs	r3, r2
 8004526:	d011      	beq.n	800454c <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004528:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800452c:	3328      	adds	r3, #40	@ 0x28
 800452e:	2101      	movs	r1, #1
 8004530:	4618      	mov	r0, r3
 8004532:	f000 fbab 	bl	8004c8c <RCCEx_PLL3_Config>
 8004536:	4603      	mov	r3, r0
 8004538:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800453c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004540:	2b00      	cmp	r3, #0
 8004542:	d003      	beq.n	800454c <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004544:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004548:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800454c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004550:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004554:	2100      	movs	r1, #0
 8004556:	6039      	str	r1, [r7, #0]
 8004558:	f003 0320 	and.w	r3, r3, #32
 800455c:	607b      	str	r3, [r7, #4]
 800455e:	e9d7 1200 	ldrd	r1, r2, [r7]
 8004562:	460b      	mov	r3, r1
 8004564:	4313      	orrs	r3, r2
 8004566:	d011      	beq.n	800458c <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004568:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800456c:	3328      	adds	r3, #40	@ 0x28
 800456e:	2102      	movs	r1, #2
 8004570:	4618      	mov	r0, r3
 8004572:	f000 fb8b 	bl	8004c8c <RCCEx_PLL3_Config>
 8004576:	4603      	mov	r3, r0
 8004578:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800457c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004580:	2b00      	cmp	r3, #0
 8004582:	d003      	beq.n	800458c <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004584:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004588:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }

  if (status == HAL_OK)
 800458c:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 8004590:	2b00      	cmp	r3, #0
 8004592:	d101      	bne.n	8004598 <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 8004594:	2300      	movs	r3, #0
 8004596:	e000      	b.n	800459a <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 8004598:	2301      	movs	r3, #1
}
 800459a:	4618      	mov	r0, r3
 800459c:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 80045a0:	46bd      	mov	sp, r7
 80045a2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80045a6:	bf00      	nop
 80045a8:	58024400 	.word	0x58024400

080045ac <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80045ac:	b580      	push	{r7, lr}
 80045ae:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80045b0:	f7fe fe00 	bl	80031b4 <HAL_RCC_GetHCLKFreq>
 80045b4:	4602      	mov	r2, r0
 80045b6:	4b06      	ldr	r3, [pc, #24]	@ (80045d0 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80045b8:	6a1b      	ldr	r3, [r3, #32]
 80045ba:	091b      	lsrs	r3, r3, #4
 80045bc:	f003 0307 	and.w	r3, r3, #7
 80045c0:	4904      	ldr	r1, [pc, #16]	@ (80045d4 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80045c2:	5ccb      	ldrb	r3, [r1, r3]
 80045c4:	f003 031f 	and.w	r3, r3, #31
 80045c8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 80045cc:	4618      	mov	r0, r3
 80045ce:	bd80      	pop	{r7, pc}
 80045d0:	58024400 	.word	0x58024400
 80045d4:	0801bb04 	.word	0x0801bb04

080045d8 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 80045d8:	b480      	push	{r7}
 80045da:	b089      	sub	sp, #36	@ 0x24
 80045dc:	af00      	add	r7, sp, #0
 80045de:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80045e0:	4ba1      	ldr	r3, [pc, #644]	@ (8004868 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80045e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80045e4:	f003 0303 	and.w	r3, r3, #3
 80045e8:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 80045ea:	4b9f      	ldr	r3, [pc, #636]	@ (8004868 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80045ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80045ee:	0b1b      	lsrs	r3, r3, #12
 80045f0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80045f4:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80045f6:	4b9c      	ldr	r3, [pc, #624]	@ (8004868 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80045f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045fa:	091b      	lsrs	r3, r3, #4
 80045fc:	f003 0301 	and.w	r3, r3, #1
 8004600:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8004602:	4b99      	ldr	r3, [pc, #612]	@ (8004868 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004604:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004606:	08db      	lsrs	r3, r3, #3
 8004608:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800460c:	693a      	ldr	r2, [r7, #16]
 800460e:	fb02 f303 	mul.w	r3, r2, r3
 8004612:	ee07 3a90 	vmov	s15, r3
 8004616:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800461a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800461e:	697b      	ldr	r3, [r7, #20]
 8004620:	2b00      	cmp	r3, #0
 8004622:	f000 8111 	beq.w	8004848 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8004626:	69bb      	ldr	r3, [r7, #24]
 8004628:	2b02      	cmp	r3, #2
 800462a:	f000 8083 	beq.w	8004734 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800462e:	69bb      	ldr	r3, [r7, #24]
 8004630:	2b02      	cmp	r3, #2
 8004632:	f200 80a1 	bhi.w	8004778 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8004636:	69bb      	ldr	r3, [r7, #24]
 8004638:	2b00      	cmp	r3, #0
 800463a:	d003      	beq.n	8004644 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800463c:	69bb      	ldr	r3, [r7, #24]
 800463e:	2b01      	cmp	r3, #1
 8004640:	d056      	beq.n	80046f0 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8004642:	e099      	b.n	8004778 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004644:	4b88      	ldr	r3, [pc, #544]	@ (8004868 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	f003 0320 	and.w	r3, r3, #32
 800464c:	2b00      	cmp	r3, #0
 800464e:	d02d      	beq.n	80046ac <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004650:	4b85      	ldr	r3, [pc, #532]	@ (8004868 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	08db      	lsrs	r3, r3, #3
 8004656:	f003 0303 	and.w	r3, r3, #3
 800465a:	4a84      	ldr	r2, [pc, #528]	@ (800486c <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800465c:	fa22 f303 	lsr.w	r3, r2, r3
 8004660:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004662:	68bb      	ldr	r3, [r7, #8]
 8004664:	ee07 3a90 	vmov	s15, r3
 8004668:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800466c:	697b      	ldr	r3, [r7, #20]
 800466e:	ee07 3a90 	vmov	s15, r3
 8004672:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004676:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800467a:	4b7b      	ldr	r3, [pc, #492]	@ (8004868 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800467c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800467e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004682:	ee07 3a90 	vmov	s15, r3
 8004686:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800468a:	ed97 6a03 	vldr	s12, [r7, #12]
 800468e:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8004870 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004692:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004696:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800469a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800469e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80046a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80046a6:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80046aa:	e087      	b.n	80047bc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80046ac:	697b      	ldr	r3, [r7, #20]
 80046ae:	ee07 3a90 	vmov	s15, r3
 80046b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80046b6:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8004874 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80046ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80046be:	4b6a      	ldr	r3, [pc, #424]	@ (8004868 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80046c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80046c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80046c6:	ee07 3a90 	vmov	s15, r3
 80046ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80046ce:	ed97 6a03 	vldr	s12, [r7, #12]
 80046d2:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8004870 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80046d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80046da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80046de:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80046e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80046e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80046ea:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80046ee:	e065      	b.n	80047bc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80046f0:	697b      	ldr	r3, [r7, #20]
 80046f2:	ee07 3a90 	vmov	s15, r3
 80046f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80046fa:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8004878 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80046fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004702:	4b59      	ldr	r3, [pc, #356]	@ (8004868 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004704:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004706:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800470a:	ee07 3a90 	vmov	s15, r3
 800470e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004712:	ed97 6a03 	vldr	s12, [r7, #12]
 8004716:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8004870 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800471a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800471e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004722:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004726:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800472a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800472e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004732:	e043      	b.n	80047bc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004734:	697b      	ldr	r3, [r7, #20]
 8004736:	ee07 3a90 	vmov	s15, r3
 800473a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800473e:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800487c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8004742:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004746:	4b48      	ldr	r3, [pc, #288]	@ (8004868 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004748:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800474a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800474e:	ee07 3a90 	vmov	s15, r3
 8004752:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004756:	ed97 6a03 	vldr	s12, [r7, #12]
 800475a:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8004870 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800475e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004762:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004766:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800476a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800476e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004772:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004776:	e021      	b.n	80047bc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004778:	697b      	ldr	r3, [r7, #20]
 800477a:	ee07 3a90 	vmov	s15, r3
 800477e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004782:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8004878 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8004786:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800478a:	4b37      	ldr	r3, [pc, #220]	@ (8004868 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800478c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800478e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004792:	ee07 3a90 	vmov	s15, r3
 8004796:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800479a:	ed97 6a03 	vldr	s12, [r7, #12]
 800479e:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8004870 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80047a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80047a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80047aa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80047ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80047b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80047b6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80047ba:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 80047bc:	4b2a      	ldr	r3, [pc, #168]	@ (8004868 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80047be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80047c0:	0a5b      	lsrs	r3, r3, #9
 80047c2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80047c6:	ee07 3a90 	vmov	s15, r3
 80047ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80047ce:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80047d2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80047d6:	edd7 6a07 	vldr	s13, [r7, #28]
 80047da:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80047de:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80047e2:	ee17 2a90 	vmov	r2, s15
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 80047ea:	4b1f      	ldr	r3, [pc, #124]	@ (8004868 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80047ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80047ee:	0c1b      	lsrs	r3, r3, #16
 80047f0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80047f4:	ee07 3a90 	vmov	s15, r3
 80047f8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80047fc:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004800:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004804:	edd7 6a07 	vldr	s13, [r7, #28]
 8004808:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800480c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004810:	ee17 2a90 	vmov	r2, s15
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8004818:	4b13      	ldr	r3, [pc, #76]	@ (8004868 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800481a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800481c:	0e1b      	lsrs	r3, r3, #24
 800481e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004822:	ee07 3a90 	vmov	s15, r3
 8004826:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800482a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800482e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004832:	edd7 6a07 	vldr	s13, [r7, #28]
 8004836:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800483a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800483e:	ee17 2a90 	vmov	r2, s15
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8004846:	e008      	b.n	800485a <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	2200      	movs	r2, #0
 800484c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	2200      	movs	r2, #0
 8004852:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	2200      	movs	r2, #0
 8004858:	609a      	str	r2, [r3, #8]
}
 800485a:	bf00      	nop
 800485c:	3724      	adds	r7, #36	@ 0x24
 800485e:	46bd      	mov	sp, r7
 8004860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004864:	4770      	bx	lr
 8004866:	bf00      	nop
 8004868:	58024400 	.word	0x58024400
 800486c:	03d09000 	.word	0x03d09000
 8004870:	46000000 	.word	0x46000000
 8004874:	4c742400 	.word	0x4c742400
 8004878:	4a742400 	.word	0x4a742400
 800487c:	4bbebc20 	.word	0x4bbebc20

08004880 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8004880:	b480      	push	{r7}
 8004882:	b089      	sub	sp, #36	@ 0x24
 8004884:	af00      	add	r7, sp, #0
 8004886:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004888:	4ba1      	ldr	r3, [pc, #644]	@ (8004b10 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800488a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800488c:	f003 0303 	and.w	r3, r3, #3
 8004890:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8004892:	4b9f      	ldr	r3, [pc, #636]	@ (8004b10 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004894:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004896:	0d1b      	lsrs	r3, r3, #20
 8004898:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800489c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800489e:	4b9c      	ldr	r3, [pc, #624]	@ (8004b10 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80048a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048a2:	0a1b      	lsrs	r3, r3, #8
 80048a4:	f003 0301 	and.w	r3, r3, #1
 80048a8:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 80048aa:	4b99      	ldr	r3, [pc, #612]	@ (8004b10 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80048ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80048ae:	08db      	lsrs	r3, r3, #3
 80048b0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80048b4:	693a      	ldr	r2, [r7, #16]
 80048b6:	fb02 f303 	mul.w	r3, r2, r3
 80048ba:	ee07 3a90 	vmov	s15, r3
 80048be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80048c2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80048c6:	697b      	ldr	r3, [r7, #20]
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	f000 8111 	beq.w	8004af0 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80048ce:	69bb      	ldr	r3, [r7, #24]
 80048d0:	2b02      	cmp	r3, #2
 80048d2:	f000 8083 	beq.w	80049dc <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80048d6:	69bb      	ldr	r3, [r7, #24]
 80048d8:	2b02      	cmp	r3, #2
 80048da:	f200 80a1 	bhi.w	8004a20 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80048de:	69bb      	ldr	r3, [r7, #24]
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d003      	beq.n	80048ec <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80048e4:	69bb      	ldr	r3, [r7, #24]
 80048e6:	2b01      	cmp	r3, #1
 80048e8:	d056      	beq.n	8004998 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80048ea:	e099      	b.n	8004a20 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80048ec:	4b88      	ldr	r3, [pc, #544]	@ (8004b10 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	f003 0320 	and.w	r3, r3, #32
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d02d      	beq.n	8004954 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80048f8:	4b85      	ldr	r3, [pc, #532]	@ (8004b10 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	08db      	lsrs	r3, r3, #3
 80048fe:	f003 0303 	and.w	r3, r3, #3
 8004902:	4a84      	ldr	r2, [pc, #528]	@ (8004b14 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8004904:	fa22 f303 	lsr.w	r3, r2, r3
 8004908:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800490a:	68bb      	ldr	r3, [r7, #8]
 800490c:	ee07 3a90 	vmov	s15, r3
 8004910:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004914:	697b      	ldr	r3, [r7, #20]
 8004916:	ee07 3a90 	vmov	s15, r3
 800491a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800491e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004922:	4b7b      	ldr	r3, [pc, #492]	@ (8004b10 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004924:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004926:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800492a:	ee07 3a90 	vmov	s15, r3
 800492e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004932:	ed97 6a03 	vldr	s12, [r7, #12]
 8004936:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8004b18 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800493a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800493e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004942:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004946:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800494a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800494e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8004952:	e087      	b.n	8004a64 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004954:	697b      	ldr	r3, [r7, #20]
 8004956:	ee07 3a90 	vmov	s15, r3
 800495a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800495e:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8004b1c <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8004962:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004966:	4b6a      	ldr	r3, [pc, #424]	@ (8004b10 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004968:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800496a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800496e:	ee07 3a90 	vmov	s15, r3
 8004972:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004976:	ed97 6a03 	vldr	s12, [r7, #12]
 800497a:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8004b18 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800497e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004982:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004986:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800498a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800498e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004992:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004996:	e065      	b.n	8004a64 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004998:	697b      	ldr	r3, [r7, #20]
 800499a:	ee07 3a90 	vmov	s15, r3
 800499e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80049a2:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8004b20 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80049a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80049aa:	4b59      	ldr	r3, [pc, #356]	@ (8004b10 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80049ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80049b2:	ee07 3a90 	vmov	s15, r3
 80049b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80049ba:	ed97 6a03 	vldr	s12, [r7, #12]
 80049be:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8004b18 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80049c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80049c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80049ca:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80049ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80049d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80049d6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80049da:	e043      	b.n	8004a64 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80049dc:	697b      	ldr	r3, [r7, #20]
 80049de:	ee07 3a90 	vmov	s15, r3
 80049e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80049e6:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8004b24 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80049ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80049ee:	4b48      	ldr	r3, [pc, #288]	@ (8004b10 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80049f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80049f6:	ee07 3a90 	vmov	s15, r3
 80049fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80049fe:	ed97 6a03 	vldr	s12, [r7, #12]
 8004a02:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8004b18 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004a06:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004a0a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004a0e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004a12:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004a16:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004a1a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004a1e:	e021      	b.n	8004a64 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004a20:	697b      	ldr	r3, [r7, #20]
 8004a22:	ee07 3a90 	vmov	s15, r3
 8004a26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a2a:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8004b20 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004a2e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004a32:	4b37      	ldr	r3, [pc, #220]	@ (8004b10 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004a34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a36:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a3a:	ee07 3a90 	vmov	s15, r3
 8004a3e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004a42:	ed97 6a03 	vldr	s12, [r7, #12]
 8004a46:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8004b18 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004a4a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004a4e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004a52:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004a56:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004a5a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004a5e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004a62:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8004a64:	4b2a      	ldr	r3, [pc, #168]	@ (8004b10 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004a66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a68:	0a5b      	lsrs	r3, r3, #9
 8004a6a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004a6e:	ee07 3a90 	vmov	s15, r3
 8004a72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a76:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004a7a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004a7e:	edd7 6a07 	vldr	s13, [r7, #28]
 8004a82:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004a86:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004a8a:	ee17 2a90 	vmov	r2, s15
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8004a92:	4b1f      	ldr	r3, [pc, #124]	@ (8004b10 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004a94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a96:	0c1b      	lsrs	r3, r3, #16
 8004a98:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004a9c:	ee07 3a90 	vmov	s15, r3
 8004aa0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004aa4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004aa8:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004aac:	edd7 6a07 	vldr	s13, [r7, #28]
 8004ab0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004ab4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004ab8:	ee17 2a90 	vmov	r2, s15
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8004ac0:	4b13      	ldr	r3, [pc, #76]	@ (8004b10 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004ac2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ac4:	0e1b      	lsrs	r3, r3, #24
 8004ac6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004aca:	ee07 3a90 	vmov	s15, r3
 8004ace:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ad2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004ad6:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004ada:	edd7 6a07 	vldr	s13, [r7, #28]
 8004ade:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004ae2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004ae6:	ee17 2a90 	vmov	r2, s15
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8004aee:	e008      	b.n	8004b02 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	2200      	movs	r2, #0
 8004af4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	2200      	movs	r2, #0
 8004afa:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	2200      	movs	r2, #0
 8004b00:	609a      	str	r2, [r3, #8]
}
 8004b02:	bf00      	nop
 8004b04:	3724      	adds	r7, #36	@ 0x24
 8004b06:	46bd      	mov	sp, r7
 8004b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b0c:	4770      	bx	lr
 8004b0e:	bf00      	nop
 8004b10:	58024400 	.word	0x58024400
 8004b14:	03d09000 	.word	0x03d09000
 8004b18:	46000000 	.word	0x46000000
 8004b1c:	4c742400 	.word	0x4c742400
 8004b20:	4a742400 	.word	0x4a742400
 8004b24:	4bbebc20 	.word	0x4bbebc20

08004b28 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8004b28:	b580      	push	{r7, lr}
 8004b2a:	b084      	sub	sp, #16
 8004b2c:	af00      	add	r7, sp, #0
 8004b2e:	6078      	str	r0, [r7, #4]
 8004b30:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004b32:	2300      	movs	r3, #0
 8004b34:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004b36:	4b53      	ldr	r3, [pc, #332]	@ (8004c84 <RCCEx_PLL2_Config+0x15c>)
 8004b38:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b3a:	f003 0303 	and.w	r3, r3, #3
 8004b3e:	2b03      	cmp	r3, #3
 8004b40:	d101      	bne.n	8004b46 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8004b42:	2301      	movs	r3, #1
 8004b44:	e099      	b.n	8004c7a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8004b46:	4b4f      	ldr	r3, [pc, #316]	@ (8004c84 <RCCEx_PLL2_Config+0x15c>)
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	4a4e      	ldr	r2, [pc, #312]	@ (8004c84 <RCCEx_PLL2_Config+0x15c>)
 8004b4c:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004b50:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004b52:	f7fd f8f5 	bl	8001d40 <HAL_GetTick>
 8004b56:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004b58:	e008      	b.n	8004b6c <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004b5a:	f7fd f8f1 	bl	8001d40 <HAL_GetTick>
 8004b5e:	4602      	mov	r2, r0
 8004b60:	68bb      	ldr	r3, [r7, #8]
 8004b62:	1ad3      	subs	r3, r2, r3
 8004b64:	2b02      	cmp	r3, #2
 8004b66:	d901      	bls.n	8004b6c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004b68:	2303      	movs	r3, #3
 8004b6a:	e086      	b.n	8004c7a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004b6c:	4b45      	ldr	r3, [pc, #276]	@ (8004c84 <RCCEx_PLL2_Config+0x15c>)
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d1f0      	bne.n	8004b5a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8004b78:	4b42      	ldr	r3, [pc, #264]	@ (8004c84 <RCCEx_PLL2_Config+0x15c>)
 8004b7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b7c:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	031b      	lsls	r3, r3, #12
 8004b86:	493f      	ldr	r1, [pc, #252]	@ (8004c84 <RCCEx_PLL2_Config+0x15c>)
 8004b88:	4313      	orrs	r3, r2
 8004b8a:	628b      	str	r3, [r1, #40]	@ 0x28
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	685b      	ldr	r3, [r3, #4]
 8004b90:	3b01      	subs	r3, #1
 8004b92:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	689b      	ldr	r3, [r3, #8]
 8004b9a:	3b01      	subs	r3, #1
 8004b9c:	025b      	lsls	r3, r3, #9
 8004b9e:	b29b      	uxth	r3, r3
 8004ba0:	431a      	orrs	r2, r3
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	68db      	ldr	r3, [r3, #12]
 8004ba6:	3b01      	subs	r3, #1
 8004ba8:	041b      	lsls	r3, r3, #16
 8004baa:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8004bae:	431a      	orrs	r2, r3
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	691b      	ldr	r3, [r3, #16]
 8004bb4:	3b01      	subs	r3, #1
 8004bb6:	061b      	lsls	r3, r3, #24
 8004bb8:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8004bbc:	4931      	ldr	r1, [pc, #196]	@ (8004c84 <RCCEx_PLL2_Config+0x15c>)
 8004bbe:	4313      	orrs	r3, r2
 8004bc0:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8004bc2:	4b30      	ldr	r3, [pc, #192]	@ (8004c84 <RCCEx_PLL2_Config+0x15c>)
 8004bc4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004bc6:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	695b      	ldr	r3, [r3, #20]
 8004bce:	492d      	ldr	r1, [pc, #180]	@ (8004c84 <RCCEx_PLL2_Config+0x15c>)
 8004bd0:	4313      	orrs	r3, r2
 8004bd2:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8004bd4:	4b2b      	ldr	r3, [pc, #172]	@ (8004c84 <RCCEx_PLL2_Config+0x15c>)
 8004bd6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004bd8:	f023 0220 	bic.w	r2, r3, #32
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	699b      	ldr	r3, [r3, #24]
 8004be0:	4928      	ldr	r1, [pc, #160]	@ (8004c84 <RCCEx_PLL2_Config+0x15c>)
 8004be2:	4313      	orrs	r3, r2
 8004be4:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8004be6:	4b27      	ldr	r3, [pc, #156]	@ (8004c84 <RCCEx_PLL2_Config+0x15c>)
 8004be8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004bea:	4a26      	ldr	r2, [pc, #152]	@ (8004c84 <RCCEx_PLL2_Config+0x15c>)
 8004bec:	f023 0310 	bic.w	r3, r3, #16
 8004bf0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8004bf2:	4b24      	ldr	r3, [pc, #144]	@ (8004c84 <RCCEx_PLL2_Config+0x15c>)
 8004bf4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004bf6:	4b24      	ldr	r3, [pc, #144]	@ (8004c88 <RCCEx_PLL2_Config+0x160>)
 8004bf8:	4013      	ands	r3, r2
 8004bfa:	687a      	ldr	r2, [r7, #4]
 8004bfc:	69d2      	ldr	r2, [r2, #28]
 8004bfe:	00d2      	lsls	r2, r2, #3
 8004c00:	4920      	ldr	r1, [pc, #128]	@ (8004c84 <RCCEx_PLL2_Config+0x15c>)
 8004c02:	4313      	orrs	r3, r2
 8004c04:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8004c06:	4b1f      	ldr	r3, [pc, #124]	@ (8004c84 <RCCEx_PLL2_Config+0x15c>)
 8004c08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c0a:	4a1e      	ldr	r2, [pc, #120]	@ (8004c84 <RCCEx_PLL2_Config+0x15c>)
 8004c0c:	f043 0310 	orr.w	r3, r3, #16
 8004c10:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8004c12:	683b      	ldr	r3, [r7, #0]
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d106      	bne.n	8004c26 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8004c18:	4b1a      	ldr	r3, [pc, #104]	@ (8004c84 <RCCEx_PLL2_Config+0x15c>)
 8004c1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c1c:	4a19      	ldr	r2, [pc, #100]	@ (8004c84 <RCCEx_PLL2_Config+0x15c>)
 8004c1e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8004c22:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004c24:	e00f      	b.n	8004c46 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8004c26:	683b      	ldr	r3, [r7, #0]
 8004c28:	2b01      	cmp	r3, #1
 8004c2a:	d106      	bne.n	8004c3a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8004c2c:	4b15      	ldr	r3, [pc, #84]	@ (8004c84 <RCCEx_PLL2_Config+0x15c>)
 8004c2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c30:	4a14      	ldr	r2, [pc, #80]	@ (8004c84 <RCCEx_PLL2_Config+0x15c>)
 8004c32:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004c36:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004c38:	e005      	b.n	8004c46 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8004c3a:	4b12      	ldr	r3, [pc, #72]	@ (8004c84 <RCCEx_PLL2_Config+0x15c>)
 8004c3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c3e:	4a11      	ldr	r2, [pc, #68]	@ (8004c84 <RCCEx_PLL2_Config+0x15c>)
 8004c40:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8004c44:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8004c46:	4b0f      	ldr	r3, [pc, #60]	@ (8004c84 <RCCEx_PLL2_Config+0x15c>)
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	4a0e      	ldr	r2, [pc, #56]	@ (8004c84 <RCCEx_PLL2_Config+0x15c>)
 8004c4c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004c50:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004c52:	f7fd f875 	bl	8001d40 <HAL_GetTick>
 8004c56:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004c58:	e008      	b.n	8004c6c <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004c5a:	f7fd f871 	bl	8001d40 <HAL_GetTick>
 8004c5e:	4602      	mov	r2, r0
 8004c60:	68bb      	ldr	r3, [r7, #8]
 8004c62:	1ad3      	subs	r3, r2, r3
 8004c64:	2b02      	cmp	r3, #2
 8004c66:	d901      	bls.n	8004c6c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004c68:	2303      	movs	r3, #3
 8004c6a:	e006      	b.n	8004c7a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004c6c:	4b05      	ldr	r3, [pc, #20]	@ (8004c84 <RCCEx_PLL2_Config+0x15c>)
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d0f0      	beq.n	8004c5a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8004c78:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c7a:	4618      	mov	r0, r3
 8004c7c:	3710      	adds	r7, #16
 8004c7e:	46bd      	mov	sp, r7
 8004c80:	bd80      	pop	{r7, pc}
 8004c82:	bf00      	nop
 8004c84:	58024400 	.word	0x58024400
 8004c88:	ffff0007 	.word	0xffff0007

08004c8c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8004c8c:	b580      	push	{r7, lr}
 8004c8e:	b084      	sub	sp, #16
 8004c90:	af00      	add	r7, sp, #0
 8004c92:	6078      	str	r0, [r7, #4]
 8004c94:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004c96:	2300      	movs	r3, #0
 8004c98:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004c9a:	4b53      	ldr	r3, [pc, #332]	@ (8004de8 <RCCEx_PLL3_Config+0x15c>)
 8004c9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c9e:	f003 0303 	and.w	r3, r3, #3
 8004ca2:	2b03      	cmp	r3, #3
 8004ca4:	d101      	bne.n	8004caa <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8004ca6:	2301      	movs	r3, #1
 8004ca8:	e099      	b.n	8004dde <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8004caa:	4b4f      	ldr	r3, [pc, #316]	@ (8004de8 <RCCEx_PLL3_Config+0x15c>)
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	4a4e      	ldr	r2, [pc, #312]	@ (8004de8 <RCCEx_PLL3_Config+0x15c>)
 8004cb0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004cb4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004cb6:	f7fd f843 	bl	8001d40 <HAL_GetTick>
 8004cba:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004cbc:	e008      	b.n	8004cd0 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8004cbe:	f7fd f83f 	bl	8001d40 <HAL_GetTick>
 8004cc2:	4602      	mov	r2, r0
 8004cc4:	68bb      	ldr	r3, [r7, #8]
 8004cc6:	1ad3      	subs	r3, r2, r3
 8004cc8:	2b02      	cmp	r3, #2
 8004cca:	d901      	bls.n	8004cd0 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004ccc:	2303      	movs	r3, #3
 8004cce:	e086      	b.n	8004dde <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004cd0:	4b45      	ldr	r3, [pc, #276]	@ (8004de8 <RCCEx_PLL3_Config+0x15c>)
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d1f0      	bne.n	8004cbe <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8004cdc:	4b42      	ldr	r3, [pc, #264]	@ (8004de8 <RCCEx_PLL3_Config+0x15c>)
 8004cde:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ce0:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	051b      	lsls	r3, r3, #20
 8004cea:	493f      	ldr	r1, [pc, #252]	@ (8004de8 <RCCEx_PLL3_Config+0x15c>)
 8004cec:	4313      	orrs	r3, r2
 8004cee:	628b      	str	r3, [r1, #40]	@ 0x28
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	685b      	ldr	r3, [r3, #4]
 8004cf4:	3b01      	subs	r3, #1
 8004cf6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	689b      	ldr	r3, [r3, #8]
 8004cfe:	3b01      	subs	r3, #1
 8004d00:	025b      	lsls	r3, r3, #9
 8004d02:	b29b      	uxth	r3, r3
 8004d04:	431a      	orrs	r2, r3
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	68db      	ldr	r3, [r3, #12]
 8004d0a:	3b01      	subs	r3, #1
 8004d0c:	041b      	lsls	r3, r3, #16
 8004d0e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8004d12:	431a      	orrs	r2, r3
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	691b      	ldr	r3, [r3, #16]
 8004d18:	3b01      	subs	r3, #1
 8004d1a:	061b      	lsls	r3, r3, #24
 8004d1c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8004d20:	4931      	ldr	r1, [pc, #196]	@ (8004de8 <RCCEx_PLL3_Config+0x15c>)
 8004d22:	4313      	orrs	r3, r2
 8004d24:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8004d26:	4b30      	ldr	r3, [pc, #192]	@ (8004de8 <RCCEx_PLL3_Config+0x15c>)
 8004d28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d2a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	695b      	ldr	r3, [r3, #20]
 8004d32:	492d      	ldr	r1, [pc, #180]	@ (8004de8 <RCCEx_PLL3_Config+0x15c>)
 8004d34:	4313      	orrs	r3, r2
 8004d36:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8004d38:	4b2b      	ldr	r3, [pc, #172]	@ (8004de8 <RCCEx_PLL3_Config+0x15c>)
 8004d3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d3c:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	699b      	ldr	r3, [r3, #24]
 8004d44:	4928      	ldr	r1, [pc, #160]	@ (8004de8 <RCCEx_PLL3_Config+0x15c>)
 8004d46:	4313      	orrs	r3, r2
 8004d48:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8004d4a:	4b27      	ldr	r3, [pc, #156]	@ (8004de8 <RCCEx_PLL3_Config+0x15c>)
 8004d4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d4e:	4a26      	ldr	r2, [pc, #152]	@ (8004de8 <RCCEx_PLL3_Config+0x15c>)
 8004d50:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004d54:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8004d56:	4b24      	ldr	r3, [pc, #144]	@ (8004de8 <RCCEx_PLL3_Config+0x15c>)
 8004d58:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004d5a:	4b24      	ldr	r3, [pc, #144]	@ (8004dec <RCCEx_PLL3_Config+0x160>)
 8004d5c:	4013      	ands	r3, r2
 8004d5e:	687a      	ldr	r2, [r7, #4]
 8004d60:	69d2      	ldr	r2, [r2, #28]
 8004d62:	00d2      	lsls	r2, r2, #3
 8004d64:	4920      	ldr	r1, [pc, #128]	@ (8004de8 <RCCEx_PLL3_Config+0x15c>)
 8004d66:	4313      	orrs	r3, r2
 8004d68:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8004d6a:	4b1f      	ldr	r3, [pc, #124]	@ (8004de8 <RCCEx_PLL3_Config+0x15c>)
 8004d6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d6e:	4a1e      	ldr	r2, [pc, #120]	@ (8004de8 <RCCEx_PLL3_Config+0x15c>)
 8004d70:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004d74:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8004d76:	683b      	ldr	r3, [r7, #0]
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d106      	bne.n	8004d8a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8004d7c:	4b1a      	ldr	r3, [pc, #104]	@ (8004de8 <RCCEx_PLL3_Config+0x15c>)
 8004d7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d80:	4a19      	ldr	r2, [pc, #100]	@ (8004de8 <RCCEx_PLL3_Config+0x15c>)
 8004d82:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8004d86:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004d88:	e00f      	b.n	8004daa <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8004d8a:	683b      	ldr	r3, [r7, #0]
 8004d8c:	2b01      	cmp	r3, #1
 8004d8e:	d106      	bne.n	8004d9e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8004d90:	4b15      	ldr	r3, [pc, #84]	@ (8004de8 <RCCEx_PLL3_Config+0x15c>)
 8004d92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d94:	4a14      	ldr	r2, [pc, #80]	@ (8004de8 <RCCEx_PLL3_Config+0x15c>)
 8004d96:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004d9a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004d9c:	e005      	b.n	8004daa <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8004d9e:	4b12      	ldr	r3, [pc, #72]	@ (8004de8 <RCCEx_PLL3_Config+0x15c>)
 8004da0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004da2:	4a11      	ldr	r2, [pc, #68]	@ (8004de8 <RCCEx_PLL3_Config+0x15c>)
 8004da4:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004da8:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8004daa:	4b0f      	ldr	r3, [pc, #60]	@ (8004de8 <RCCEx_PLL3_Config+0x15c>)
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	4a0e      	ldr	r2, [pc, #56]	@ (8004de8 <RCCEx_PLL3_Config+0x15c>)
 8004db0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004db4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004db6:	f7fc ffc3 	bl	8001d40 <HAL_GetTick>
 8004dba:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004dbc:	e008      	b.n	8004dd0 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8004dbe:	f7fc ffbf 	bl	8001d40 <HAL_GetTick>
 8004dc2:	4602      	mov	r2, r0
 8004dc4:	68bb      	ldr	r3, [r7, #8]
 8004dc6:	1ad3      	subs	r3, r2, r3
 8004dc8:	2b02      	cmp	r3, #2
 8004dca:	d901      	bls.n	8004dd0 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004dcc:	2303      	movs	r3, #3
 8004dce:	e006      	b.n	8004dde <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004dd0:	4b05      	ldr	r3, [pc, #20]	@ (8004de8 <RCCEx_PLL3_Config+0x15c>)
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d0f0      	beq.n	8004dbe <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8004ddc:	7bfb      	ldrb	r3, [r7, #15]
}
 8004dde:	4618      	mov	r0, r3
 8004de0:	3710      	adds	r7, #16
 8004de2:	46bd      	mov	sp, r7
 8004de4:	bd80      	pop	{r7, pc}
 8004de6:	bf00      	nop
 8004de8:	58024400 	.word	0x58024400
 8004dec:	ffff0007 	.word	0xffff0007

08004df0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004df0:	b480      	push	{r7}
 8004df2:	b085      	sub	sp, #20
 8004df4:	af00      	add	r7, sp, #0
 8004df6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004dfe:	b2db      	uxtb	r3, r3
 8004e00:	2b01      	cmp	r3, #1
 8004e02:	d001      	beq.n	8004e08 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004e04:	2301      	movs	r3, #1
 8004e06:	e056      	b.n	8004eb6 <HAL_TIM_Base_Start+0xc6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	2202      	movs	r2, #2
 8004e0c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	4a2b      	ldr	r2, [pc, #172]	@ (8004ec4 <HAL_TIM_Base_Start+0xd4>)
 8004e16:	4293      	cmp	r3, r2
 8004e18:	d02c      	beq.n	8004e74 <HAL_TIM_Base_Start+0x84>
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004e22:	d027      	beq.n	8004e74 <HAL_TIM_Base_Start+0x84>
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	4a27      	ldr	r2, [pc, #156]	@ (8004ec8 <HAL_TIM_Base_Start+0xd8>)
 8004e2a:	4293      	cmp	r3, r2
 8004e2c:	d022      	beq.n	8004e74 <HAL_TIM_Base_Start+0x84>
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	4a26      	ldr	r2, [pc, #152]	@ (8004ecc <HAL_TIM_Base_Start+0xdc>)
 8004e34:	4293      	cmp	r3, r2
 8004e36:	d01d      	beq.n	8004e74 <HAL_TIM_Base_Start+0x84>
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	4a24      	ldr	r2, [pc, #144]	@ (8004ed0 <HAL_TIM_Base_Start+0xe0>)
 8004e3e:	4293      	cmp	r3, r2
 8004e40:	d018      	beq.n	8004e74 <HAL_TIM_Base_Start+0x84>
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	4a23      	ldr	r2, [pc, #140]	@ (8004ed4 <HAL_TIM_Base_Start+0xe4>)
 8004e48:	4293      	cmp	r3, r2
 8004e4a:	d013      	beq.n	8004e74 <HAL_TIM_Base_Start+0x84>
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	4a21      	ldr	r2, [pc, #132]	@ (8004ed8 <HAL_TIM_Base_Start+0xe8>)
 8004e52:	4293      	cmp	r3, r2
 8004e54:	d00e      	beq.n	8004e74 <HAL_TIM_Base_Start+0x84>
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	4a20      	ldr	r2, [pc, #128]	@ (8004edc <HAL_TIM_Base_Start+0xec>)
 8004e5c:	4293      	cmp	r3, r2
 8004e5e:	d009      	beq.n	8004e74 <HAL_TIM_Base_Start+0x84>
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	4a1e      	ldr	r2, [pc, #120]	@ (8004ee0 <HAL_TIM_Base_Start+0xf0>)
 8004e66:	4293      	cmp	r3, r2
 8004e68:	d004      	beq.n	8004e74 <HAL_TIM_Base_Start+0x84>
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	4a1d      	ldr	r2, [pc, #116]	@ (8004ee4 <HAL_TIM_Base_Start+0xf4>)
 8004e70:	4293      	cmp	r3, r2
 8004e72:	d115      	bne.n	8004ea0 <HAL_TIM_Base_Start+0xb0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	689a      	ldr	r2, [r3, #8]
 8004e7a:	4b1b      	ldr	r3, [pc, #108]	@ (8004ee8 <HAL_TIM_Base_Start+0xf8>)
 8004e7c:	4013      	ands	r3, r2
 8004e7e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	2b06      	cmp	r3, #6
 8004e84:	d015      	beq.n	8004eb2 <HAL_TIM_Base_Start+0xc2>
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004e8c:	d011      	beq.n	8004eb2 <HAL_TIM_Base_Start+0xc2>
    {
      __HAL_TIM_ENABLE(htim);
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	681a      	ldr	r2, [r3, #0]
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	f042 0201 	orr.w	r2, r2, #1
 8004e9c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e9e:	e008      	b.n	8004eb2 <HAL_TIM_Base_Start+0xc2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	681a      	ldr	r2, [r3, #0]
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	f042 0201 	orr.w	r2, r2, #1
 8004eae:	601a      	str	r2, [r3, #0]
 8004eb0:	e000      	b.n	8004eb4 <HAL_TIM_Base_Start+0xc4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004eb2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004eb4:	2300      	movs	r3, #0
}
 8004eb6:	4618      	mov	r0, r3
 8004eb8:	3714      	adds	r7, #20
 8004eba:	46bd      	mov	sp, r7
 8004ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec0:	4770      	bx	lr
 8004ec2:	bf00      	nop
 8004ec4:	40010000 	.word	0x40010000
 8004ec8:	40000400 	.word	0x40000400
 8004ecc:	40000800 	.word	0x40000800
 8004ed0:	40000c00 	.word	0x40000c00
 8004ed4:	40010400 	.word	0x40010400
 8004ed8:	40001800 	.word	0x40001800
 8004edc:	40014000 	.word	0x40014000
 8004ee0:	4000e000 	.word	0x4000e000
 8004ee4:	4000e400 	.word	0x4000e400
 8004ee8:	00010007 	.word	0x00010007

08004eec <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004eec:	b580      	push	{r7, lr}
 8004eee:	b082      	sub	sp, #8
 8004ef0:	af00      	add	r7, sp, #0
 8004ef2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d101      	bne.n	8004efe <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004efa:	2301      	movs	r3, #1
 8004efc:	e049      	b.n	8004f92 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004f04:	b2db      	uxtb	r3, r3
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d106      	bne.n	8004f18 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	2200      	movs	r2, #0
 8004f0e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004f12:	6878      	ldr	r0, [r7, #4]
 8004f14:	f7fc fc02 	bl	800171c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	2202      	movs	r2, #2
 8004f1c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681a      	ldr	r2, [r3, #0]
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	3304      	adds	r3, #4
 8004f28:	4619      	mov	r1, r3
 8004f2a:	4610      	mov	r0, r2
 8004f2c:	f000 f94a 	bl	80051c4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	2201      	movs	r2, #1
 8004f34:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	2201      	movs	r2, #1
 8004f3c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	2201      	movs	r2, #1
 8004f44:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	2201      	movs	r2, #1
 8004f4c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	2201      	movs	r2, #1
 8004f54:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	2201      	movs	r2, #1
 8004f5c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	2201      	movs	r2, #1
 8004f64:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	2201      	movs	r2, #1
 8004f6c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	2201      	movs	r2, #1
 8004f74:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	2201      	movs	r2, #1
 8004f7c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	2201      	movs	r2, #1
 8004f84:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	2201      	movs	r2, #1
 8004f8c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004f90:	2300      	movs	r3, #0
}
 8004f92:	4618      	mov	r0, r3
 8004f94:	3708      	adds	r7, #8
 8004f96:	46bd      	mov	sp, r7
 8004f98:	bd80      	pop	{r7, pc}
	...

08004f9c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004f9c:	b580      	push	{r7, lr}
 8004f9e:	b086      	sub	sp, #24
 8004fa0:	af00      	add	r7, sp, #0
 8004fa2:	60f8      	str	r0, [r7, #12]
 8004fa4:	60b9      	str	r1, [r7, #8]
 8004fa6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004fa8:	2300      	movs	r3, #0
 8004faa:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004fb2:	2b01      	cmp	r3, #1
 8004fb4:	d101      	bne.n	8004fba <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004fb6:	2302      	movs	r3, #2
 8004fb8:	e0ff      	b.n	80051ba <HAL_TIM_PWM_ConfigChannel+0x21e>
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	2201      	movs	r2, #1
 8004fbe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	2b14      	cmp	r3, #20
 8004fc6:	f200 80f0 	bhi.w	80051aa <HAL_TIM_PWM_ConfigChannel+0x20e>
 8004fca:	a201      	add	r2, pc, #4	@ (adr r2, 8004fd0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004fcc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fd0:	08005025 	.word	0x08005025
 8004fd4:	080051ab 	.word	0x080051ab
 8004fd8:	080051ab 	.word	0x080051ab
 8004fdc:	080051ab 	.word	0x080051ab
 8004fe0:	08005065 	.word	0x08005065
 8004fe4:	080051ab 	.word	0x080051ab
 8004fe8:	080051ab 	.word	0x080051ab
 8004fec:	080051ab 	.word	0x080051ab
 8004ff0:	080050a7 	.word	0x080050a7
 8004ff4:	080051ab 	.word	0x080051ab
 8004ff8:	080051ab 	.word	0x080051ab
 8004ffc:	080051ab 	.word	0x080051ab
 8005000:	080050e7 	.word	0x080050e7
 8005004:	080051ab 	.word	0x080051ab
 8005008:	080051ab 	.word	0x080051ab
 800500c:	080051ab 	.word	0x080051ab
 8005010:	08005129 	.word	0x08005129
 8005014:	080051ab 	.word	0x080051ab
 8005018:	080051ab 	.word	0x080051ab
 800501c:	080051ab 	.word	0x080051ab
 8005020:	08005169 	.word	0x08005169
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	68b9      	ldr	r1, [r7, #8]
 800502a:	4618      	mov	r0, r3
 800502c:	f000 f97c 	bl	8005328 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	699a      	ldr	r2, [r3, #24]
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	f042 0208 	orr.w	r2, r2, #8
 800503e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	699a      	ldr	r2, [r3, #24]
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	f022 0204 	bic.w	r2, r2, #4
 800504e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	6999      	ldr	r1, [r3, #24]
 8005056:	68bb      	ldr	r3, [r7, #8]
 8005058:	691a      	ldr	r2, [r3, #16]
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	430a      	orrs	r2, r1
 8005060:	619a      	str	r2, [r3, #24]
      break;
 8005062:	e0a5      	b.n	80051b0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	68b9      	ldr	r1, [r7, #8]
 800506a:	4618      	mov	r0, r3
 800506c:	f000 f9ec 	bl	8005448 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	699a      	ldr	r2, [r3, #24]
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800507e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	699a      	ldr	r2, [r3, #24]
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800508e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	6999      	ldr	r1, [r3, #24]
 8005096:	68bb      	ldr	r3, [r7, #8]
 8005098:	691b      	ldr	r3, [r3, #16]
 800509a:	021a      	lsls	r2, r3, #8
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	430a      	orrs	r2, r1
 80050a2:	619a      	str	r2, [r3, #24]
      break;
 80050a4:	e084      	b.n	80051b0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	68b9      	ldr	r1, [r7, #8]
 80050ac:	4618      	mov	r0, r3
 80050ae:	f000 fa55 	bl	800555c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	69da      	ldr	r2, [r3, #28]
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	f042 0208 	orr.w	r2, r2, #8
 80050c0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	69da      	ldr	r2, [r3, #28]
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	f022 0204 	bic.w	r2, r2, #4
 80050d0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	69d9      	ldr	r1, [r3, #28]
 80050d8:	68bb      	ldr	r3, [r7, #8]
 80050da:	691a      	ldr	r2, [r3, #16]
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	430a      	orrs	r2, r1
 80050e2:	61da      	str	r2, [r3, #28]
      break;
 80050e4:	e064      	b.n	80051b0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	68b9      	ldr	r1, [r7, #8]
 80050ec:	4618      	mov	r0, r3
 80050ee:	f000 fabd 	bl	800566c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	69da      	ldr	r2, [r3, #28]
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005100:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	69da      	ldr	r2, [r3, #28]
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005110:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	69d9      	ldr	r1, [r3, #28]
 8005118:	68bb      	ldr	r3, [r7, #8]
 800511a:	691b      	ldr	r3, [r3, #16]
 800511c:	021a      	lsls	r2, r3, #8
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	430a      	orrs	r2, r1
 8005124:	61da      	str	r2, [r3, #28]
      break;
 8005126:	e043      	b.n	80051b0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	68b9      	ldr	r1, [r7, #8]
 800512e:	4618      	mov	r0, r3
 8005130:	f000 fb06 	bl	8005740 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	f042 0208 	orr.w	r2, r2, #8
 8005142:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	f022 0204 	bic.w	r2, r2, #4
 8005152:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800515a:	68bb      	ldr	r3, [r7, #8]
 800515c:	691a      	ldr	r2, [r3, #16]
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	430a      	orrs	r2, r1
 8005164:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8005166:	e023      	b.n	80051b0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	68b9      	ldr	r1, [r7, #8]
 800516e:	4618      	mov	r0, r3
 8005170:	f000 fb4a 	bl	8005808 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005182:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005192:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800519a:	68bb      	ldr	r3, [r7, #8]
 800519c:	691b      	ldr	r3, [r3, #16]
 800519e:	021a      	lsls	r2, r3, #8
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	430a      	orrs	r2, r1
 80051a6:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80051a8:	e002      	b.n	80051b0 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80051aa:	2301      	movs	r3, #1
 80051ac:	75fb      	strb	r3, [r7, #23]
      break;
 80051ae:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	2200      	movs	r2, #0
 80051b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80051b8:	7dfb      	ldrb	r3, [r7, #23]
}
 80051ba:	4618      	mov	r0, r3
 80051bc:	3718      	adds	r7, #24
 80051be:	46bd      	mov	sp, r7
 80051c0:	bd80      	pop	{r7, pc}
 80051c2:	bf00      	nop

080051c4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80051c4:	b480      	push	{r7}
 80051c6:	b085      	sub	sp, #20
 80051c8:	af00      	add	r7, sp, #0
 80051ca:	6078      	str	r0, [r7, #4]
 80051cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	4a4a      	ldr	r2, [pc, #296]	@ (8005300 <TIM_Base_SetConfig+0x13c>)
 80051d8:	4293      	cmp	r3, r2
 80051da:	d013      	beq.n	8005204 <TIM_Base_SetConfig+0x40>
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80051e2:	d00f      	beq.n	8005204 <TIM_Base_SetConfig+0x40>
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	4a47      	ldr	r2, [pc, #284]	@ (8005304 <TIM_Base_SetConfig+0x140>)
 80051e8:	4293      	cmp	r3, r2
 80051ea:	d00b      	beq.n	8005204 <TIM_Base_SetConfig+0x40>
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	4a46      	ldr	r2, [pc, #280]	@ (8005308 <TIM_Base_SetConfig+0x144>)
 80051f0:	4293      	cmp	r3, r2
 80051f2:	d007      	beq.n	8005204 <TIM_Base_SetConfig+0x40>
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	4a45      	ldr	r2, [pc, #276]	@ (800530c <TIM_Base_SetConfig+0x148>)
 80051f8:	4293      	cmp	r3, r2
 80051fa:	d003      	beq.n	8005204 <TIM_Base_SetConfig+0x40>
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	4a44      	ldr	r2, [pc, #272]	@ (8005310 <TIM_Base_SetConfig+0x14c>)
 8005200:	4293      	cmp	r3, r2
 8005202:	d108      	bne.n	8005216 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800520a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800520c:	683b      	ldr	r3, [r7, #0]
 800520e:	685b      	ldr	r3, [r3, #4]
 8005210:	68fa      	ldr	r2, [r7, #12]
 8005212:	4313      	orrs	r3, r2
 8005214:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	4a39      	ldr	r2, [pc, #228]	@ (8005300 <TIM_Base_SetConfig+0x13c>)
 800521a:	4293      	cmp	r3, r2
 800521c:	d027      	beq.n	800526e <TIM_Base_SetConfig+0xaa>
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005224:	d023      	beq.n	800526e <TIM_Base_SetConfig+0xaa>
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	4a36      	ldr	r2, [pc, #216]	@ (8005304 <TIM_Base_SetConfig+0x140>)
 800522a:	4293      	cmp	r3, r2
 800522c:	d01f      	beq.n	800526e <TIM_Base_SetConfig+0xaa>
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	4a35      	ldr	r2, [pc, #212]	@ (8005308 <TIM_Base_SetConfig+0x144>)
 8005232:	4293      	cmp	r3, r2
 8005234:	d01b      	beq.n	800526e <TIM_Base_SetConfig+0xaa>
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	4a34      	ldr	r2, [pc, #208]	@ (800530c <TIM_Base_SetConfig+0x148>)
 800523a:	4293      	cmp	r3, r2
 800523c:	d017      	beq.n	800526e <TIM_Base_SetConfig+0xaa>
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	4a33      	ldr	r2, [pc, #204]	@ (8005310 <TIM_Base_SetConfig+0x14c>)
 8005242:	4293      	cmp	r3, r2
 8005244:	d013      	beq.n	800526e <TIM_Base_SetConfig+0xaa>
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	4a32      	ldr	r2, [pc, #200]	@ (8005314 <TIM_Base_SetConfig+0x150>)
 800524a:	4293      	cmp	r3, r2
 800524c:	d00f      	beq.n	800526e <TIM_Base_SetConfig+0xaa>
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	4a31      	ldr	r2, [pc, #196]	@ (8005318 <TIM_Base_SetConfig+0x154>)
 8005252:	4293      	cmp	r3, r2
 8005254:	d00b      	beq.n	800526e <TIM_Base_SetConfig+0xaa>
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	4a30      	ldr	r2, [pc, #192]	@ (800531c <TIM_Base_SetConfig+0x158>)
 800525a:	4293      	cmp	r3, r2
 800525c:	d007      	beq.n	800526e <TIM_Base_SetConfig+0xaa>
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	4a2f      	ldr	r2, [pc, #188]	@ (8005320 <TIM_Base_SetConfig+0x15c>)
 8005262:	4293      	cmp	r3, r2
 8005264:	d003      	beq.n	800526e <TIM_Base_SetConfig+0xaa>
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	4a2e      	ldr	r2, [pc, #184]	@ (8005324 <TIM_Base_SetConfig+0x160>)
 800526a:	4293      	cmp	r3, r2
 800526c:	d108      	bne.n	8005280 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005274:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005276:	683b      	ldr	r3, [r7, #0]
 8005278:	68db      	ldr	r3, [r3, #12]
 800527a:	68fa      	ldr	r2, [r7, #12]
 800527c:	4313      	orrs	r3, r2
 800527e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005286:	683b      	ldr	r3, [r7, #0]
 8005288:	695b      	ldr	r3, [r3, #20]
 800528a:	4313      	orrs	r3, r2
 800528c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	68fa      	ldr	r2, [r7, #12]
 8005292:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005294:	683b      	ldr	r3, [r7, #0]
 8005296:	689a      	ldr	r2, [r3, #8]
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800529c:	683b      	ldr	r3, [r7, #0]
 800529e:	681a      	ldr	r2, [r3, #0]
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	4a16      	ldr	r2, [pc, #88]	@ (8005300 <TIM_Base_SetConfig+0x13c>)
 80052a8:	4293      	cmp	r3, r2
 80052aa:	d00f      	beq.n	80052cc <TIM_Base_SetConfig+0x108>
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	4a18      	ldr	r2, [pc, #96]	@ (8005310 <TIM_Base_SetConfig+0x14c>)
 80052b0:	4293      	cmp	r3, r2
 80052b2:	d00b      	beq.n	80052cc <TIM_Base_SetConfig+0x108>
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	4a17      	ldr	r2, [pc, #92]	@ (8005314 <TIM_Base_SetConfig+0x150>)
 80052b8:	4293      	cmp	r3, r2
 80052ba:	d007      	beq.n	80052cc <TIM_Base_SetConfig+0x108>
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	4a16      	ldr	r2, [pc, #88]	@ (8005318 <TIM_Base_SetConfig+0x154>)
 80052c0:	4293      	cmp	r3, r2
 80052c2:	d003      	beq.n	80052cc <TIM_Base_SetConfig+0x108>
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	4a15      	ldr	r2, [pc, #84]	@ (800531c <TIM_Base_SetConfig+0x158>)
 80052c8:	4293      	cmp	r3, r2
 80052ca:	d103      	bne.n	80052d4 <TIM_Base_SetConfig+0x110>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80052cc:	683b      	ldr	r3, [r7, #0]
 80052ce:	691a      	ldr	r2, [r3, #16]
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	2201      	movs	r2, #1
 80052d8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	691b      	ldr	r3, [r3, #16]
 80052de:	f003 0301 	and.w	r3, r3, #1
 80052e2:	2b01      	cmp	r3, #1
 80052e4:	d105      	bne.n	80052f2 <TIM_Base_SetConfig+0x12e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	691b      	ldr	r3, [r3, #16]
 80052ea:	f023 0201 	bic.w	r2, r3, #1
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	611a      	str	r2, [r3, #16]
  }
}
 80052f2:	bf00      	nop
 80052f4:	3714      	adds	r7, #20
 80052f6:	46bd      	mov	sp, r7
 80052f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052fc:	4770      	bx	lr
 80052fe:	bf00      	nop
 8005300:	40010000 	.word	0x40010000
 8005304:	40000400 	.word	0x40000400
 8005308:	40000800 	.word	0x40000800
 800530c:	40000c00 	.word	0x40000c00
 8005310:	40010400 	.word	0x40010400
 8005314:	40014000 	.word	0x40014000
 8005318:	40014400 	.word	0x40014400
 800531c:	40014800 	.word	0x40014800
 8005320:	4000e000 	.word	0x4000e000
 8005324:	4000e400 	.word	0x4000e400

08005328 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005328:	b480      	push	{r7}
 800532a:	b087      	sub	sp, #28
 800532c:	af00      	add	r7, sp, #0
 800532e:	6078      	str	r0, [r7, #4]
 8005330:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	6a1b      	ldr	r3, [r3, #32]
 8005336:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	6a1b      	ldr	r3, [r3, #32]
 800533c:	f023 0201 	bic.w	r2, r3, #1
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	685b      	ldr	r3, [r3, #4]
 8005348:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	699b      	ldr	r3, [r3, #24]
 800534e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005350:	68fa      	ldr	r2, [r7, #12]
 8005352:	4b37      	ldr	r3, [pc, #220]	@ (8005430 <TIM_OC1_SetConfig+0x108>)
 8005354:	4013      	ands	r3, r2
 8005356:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	f023 0303 	bic.w	r3, r3, #3
 800535e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005360:	683b      	ldr	r3, [r7, #0]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	68fa      	ldr	r2, [r7, #12]
 8005366:	4313      	orrs	r3, r2
 8005368:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800536a:	697b      	ldr	r3, [r7, #20]
 800536c:	f023 0302 	bic.w	r3, r3, #2
 8005370:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005372:	683b      	ldr	r3, [r7, #0]
 8005374:	689b      	ldr	r3, [r3, #8]
 8005376:	697a      	ldr	r2, [r7, #20]
 8005378:	4313      	orrs	r3, r2
 800537a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	4a2d      	ldr	r2, [pc, #180]	@ (8005434 <TIM_OC1_SetConfig+0x10c>)
 8005380:	4293      	cmp	r3, r2
 8005382:	d00f      	beq.n	80053a4 <TIM_OC1_SetConfig+0x7c>
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	4a2c      	ldr	r2, [pc, #176]	@ (8005438 <TIM_OC1_SetConfig+0x110>)
 8005388:	4293      	cmp	r3, r2
 800538a:	d00b      	beq.n	80053a4 <TIM_OC1_SetConfig+0x7c>
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	4a2b      	ldr	r2, [pc, #172]	@ (800543c <TIM_OC1_SetConfig+0x114>)
 8005390:	4293      	cmp	r3, r2
 8005392:	d007      	beq.n	80053a4 <TIM_OC1_SetConfig+0x7c>
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	4a2a      	ldr	r2, [pc, #168]	@ (8005440 <TIM_OC1_SetConfig+0x118>)
 8005398:	4293      	cmp	r3, r2
 800539a:	d003      	beq.n	80053a4 <TIM_OC1_SetConfig+0x7c>
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	4a29      	ldr	r2, [pc, #164]	@ (8005444 <TIM_OC1_SetConfig+0x11c>)
 80053a0:	4293      	cmp	r3, r2
 80053a2:	d10c      	bne.n	80053be <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80053a4:	697b      	ldr	r3, [r7, #20]
 80053a6:	f023 0308 	bic.w	r3, r3, #8
 80053aa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80053ac:	683b      	ldr	r3, [r7, #0]
 80053ae:	68db      	ldr	r3, [r3, #12]
 80053b0:	697a      	ldr	r2, [r7, #20]
 80053b2:	4313      	orrs	r3, r2
 80053b4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80053b6:	697b      	ldr	r3, [r7, #20]
 80053b8:	f023 0304 	bic.w	r3, r3, #4
 80053bc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	4a1c      	ldr	r2, [pc, #112]	@ (8005434 <TIM_OC1_SetConfig+0x10c>)
 80053c2:	4293      	cmp	r3, r2
 80053c4:	d00f      	beq.n	80053e6 <TIM_OC1_SetConfig+0xbe>
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	4a1b      	ldr	r2, [pc, #108]	@ (8005438 <TIM_OC1_SetConfig+0x110>)
 80053ca:	4293      	cmp	r3, r2
 80053cc:	d00b      	beq.n	80053e6 <TIM_OC1_SetConfig+0xbe>
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	4a1a      	ldr	r2, [pc, #104]	@ (800543c <TIM_OC1_SetConfig+0x114>)
 80053d2:	4293      	cmp	r3, r2
 80053d4:	d007      	beq.n	80053e6 <TIM_OC1_SetConfig+0xbe>
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	4a19      	ldr	r2, [pc, #100]	@ (8005440 <TIM_OC1_SetConfig+0x118>)
 80053da:	4293      	cmp	r3, r2
 80053dc:	d003      	beq.n	80053e6 <TIM_OC1_SetConfig+0xbe>
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	4a18      	ldr	r2, [pc, #96]	@ (8005444 <TIM_OC1_SetConfig+0x11c>)
 80053e2:	4293      	cmp	r3, r2
 80053e4:	d111      	bne.n	800540a <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80053e6:	693b      	ldr	r3, [r7, #16]
 80053e8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80053ec:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80053ee:	693b      	ldr	r3, [r7, #16]
 80053f0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80053f4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80053f6:	683b      	ldr	r3, [r7, #0]
 80053f8:	695b      	ldr	r3, [r3, #20]
 80053fa:	693a      	ldr	r2, [r7, #16]
 80053fc:	4313      	orrs	r3, r2
 80053fe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005400:	683b      	ldr	r3, [r7, #0]
 8005402:	699b      	ldr	r3, [r3, #24]
 8005404:	693a      	ldr	r2, [r7, #16]
 8005406:	4313      	orrs	r3, r2
 8005408:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	693a      	ldr	r2, [r7, #16]
 800540e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	68fa      	ldr	r2, [r7, #12]
 8005414:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005416:	683b      	ldr	r3, [r7, #0]
 8005418:	685a      	ldr	r2, [r3, #4]
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	697a      	ldr	r2, [r7, #20]
 8005422:	621a      	str	r2, [r3, #32]
}
 8005424:	bf00      	nop
 8005426:	371c      	adds	r7, #28
 8005428:	46bd      	mov	sp, r7
 800542a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800542e:	4770      	bx	lr
 8005430:	fffeff8f 	.word	0xfffeff8f
 8005434:	40010000 	.word	0x40010000
 8005438:	40010400 	.word	0x40010400
 800543c:	40014000 	.word	0x40014000
 8005440:	40014400 	.word	0x40014400
 8005444:	40014800 	.word	0x40014800

08005448 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005448:	b480      	push	{r7}
 800544a:	b087      	sub	sp, #28
 800544c:	af00      	add	r7, sp, #0
 800544e:	6078      	str	r0, [r7, #4]
 8005450:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	6a1b      	ldr	r3, [r3, #32]
 8005456:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	6a1b      	ldr	r3, [r3, #32]
 800545c:	f023 0210 	bic.w	r2, r3, #16
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	685b      	ldr	r3, [r3, #4]
 8005468:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	699b      	ldr	r3, [r3, #24]
 800546e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005470:	68fa      	ldr	r2, [r7, #12]
 8005472:	4b34      	ldr	r3, [pc, #208]	@ (8005544 <TIM_OC2_SetConfig+0xfc>)
 8005474:	4013      	ands	r3, r2
 8005476:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800547e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005480:	683b      	ldr	r3, [r7, #0]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	021b      	lsls	r3, r3, #8
 8005486:	68fa      	ldr	r2, [r7, #12]
 8005488:	4313      	orrs	r3, r2
 800548a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800548c:	697b      	ldr	r3, [r7, #20]
 800548e:	f023 0320 	bic.w	r3, r3, #32
 8005492:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005494:	683b      	ldr	r3, [r7, #0]
 8005496:	689b      	ldr	r3, [r3, #8]
 8005498:	011b      	lsls	r3, r3, #4
 800549a:	697a      	ldr	r2, [r7, #20]
 800549c:	4313      	orrs	r3, r2
 800549e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	4a29      	ldr	r2, [pc, #164]	@ (8005548 <TIM_OC2_SetConfig+0x100>)
 80054a4:	4293      	cmp	r3, r2
 80054a6:	d003      	beq.n	80054b0 <TIM_OC2_SetConfig+0x68>
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	4a28      	ldr	r2, [pc, #160]	@ (800554c <TIM_OC2_SetConfig+0x104>)
 80054ac:	4293      	cmp	r3, r2
 80054ae:	d10d      	bne.n	80054cc <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80054b0:	697b      	ldr	r3, [r7, #20]
 80054b2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80054b6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80054b8:	683b      	ldr	r3, [r7, #0]
 80054ba:	68db      	ldr	r3, [r3, #12]
 80054bc:	011b      	lsls	r3, r3, #4
 80054be:	697a      	ldr	r2, [r7, #20]
 80054c0:	4313      	orrs	r3, r2
 80054c2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80054c4:	697b      	ldr	r3, [r7, #20]
 80054c6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80054ca:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	4a1e      	ldr	r2, [pc, #120]	@ (8005548 <TIM_OC2_SetConfig+0x100>)
 80054d0:	4293      	cmp	r3, r2
 80054d2:	d00f      	beq.n	80054f4 <TIM_OC2_SetConfig+0xac>
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	4a1d      	ldr	r2, [pc, #116]	@ (800554c <TIM_OC2_SetConfig+0x104>)
 80054d8:	4293      	cmp	r3, r2
 80054da:	d00b      	beq.n	80054f4 <TIM_OC2_SetConfig+0xac>
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	4a1c      	ldr	r2, [pc, #112]	@ (8005550 <TIM_OC2_SetConfig+0x108>)
 80054e0:	4293      	cmp	r3, r2
 80054e2:	d007      	beq.n	80054f4 <TIM_OC2_SetConfig+0xac>
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	4a1b      	ldr	r2, [pc, #108]	@ (8005554 <TIM_OC2_SetConfig+0x10c>)
 80054e8:	4293      	cmp	r3, r2
 80054ea:	d003      	beq.n	80054f4 <TIM_OC2_SetConfig+0xac>
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	4a1a      	ldr	r2, [pc, #104]	@ (8005558 <TIM_OC2_SetConfig+0x110>)
 80054f0:	4293      	cmp	r3, r2
 80054f2:	d113      	bne.n	800551c <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80054f4:	693b      	ldr	r3, [r7, #16]
 80054f6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80054fa:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80054fc:	693b      	ldr	r3, [r7, #16]
 80054fe:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005502:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005504:	683b      	ldr	r3, [r7, #0]
 8005506:	695b      	ldr	r3, [r3, #20]
 8005508:	009b      	lsls	r3, r3, #2
 800550a:	693a      	ldr	r2, [r7, #16]
 800550c:	4313      	orrs	r3, r2
 800550e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005510:	683b      	ldr	r3, [r7, #0]
 8005512:	699b      	ldr	r3, [r3, #24]
 8005514:	009b      	lsls	r3, r3, #2
 8005516:	693a      	ldr	r2, [r7, #16]
 8005518:	4313      	orrs	r3, r2
 800551a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	693a      	ldr	r2, [r7, #16]
 8005520:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	68fa      	ldr	r2, [r7, #12]
 8005526:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005528:	683b      	ldr	r3, [r7, #0]
 800552a:	685a      	ldr	r2, [r3, #4]
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	697a      	ldr	r2, [r7, #20]
 8005534:	621a      	str	r2, [r3, #32]
}
 8005536:	bf00      	nop
 8005538:	371c      	adds	r7, #28
 800553a:	46bd      	mov	sp, r7
 800553c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005540:	4770      	bx	lr
 8005542:	bf00      	nop
 8005544:	feff8fff 	.word	0xfeff8fff
 8005548:	40010000 	.word	0x40010000
 800554c:	40010400 	.word	0x40010400
 8005550:	40014000 	.word	0x40014000
 8005554:	40014400 	.word	0x40014400
 8005558:	40014800 	.word	0x40014800

0800555c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800555c:	b480      	push	{r7}
 800555e:	b087      	sub	sp, #28
 8005560:	af00      	add	r7, sp, #0
 8005562:	6078      	str	r0, [r7, #4]
 8005564:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	6a1b      	ldr	r3, [r3, #32]
 800556a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	6a1b      	ldr	r3, [r3, #32]
 8005570:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	685b      	ldr	r3, [r3, #4]
 800557c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	69db      	ldr	r3, [r3, #28]
 8005582:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005584:	68fa      	ldr	r2, [r7, #12]
 8005586:	4b33      	ldr	r3, [pc, #204]	@ (8005654 <TIM_OC3_SetConfig+0xf8>)
 8005588:	4013      	ands	r3, r2
 800558a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	f023 0303 	bic.w	r3, r3, #3
 8005592:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005594:	683b      	ldr	r3, [r7, #0]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	68fa      	ldr	r2, [r7, #12]
 800559a:	4313      	orrs	r3, r2
 800559c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800559e:	697b      	ldr	r3, [r7, #20]
 80055a0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80055a4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80055a6:	683b      	ldr	r3, [r7, #0]
 80055a8:	689b      	ldr	r3, [r3, #8]
 80055aa:	021b      	lsls	r3, r3, #8
 80055ac:	697a      	ldr	r2, [r7, #20]
 80055ae:	4313      	orrs	r3, r2
 80055b0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	4a28      	ldr	r2, [pc, #160]	@ (8005658 <TIM_OC3_SetConfig+0xfc>)
 80055b6:	4293      	cmp	r3, r2
 80055b8:	d003      	beq.n	80055c2 <TIM_OC3_SetConfig+0x66>
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	4a27      	ldr	r2, [pc, #156]	@ (800565c <TIM_OC3_SetConfig+0x100>)
 80055be:	4293      	cmp	r3, r2
 80055c0:	d10d      	bne.n	80055de <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80055c2:	697b      	ldr	r3, [r7, #20]
 80055c4:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80055c8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80055ca:	683b      	ldr	r3, [r7, #0]
 80055cc:	68db      	ldr	r3, [r3, #12]
 80055ce:	021b      	lsls	r3, r3, #8
 80055d0:	697a      	ldr	r2, [r7, #20]
 80055d2:	4313      	orrs	r3, r2
 80055d4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80055d6:	697b      	ldr	r3, [r7, #20]
 80055d8:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80055dc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	4a1d      	ldr	r2, [pc, #116]	@ (8005658 <TIM_OC3_SetConfig+0xfc>)
 80055e2:	4293      	cmp	r3, r2
 80055e4:	d00f      	beq.n	8005606 <TIM_OC3_SetConfig+0xaa>
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	4a1c      	ldr	r2, [pc, #112]	@ (800565c <TIM_OC3_SetConfig+0x100>)
 80055ea:	4293      	cmp	r3, r2
 80055ec:	d00b      	beq.n	8005606 <TIM_OC3_SetConfig+0xaa>
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	4a1b      	ldr	r2, [pc, #108]	@ (8005660 <TIM_OC3_SetConfig+0x104>)
 80055f2:	4293      	cmp	r3, r2
 80055f4:	d007      	beq.n	8005606 <TIM_OC3_SetConfig+0xaa>
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	4a1a      	ldr	r2, [pc, #104]	@ (8005664 <TIM_OC3_SetConfig+0x108>)
 80055fa:	4293      	cmp	r3, r2
 80055fc:	d003      	beq.n	8005606 <TIM_OC3_SetConfig+0xaa>
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	4a19      	ldr	r2, [pc, #100]	@ (8005668 <TIM_OC3_SetConfig+0x10c>)
 8005602:	4293      	cmp	r3, r2
 8005604:	d113      	bne.n	800562e <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005606:	693b      	ldr	r3, [r7, #16]
 8005608:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800560c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800560e:	693b      	ldr	r3, [r7, #16]
 8005610:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005614:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005616:	683b      	ldr	r3, [r7, #0]
 8005618:	695b      	ldr	r3, [r3, #20]
 800561a:	011b      	lsls	r3, r3, #4
 800561c:	693a      	ldr	r2, [r7, #16]
 800561e:	4313      	orrs	r3, r2
 8005620:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005622:	683b      	ldr	r3, [r7, #0]
 8005624:	699b      	ldr	r3, [r3, #24]
 8005626:	011b      	lsls	r3, r3, #4
 8005628:	693a      	ldr	r2, [r7, #16]
 800562a:	4313      	orrs	r3, r2
 800562c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	693a      	ldr	r2, [r7, #16]
 8005632:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	68fa      	ldr	r2, [r7, #12]
 8005638:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800563a:	683b      	ldr	r3, [r7, #0]
 800563c:	685a      	ldr	r2, [r3, #4]
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	697a      	ldr	r2, [r7, #20]
 8005646:	621a      	str	r2, [r3, #32]
}
 8005648:	bf00      	nop
 800564a:	371c      	adds	r7, #28
 800564c:	46bd      	mov	sp, r7
 800564e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005652:	4770      	bx	lr
 8005654:	fffeff8f 	.word	0xfffeff8f
 8005658:	40010000 	.word	0x40010000
 800565c:	40010400 	.word	0x40010400
 8005660:	40014000 	.word	0x40014000
 8005664:	40014400 	.word	0x40014400
 8005668:	40014800 	.word	0x40014800

0800566c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800566c:	b480      	push	{r7}
 800566e:	b087      	sub	sp, #28
 8005670:	af00      	add	r7, sp, #0
 8005672:	6078      	str	r0, [r7, #4]
 8005674:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	6a1b      	ldr	r3, [r3, #32]
 800567a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	6a1b      	ldr	r3, [r3, #32]
 8005680:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	685b      	ldr	r3, [r3, #4]
 800568c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	69db      	ldr	r3, [r3, #28]
 8005692:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005694:	68fa      	ldr	r2, [r7, #12]
 8005696:	4b24      	ldr	r3, [pc, #144]	@ (8005728 <TIM_OC4_SetConfig+0xbc>)
 8005698:	4013      	ands	r3, r2
 800569a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80056a2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80056a4:	683b      	ldr	r3, [r7, #0]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	021b      	lsls	r3, r3, #8
 80056aa:	68fa      	ldr	r2, [r7, #12]
 80056ac:	4313      	orrs	r3, r2
 80056ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80056b0:	693b      	ldr	r3, [r7, #16]
 80056b2:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80056b6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80056b8:	683b      	ldr	r3, [r7, #0]
 80056ba:	689b      	ldr	r3, [r3, #8]
 80056bc:	031b      	lsls	r3, r3, #12
 80056be:	693a      	ldr	r2, [r7, #16]
 80056c0:	4313      	orrs	r3, r2
 80056c2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	4a19      	ldr	r2, [pc, #100]	@ (800572c <TIM_OC4_SetConfig+0xc0>)
 80056c8:	4293      	cmp	r3, r2
 80056ca:	d00f      	beq.n	80056ec <TIM_OC4_SetConfig+0x80>
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	4a18      	ldr	r2, [pc, #96]	@ (8005730 <TIM_OC4_SetConfig+0xc4>)
 80056d0:	4293      	cmp	r3, r2
 80056d2:	d00b      	beq.n	80056ec <TIM_OC4_SetConfig+0x80>
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	4a17      	ldr	r2, [pc, #92]	@ (8005734 <TIM_OC4_SetConfig+0xc8>)
 80056d8:	4293      	cmp	r3, r2
 80056da:	d007      	beq.n	80056ec <TIM_OC4_SetConfig+0x80>
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	4a16      	ldr	r2, [pc, #88]	@ (8005738 <TIM_OC4_SetConfig+0xcc>)
 80056e0:	4293      	cmp	r3, r2
 80056e2:	d003      	beq.n	80056ec <TIM_OC4_SetConfig+0x80>
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	4a15      	ldr	r2, [pc, #84]	@ (800573c <TIM_OC4_SetConfig+0xd0>)
 80056e8:	4293      	cmp	r3, r2
 80056ea:	d109      	bne.n	8005700 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80056ec:	697b      	ldr	r3, [r7, #20]
 80056ee:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80056f2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80056f4:	683b      	ldr	r3, [r7, #0]
 80056f6:	695b      	ldr	r3, [r3, #20]
 80056f8:	019b      	lsls	r3, r3, #6
 80056fa:	697a      	ldr	r2, [r7, #20]
 80056fc:	4313      	orrs	r3, r2
 80056fe:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	697a      	ldr	r2, [r7, #20]
 8005704:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	68fa      	ldr	r2, [r7, #12]
 800570a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800570c:	683b      	ldr	r3, [r7, #0]
 800570e:	685a      	ldr	r2, [r3, #4]
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	693a      	ldr	r2, [r7, #16]
 8005718:	621a      	str	r2, [r3, #32]
}
 800571a:	bf00      	nop
 800571c:	371c      	adds	r7, #28
 800571e:	46bd      	mov	sp, r7
 8005720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005724:	4770      	bx	lr
 8005726:	bf00      	nop
 8005728:	feff8fff 	.word	0xfeff8fff
 800572c:	40010000 	.word	0x40010000
 8005730:	40010400 	.word	0x40010400
 8005734:	40014000 	.word	0x40014000
 8005738:	40014400 	.word	0x40014400
 800573c:	40014800 	.word	0x40014800

08005740 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005740:	b480      	push	{r7}
 8005742:	b087      	sub	sp, #28
 8005744:	af00      	add	r7, sp, #0
 8005746:	6078      	str	r0, [r7, #4]
 8005748:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	6a1b      	ldr	r3, [r3, #32]
 800574e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	6a1b      	ldr	r3, [r3, #32]
 8005754:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	685b      	ldr	r3, [r3, #4]
 8005760:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005766:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005768:	68fa      	ldr	r2, [r7, #12]
 800576a:	4b21      	ldr	r3, [pc, #132]	@ (80057f0 <TIM_OC5_SetConfig+0xb0>)
 800576c:	4013      	ands	r3, r2
 800576e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005770:	683b      	ldr	r3, [r7, #0]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	68fa      	ldr	r2, [r7, #12]
 8005776:	4313      	orrs	r3, r2
 8005778:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800577a:	693b      	ldr	r3, [r7, #16]
 800577c:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8005780:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005782:	683b      	ldr	r3, [r7, #0]
 8005784:	689b      	ldr	r3, [r3, #8]
 8005786:	041b      	lsls	r3, r3, #16
 8005788:	693a      	ldr	r2, [r7, #16]
 800578a:	4313      	orrs	r3, r2
 800578c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	4a18      	ldr	r2, [pc, #96]	@ (80057f4 <TIM_OC5_SetConfig+0xb4>)
 8005792:	4293      	cmp	r3, r2
 8005794:	d00f      	beq.n	80057b6 <TIM_OC5_SetConfig+0x76>
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	4a17      	ldr	r2, [pc, #92]	@ (80057f8 <TIM_OC5_SetConfig+0xb8>)
 800579a:	4293      	cmp	r3, r2
 800579c:	d00b      	beq.n	80057b6 <TIM_OC5_SetConfig+0x76>
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	4a16      	ldr	r2, [pc, #88]	@ (80057fc <TIM_OC5_SetConfig+0xbc>)
 80057a2:	4293      	cmp	r3, r2
 80057a4:	d007      	beq.n	80057b6 <TIM_OC5_SetConfig+0x76>
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	4a15      	ldr	r2, [pc, #84]	@ (8005800 <TIM_OC5_SetConfig+0xc0>)
 80057aa:	4293      	cmp	r3, r2
 80057ac:	d003      	beq.n	80057b6 <TIM_OC5_SetConfig+0x76>
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	4a14      	ldr	r2, [pc, #80]	@ (8005804 <TIM_OC5_SetConfig+0xc4>)
 80057b2:	4293      	cmp	r3, r2
 80057b4:	d109      	bne.n	80057ca <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80057b6:	697b      	ldr	r3, [r7, #20]
 80057b8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80057bc:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80057be:	683b      	ldr	r3, [r7, #0]
 80057c0:	695b      	ldr	r3, [r3, #20]
 80057c2:	021b      	lsls	r3, r3, #8
 80057c4:	697a      	ldr	r2, [r7, #20]
 80057c6:	4313      	orrs	r3, r2
 80057c8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	697a      	ldr	r2, [r7, #20]
 80057ce:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	68fa      	ldr	r2, [r7, #12]
 80057d4:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80057d6:	683b      	ldr	r3, [r7, #0]
 80057d8:	685a      	ldr	r2, [r3, #4]
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	693a      	ldr	r2, [r7, #16]
 80057e2:	621a      	str	r2, [r3, #32]
}
 80057e4:	bf00      	nop
 80057e6:	371c      	adds	r7, #28
 80057e8:	46bd      	mov	sp, r7
 80057ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ee:	4770      	bx	lr
 80057f0:	fffeff8f 	.word	0xfffeff8f
 80057f4:	40010000 	.word	0x40010000
 80057f8:	40010400 	.word	0x40010400
 80057fc:	40014000 	.word	0x40014000
 8005800:	40014400 	.word	0x40014400
 8005804:	40014800 	.word	0x40014800

08005808 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005808:	b480      	push	{r7}
 800580a:	b087      	sub	sp, #28
 800580c:	af00      	add	r7, sp, #0
 800580e:	6078      	str	r0, [r7, #4]
 8005810:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	6a1b      	ldr	r3, [r3, #32]
 8005816:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	6a1b      	ldr	r3, [r3, #32]
 800581c:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	685b      	ldr	r3, [r3, #4]
 8005828:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800582e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005830:	68fa      	ldr	r2, [r7, #12]
 8005832:	4b22      	ldr	r3, [pc, #136]	@ (80058bc <TIM_OC6_SetConfig+0xb4>)
 8005834:	4013      	ands	r3, r2
 8005836:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005838:	683b      	ldr	r3, [r7, #0]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	021b      	lsls	r3, r3, #8
 800583e:	68fa      	ldr	r2, [r7, #12]
 8005840:	4313      	orrs	r3, r2
 8005842:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005844:	693b      	ldr	r3, [r7, #16]
 8005846:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800584a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800584c:	683b      	ldr	r3, [r7, #0]
 800584e:	689b      	ldr	r3, [r3, #8]
 8005850:	051b      	lsls	r3, r3, #20
 8005852:	693a      	ldr	r2, [r7, #16]
 8005854:	4313      	orrs	r3, r2
 8005856:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	4a19      	ldr	r2, [pc, #100]	@ (80058c0 <TIM_OC6_SetConfig+0xb8>)
 800585c:	4293      	cmp	r3, r2
 800585e:	d00f      	beq.n	8005880 <TIM_OC6_SetConfig+0x78>
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	4a18      	ldr	r2, [pc, #96]	@ (80058c4 <TIM_OC6_SetConfig+0xbc>)
 8005864:	4293      	cmp	r3, r2
 8005866:	d00b      	beq.n	8005880 <TIM_OC6_SetConfig+0x78>
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	4a17      	ldr	r2, [pc, #92]	@ (80058c8 <TIM_OC6_SetConfig+0xc0>)
 800586c:	4293      	cmp	r3, r2
 800586e:	d007      	beq.n	8005880 <TIM_OC6_SetConfig+0x78>
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	4a16      	ldr	r2, [pc, #88]	@ (80058cc <TIM_OC6_SetConfig+0xc4>)
 8005874:	4293      	cmp	r3, r2
 8005876:	d003      	beq.n	8005880 <TIM_OC6_SetConfig+0x78>
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	4a15      	ldr	r2, [pc, #84]	@ (80058d0 <TIM_OC6_SetConfig+0xc8>)
 800587c:	4293      	cmp	r3, r2
 800587e:	d109      	bne.n	8005894 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005880:	697b      	ldr	r3, [r7, #20]
 8005882:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005886:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005888:	683b      	ldr	r3, [r7, #0]
 800588a:	695b      	ldr	r3, [r3, #20]
 800588c:	029b      	lsls	r3, r3, #10
 800588e:	697a      	ldr	r2, [r7, #20]
 8005890:	4313      	orrs	r3, r2
 8005892:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	697a      	ldr	r2, [r7, #20]
 8005898:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	68fa      	ldr	r2, [r7, #12]
 800589e:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80058a0:	683b      	ldr	r3, [r7, #0]
 80058a2:	685a      	ldr	r2, [r3, #4]
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	693a      	ldr	r2, [r7, #16]
 80058ac:	621a      	str	r2, [r3, #32]
}
 80058ae:	bf00      	nop
 80058b0:	371c      	adds	r7, #28
 80058b2:	46bd      	mov	sp, r7
 80058b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058b8:	4770      	bx	lr
 80058ba:	bf00      	nop
 80058bc:	feff8fff 	.word	0xfeff8fff
 80058c0:	40010000 	.word	0x40010000
 80058c4:	40010400 	.word	0x40010400
 80058c8:	40014000 	.word	0x40014000
 80058cc:	40014400 	.word	0x40014400
 80058d0:	40014800 	.word	0x40014800

080058d4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80058d4:	b480      	push	{r7}
 80058d6:	b085      	sub	sp, #20
 80058d8:	af00      	add	r7, sp, #0
 80058da:	6078      	str	r0, [r7, #4]
 80058dc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80058e4:	2b01      	cmp	r3, #1
 80058e6:	d101      	bne.n	80058ec <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80058e8:	2302      	movs	r3, #2
 80058ea:	e077      	b.n	80059dc <HAL_TIMEx_MasterConfigSynchronization+0x108>
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	2201      	movs	r2, #1
 80058f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	2202      	movs	r2, #2
 80058f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	685b      	ldr	r3, [r3, #4]
 8005902:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	689b      	ldr	r3, [r3, #8]
 800590a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	4a35      	ldr	r2, [pc, #212]	@ (80059e8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8005912:	4293      	cmp	r3, r2
 8005914:	d004      	beq.n	8005920 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	4a34      	ldr	r2, [pc, #208]	@ (80059ec <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800591c:	4293      	cmp	r3, r2
 800591e:	d108      	bne.n	8005932 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8005926:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005928:	683b      	ldr	r3, [r7, #0]
 800592a:	685b      	ldr	r3, [r3, #4]
 800592c:	68fa      	ldr	r2, [r7, #12]
 800592e:	4313      	orrs	r3, r2
 8005930:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005938:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800593a:	683b      	ldr	r3, [r7, #0]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	68fa      	ldr	r2, [r7, #12]
 8005940:	4313      	orrs	r3, r2
 8005942:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	68fa      	ldr	r2, [r7, #12]
 800594a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	4a25      	ldr	r2, [pc, #148]	@ (80059e8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8005952:	4293      	cmp	r3, r2
 8005954:	d02c      	beq.n	80059b0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800595e:	d027      	beq.n	80059b0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	4a22      	ldr	r2, [pc, #136]	@ (80059f0 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8005966:	4293      	cmp	r3, r2
 8005968:	d022      	beq.n	80059b0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	4a21      	ldr	r2, [pc, #132]	@ (80059f4 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8005970:	4293      	cmp	r3, r2
 8005972:	d01d      	beq.n	80059b0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	4a1f      	ldr	r2, [pc, #124]	@ (80059f8 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800597a:	4293      	cmp	r3, r2
 800597c:	d018      	beq.n	80059b0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	4a1a      	ldr	r2, [pc, #104]	@ (80059ec <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8005984:	4293      	cmp	r3, r2
 8005986:	d013      	beq.n	80059b0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	4a1b      	ldr	r2, [pc, #108]	@ (80059fc <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800598e:	4293      	cmp	r3, r2
 8005990:	d00e      	beq.n	80059b0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	4a1a      	ldr	r2, [pc, #104]	@ (8005a00 <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
 8005998:	4293      	cmp	r3, r2
 800599a:	d009      	beq.n	80059b0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	4a18      	ldr	r2, [pc, #96]	@ (8005a04 <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 80059a2:	4293      	cmp	r3, r2
 80059a4:	d004      	beq.n	80059b0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	4a17      	ldr	r2, [pc, #92]	@ (8005a08 <HAL_TIMEx_MasterConfigSynchronization+0x134>)
 80059ac:	4293      	cmp	r3, r2
 80059ae:	d10c      	bne.n	80059ca <HAL_TIMEx_MasterConfigSynchronization+0xf6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80059b0:	68bb      	ldr	r3, [r7, #8]
 80059b2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80059b6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80059b8:	683b      	ldr	r3, [r7, #0]
 80059ba:	689b      	ldr	r3, [r3, #8]
 80059bc:	68ba      	ldr	r2, [r7, #8]
 80059be:	4313      	orrs	r3, r2
 80059c0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	68ba      	ldr	r2, [r7, #8]
 80059c8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	2201      	movs	r2, #1
 80059ce:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	2200      	movs	r2, #0
 80059d6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80059da:	2300      	movs	r3, #0
}
 80059dc:	4618      	mov	r0, r3
 80059de:	3714      	adds	r7, #20
 80059e0:	46bd      	mov	sp, r7
 80059e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059e6:	4770      	bx	lr
 80059e8:	40010000 	.word	0x40010000
 80059ec:	40010400 	.word	0x40010400
 80059f0:	40000400 	.word	0x40000400
 80059f4:	40000800 	.word	0x40000800
 80059f8:	40000c00 	.word	0x40000c00
 80059fc:	40001800 	.word	0x40001800
 8005a00:	40014000 	.word	0x40014000
 8005a04:	4000e000 	.word	0x4000e000
 8005a08:	4000e400 	.word	0x4000e400

08005a0c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005a0c:	b480      	push	{r7}
 8005a0e:	b085      	sub	sp, #20
 8005a10:	af00      	add	r7, sp, #0
 8005a12:	6078      	str	r0, [r7, #4]
 8005a14:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005a16:	2300      	movs	r3, #0
 8005a18:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));
#endif /* TIM_BDTR_BKBID */

  /* Check input state */
  __HAL_LOCK(htim);
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005a20:	2b01      	cmp	r3, #1
 8005a22:	d101      	bne.n	8005a28 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005a24:	2302      	movs	r3, #2
 8005a26:	e073      	b.n	8005b10 <HAL_TIMEx_ConfigBreakDeadTime+0x104>
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	2201      	movs	r2, #1
 8005a2c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8005a36:	683b      	ldr	r3, [r7, #0]
 8005a38:	68db      	ldr	r3, [r3, #12]
 8005a3a:	4313      	orrs	r3, r2
 8005a3c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005a44:	683b      	ldr	r3, [r7, #0]
 8005a46:	689b      	ldr	r3, [r3, #8]
 8005a48:	4313      	orrs	r3, r2
 8005a4a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8005a52:	683b      	ldr	r3, [r7, #0]
 8005a54:	685b      	ldr	r3, [r3, #4]
 8005a56:	4313      	orrs	r3, r2
 8005a58:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8005a60:	683b      	ldr	r3, [r7, #0]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	4313      	orrs	r3, r2
 8005a66:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005a6e:	683b      	ldr	r3, [r7, #0]
 8005a70:	691b      	ldr	r3, [r3, #16]
 8005a72:	4313      	orrs	r3, r2
 8005a74:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8005a7c:	683b      	ldr	r3, [r7, #0]
 8005a7e:	695b      	ldr	r3, [r3, #20]
 8005a80:	4313      	orrs	r3, r2
 8005a82:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8005a8a:	683b      	ldr	r3, [r7, #0]
 8005a8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a8e:	4313      	orrs	r3, r2
 8005a90:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8005a98:	683b      	ldr	r3, [r7, #0]
 8005a9a:	699b      	ldr	r3, [r3, #24]
 8005a9c:	041b      	lsls	r3, r3, #16
 8005a9e:	4313      	orrs	r3, r2
 8005aa0:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8005aa8:	683b      	ldr	r3, [r7, #0]
 8005aaa:	69db      	ldr	r3, [r3, #28]
 8005aac:	4313      	orrs	r3, r2
 8005aae:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKBID */

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	4a19      	ldr	r2, [pc, #100]	@ (8005b1c <HAL_TIMEx_ConfigBreakDeadTime+0x110>)
 8005ab6:	4293      	cmp	r3, r2
 8005ab8:	d004      	beq.n	8005ac4 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	4a18      	ldr	r2, [pc, #96]	@ (8005b20 <HAL_TIMEx_ConfigBreakDeadTime+0x114>)
 8005ac0:	4293      	cmp	r3, r2
 8005ac2:	d11c      	bne.n	8005afe <HAL_TIMEx_ConfigBreakDeadTime+0xf2>
#if defined(TIM_BDTR_BKBID)
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));
#endif /* TIM_BDTR_BKBID */

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8005aca:	683b      	ldr	r3, [r7, #0]
 8005acc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ace:	051b      	lsls	r3, r3, #20
 8005ad0:	4313      	orrs	r3, r2
 8005ad2:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8005ada:	683b      	ldr	r3, [r7, #0]
 8005adc:	6a1b      	ldr	r3, [r3, #32]
 8005ade:	4313      	orrs	r3, r2
 8005ae0:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8005ae8:	683b      	ldr	r3, [r7, #0]
 8005aea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005aec:	4313      	orrs	r3, r2
 8005aee:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8005af6:	683b      	ldr	r3, [r7, #0]
 8005af8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005afa:	4313      	orrs	r3, r2
 8005afc:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	68fa      	ldr	r2, [r7, #12]
 8005b04:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	2200      	movs	r2, #0
 8005b0a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005b0e:	2300      	movs	r3, #0
}
 8005b10:	4618      	mov	r0, r3
 8005b12:	3714      	adds	r7, #20
 8005b14:	46bd      	mov	sp, r7
 8005b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b1a:	4770      	bx	lr
 8005b1c:	40010000 	.word	0x40010000
 8005b20:	40010400 	.word	0x40010400

08005b24 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005b24:	b580      	push	{r7, lr}
 8005b26:	b082      	sub	sp, #8
 8005b28:	af00      	add	r7, sp, #0
 8005b2a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d101      	bne.n	8005b36 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005b32:	2301      	movs	r3, #1
 8005b34:	e042      	b.n	8005bbc <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d106      	bne.n	8005b4e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	2200      	movs	r2, #0
 8005b44:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005b48:	6878      	ldr	r0, [r7, #4]
 8005b4a:	f7fb fee7 	bl	800191c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	2224      	movs	r2, #36	@ 0x24
 8005b52:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	681a      	ldr	r2, [r3, #0]
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	f022 0201 	bic.w	r2, r2, #1
 8005b64:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d002      	beq.n	8005b74 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8005b6e:	6878      	ldr	r0, [r7, #4]
 8005b70:	f000 fe94 	bl	800689c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005b74:	6878      	ldr	r0, [r7, #4]
 8005b76:	f000 f825 	bl	8005bc4 <UART_SetConfig>
 8005b7a:	4603      	mov	r3, r0
 8005b7c:	2b01      	cmp	r3, #1
 8005b7e:	d101      	bne.n	8005b84 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8005b80:	2301      	movs	r3, #1
 8005b82:	e01b      	b.n	8005bbc <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	685a      	ldr	r2, [r3, #4]
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005b92:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	689a      	ldr	r2, [r3, #8]
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005ba2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	681a      	ldr	r2, [r3, #0]
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	f042 0201 	orr.w	r2, r2, #1
 8005bb2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005bb4:	6878      	ldr	r0, [r7, #4]
 8005bb6:	f000 ff13 	bl	80069e0 <UART_CheckIdleState>
 8005bba:	4603      	mov	r3, r0
}
 8005bbc:	4618      	mov	r0, r3
 8005bbe:	3708      	adds	r7, #8
 8005bc0:	46bd      	mov	sp, r7
 8005bc2:	bd80      	pop	{r7, pc}

08005bc4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005bc4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005bc8:	b092      	sub	sp, #72	@ 0x48
 8005bca:	af00      	add	r7, sp, #0
 8005bcc:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005bce:	2300      	movs	r3, #0
 8005bd0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005bd4:	697b      	ldr	r3, [r7, #20]
 8005bd6:	689a      	ldr	r2, [r3, #8]
 8005bd8:	697b      	ldr	r3, [r7, #20]
 8005bda:	691b      	ldr	r3, [r3, #16]
 8005bdc:	431a      	orrs	r2, r3
 8005bde:	697b      	ldr	r3, [r7, #20]
 8005be0:	695b      	ldr	r3, [r3, #20]
 8005be2:	431a      	orrs	r2, r3
 8005be4:	697b      	ldr	r3, [r7, #20]
 8005be6:	69db      	ldr	r3, [r3, #28]
 8005be8:	4313      	orrs	r3, r2
 8005bea:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005bec:	697b      	ldr	r3, [r7, #20]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	681a      	ldr	r2, [r3, #0]
 8005bf2:	4bbe      	ldr	r3, [pc, #760]	@ (8005eec <UART_SetConfig+0x328>)
 8005bf4:	4013      	ands	r3, r2
 8005bf6:	697a      	ldr	r2, [r7, #20]
 8005bf8:	6812      	ldr	r2, [r2, #0]
 8005bfa:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8005bfc:	430b      	orrs	r3, r1
 8005bfe:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005c00:	697b      	ldr	r3, [r7, #20]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	685b      	ldr	r3, [r3, #4]
 8005c06:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005c0a:	697b      	ldr	r3, [r7, #20]
 8005c0c:	68da      	ldr	r2, [r3, #12]
 8005c0e:	697b      	ldr	r3, [r7, #20]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	430a      	orrs	r2, r1
 8005c14:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005c16:	697b      	ldr	r3, [r7, #20]
 8005c18:	699b      	ldr	r3, [r3, #24]
 8005c1a:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005c1c:	697b      	ldr	r3, [r7, #20]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	4ab3      	ldr	r2, [pc, #716]	@ (8005ef0 <UART_SetConfig+0x32c>)
 8005c22:	4293      	cmp	r3, r2
 8005c24:	d004      	beq.n	8005c30 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005c26:	697b      	ldr	r3, [r7, #20]
 8005c28:	6a1b      	ldr	r3, [r3, #32]
 8005c2a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005c2c:	4313      	orrs	r3, r2
 8005c2e:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005c30:	697b      	ldr	r3, [r7, #20]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	689a      	ldr	r2, [r3, #8]
 8005c36:	4baf      	ldr	r3, [pc, #700]	@ (8005ef4 <UART_SetConfig+0x330>)
 8005c38:	4013      	ands	r3, r2
 8005c3a:	697a      	ldr	r2, [r7, #20]
 8005c3c:	6812      	ldr	r2, [r2, #0]
 8005c3e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8005c40:	430b      	orrs	r3, r1
 8005c42:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005c44:	697b      	ldr	r3, [r7, #20]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c4a:	f023 010f 	bic.w	r1, r3, #15
 8005c4e:	697b      	ldr	r3, [r7, #20]
 8005c50:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005c52:	697b      	ldr	r3, [r7, #20]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	430a      	orrs	r2, r1
 8005c58:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005c5a:	697b      	ldr	r3, [r7, #20]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	4aa6      	ldr	r2, [pc, #664]	@ (8005ef8 <UART_SetConfig+0x334>)
 8005c60:	4293      	cmp	r3, r2
 8005c62:	d177      	bne.n	8005d54 <UART_SetConfig+0x190>
 8005c64:	4ba5      	ldr	r3, [pc, #660]	@ (8005efc <UART_SetConfig+0x338>)
 8005c66:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005c68:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005c6c:	2b28      	cmp	r3, #40	@ 0x28
 8005c6e:	d86d      	bhi.n	8005d4c <UART_SetConfig+0x188>
 8005c70:	a201      	add	r2, pc, #4	@ (adr r2, 8005c78 <UART_SetConfig+0xb4>)
 8005c72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c76:	bf00      	nop
 8005c78:	08005d1d 	.word	0x08005d1d
 8005c7c:	08005d4d 	.word	0x08005d4d
 8005c80:	08005d4d 	.word	0x08005d4d
 8005c84:	08005d4d 	.word	0x08005d4d
 8005c88:	08005d4d 	.word	0x08005d4d
 8005c8c:	08005d4d 	.word	0x08005d4d
 8005c90:	08005d4d 	.word	0x08005d4d
 8005c94:	08005d4d 	.word	0x08005d4d
 8005c98:	08005d25 	.word	0x08005d25
 8005c9c:	08005d4d 	.word	0x08005d4d
 8005ca0:	08005d4d 	.word	0x08005d4d
 8005ca4:	08005d4d 	.word	0x08005d4d
 8005ca8:	08005d4d 	.word	0x08005d4d
 8005cac:	08005d4d 	.word	0x08005d4d
 8005cb0:	08005d4d 	.word	0x08005d4d
 8005cb4:	08005d4d 	.word	0x08005d4d
 8005cb8:	08005d2d 	.word	0x08005d2d
 8005cbc:	08005d4d 	.word	0x08005d4d
 8005cc0:	08005d4d 	.word	0x08005d4d
 8005cc4:	08005d4d 	.word	0x08005d4d
 8005cc8:	08005d4d 	.word	0x08005d4d
 8005ccc:	08005d4d 	.word	0x08005d4d
 8005cd0:	08005d4d 	.word	0x08005d4d
 8005cd4:	08005d4d 	.word	0x08005d4d
 8005cd8:	08005d35 	.word	0x08005d35
 8005cdc:	08005d4d 	.word	0x08005d4d
 8005ce0:	08005d4d 	.word	0x08005d4d
 8005ce4:	08005d4d 	.word	0x08005d4d
 8005ce8:	08005d4d 	.word	0x08005d4d
 8005cec:	08005d4d 	.word	0x08005d4d
 8005cf0:	08005d4d 	.word	0x08005d4d
 8005cf4:	08005d4d 	.word	0x08005d4d
 8005cf8:	08005d3d 	.word	0x08005d3d
 8005cfc:	08005d4d 	.word	0x08005d4d
 8005d00:	08005d4d 	.word	0x08005d4d
 8005d04:	08005d4d 	.word	0x08005d4d
 8005d08:	08005d4d 	.word	0x08005d4d
 8005d0c:	08005d4d 	.word	0x08005d4d
 8005d10:	08005d4d 	.word	0x08005d4d
 8005d14:	08005d4d 	.word	0x08005d4d
 8005d18:	08005d45 	.word	0x08005d45
 8005d1c:	2301      	movs	r3, #1
 8005d1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005d22:	e326      	b.n	8006372 <UART_SetConfig+0x7ae>
 8005d24:	2304      	movs	r3, #4
 8005d26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005d2a:	e322      	b.n	8006372 <UART_SetConfig+0x7ae>
 8005d2c:	2308      	movs	r3, #8
 8005d2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005d32:	e31e      	b.n	8006372 <UART_SetConfig+0x7ae>
 8005d34:	2310      	movs	r3, #16
 8005d36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005d3a:	e31a      	b.n	8006372 <UART_SetConfig+0x7ae>
 8005d3c:	2320      	movs	r3, #32
 8005d3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005d42:	e316      	b.n	8006372 <UART_SetConfig+0x7ae>
 8005d44:	2340      	movs	r3, #64	@ 0x40
 8005d46:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005d4a:	e312      	b.n	8006372 <UART_SetConfig+0x7ae>
 8005d4c:	2380      	movs	r3, #128	@ 0x80
 8005d4e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005d52:	e30e      	b.n	8006372 <UART_SetConfig+0x7ae>
 8005d54:	697b      	ldr	r3, [r7, #20]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	4a69      	ldr	r2, [pc, #420]	@ (8005f00 <UART_SetConfig+0x33c>)
 8005d5a:	4293      	cmp	r3, r2
 8005d5c:	d130      	bne.n	8005dc0 <UART_SetConfig+0x1fc>
 8005d5e:	4b67      	ldr	r3, [pc, #412]	@ (8005efc <UART_SetConfig+0x338>)
 8005d60:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005d62:	f003 0307 	and.w	r3, r3, #7
 8005d66:	2b05      	cmp	r3, #5
 8005d68:	d826      	bhi.n	8005db8 <UART_SetConfig+0x1f4>
 8005d6a:	a201      	add	r2, pc, #4	@ (adr r2, 8005d70 <UART_SetConfig+0x1ac>)
 8005d6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d70:	08005d89 	.word	0x08005d89
 8005d74:	08005d91 	.word	0x08005d91
 8005d78:	08005d99 	.word	0x08005d99
 8005d7c:	08005da1 	.word	0x08005da1
 8005d80:	08005da9 	.word	0x08005da9
 8005d84:	08005db1 	.word	0x08005db1
 8005d88:	2300      	movs	r3, #0
 8005d8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005d8e:	e2f0      	b.n	8006372 <UART_SetConfig+0x7ae>
 8005d90:	2304      	movs	r3, #4
 8005d92:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005d96:	e2ec      	b.n	8006372 <UART_SetConfig+0x7ae>
 8005d98:	2308      	movs	r3, #8
 8005d9a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005d9e:	e2e8      	b.n	8006372 <UART_SetConfig+0x7ae>
 8005da0:	2310      	movs	r3, #16
 8005da2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005da6:	e2e4      	b.n	8006372 <UART_SetConfig+0x7ae>
 8005da8:	2320      	movs	r3, #32
 8005daa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005dae:	e2e0      	b.n	8006372 <UART_SetConfig+0x7ae>
 8005db0:	2340      	movs	r3, #64	@ 0x40
 8005db2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005db6:	e2dc      	b.n	8006372 <UART_SetConfig+0x7ae>
 8005db8:	2380      	movs	r3, #128	@ 0x80
 8005dba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005dbe:	e2d8      	b.n	8006372 <UART_SetConfig+0x7ae>
 8005dc0:	697b      	ldr	r3, [r7, #20]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	4a4f      	ldr	r2, [pc, #316]	@ (8005f04 <UART_SetConfig+0x340>)
 8005dc6:	4293      	cmp	r3, r2
 8005dc8:	d130      	bne.n	8005e2c <UART_SetConfig+0x268>
 8005dca:	4b4c      	ldr	r3, [pc, #304]	@ (8005efc <UART_SetConfig+0x338>)
 8005dcc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005dce:	f003 0307 	and.w	r3, r3, #7
 8005dd2:	2b05      	cmp	r3, #5
 8005dd4:	d826      	bhi.n	8005e24 <UART_SetConfig+0x260>
 8005dd6:	a201      	add	r2, pc, #4	@ (adr r2, 8005ddc <UART_SetConfig+0x218>)
 8005dd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ddc:	08005df5 	.word	0x08005df5
 8005de0:	08005dfd 	.word	0x08005dfd
 8005de4:	08005e05 	.word	0x08005e05
 8005de8:	08005e0d 	.word	0x08005e0d
 8005dec:	08005e15 	.word	0x08005e15
 8005df0:	08005e1d 	.word	0x08005e1d
 8005df4:	2300      	movs	r3, #0
 8005df6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005dfa:	e2ba      	b.n	8006372 <UART_SetConfig+0x7ae>
 8005dfc:	2304      	movs	r3, #4
 8005dfe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005e02:	e2b6      	b.n	8006372 <UART_SetConfig+0x7ae>
 8005e04:	2308      	movs	r3, #8
 8005e06:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005e0a:	e2b2      	b.n	8006372 <UART_SetConfig+0x7ae>
 8005e0c:	2310      	movs	r3, #16
 8005e0e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005e12:	e2ae      	b.n	8006372 <UART_SetConfig+0x7ae>
 8005e14:	2320      	movs	r3, #32
 8005e16:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005e1a:	e2aa      	b.n	8006372 <UART_SetConfig+0x7ae>
 8005e1c:	2340      	movs	r3, #64	@ 0x40
 8005e1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005e22:	e2a6      	b.n	8006372 <UART_SetConfig+0x7ae>
 8005e24:	2380      	movs	r3, #128	@ 0x80
 8005e26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005e2a:	e2a2      	b.n	8006372 <UART_SetConfig+0x7ae>
 8005e2c:	697b      	ldr	r3, [r7, #20]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	4a35      	ldr	r2, [pc, #212]	@ (8005f08 <UART_SetConfig+0x344>)
 8005e32:	4293      	cmp	r3, r2
 8005e34:	d130      	bne.n	8005e98 <UART_SetConfig+0x2d4>
 8005e36:	4b31      	ldr	r3, [pc, #196]	@ (8005efc <UART_SetConfig+0x338>)
 8005e38:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005e3a:	f003 0307 	and.w	r3, r3, #7
 8005e3e:	2b05      	cmp	r3, #5
 8005e40:	d826      	bhi.n	8005e90 <UART_SetConfig+0x2cc>
 8005e42:	a201      	add	r2, pc, #4	@ (adr r2, 8005e48 <UART_SetConfig+0x284>)
 8005e44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e48:	08005e61 	.word	0x08005e61
 8005e4c:	08005e69 	.word	0x08005e69
 8005e50:	08005e71 	.word	0x08005e71
 8005e54:	08005e79 	.word	0x08005e79
 8005e58:	08005e81 	.word	0x08005e81
 8005e5c:	08005e89 	.word	0x08005e89
 8005e60:	2300      	movs	r3, #0
 8005e62:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005e66:	e284      	b.n	8006372 <UART_SetConfig+0x7ae>
 8005e68:	2304      	movs	r3, #4
 8005e6a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005e6e:	e280      	b.n	8006372 <UART_SetConfig+0x7ae>
 8005e70:	2308      	movs	r3, #8
 8005e72:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005e76:	e27c      	b.n	8006372 <UART_SetConfig+0x7ae>
 8005e78:	2310      	movs	r3, #16
 8005e7a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005e7e:	e278      	b.n	8006372 <UART_SetConfig+0x7ae>
 8005e80:	2320      	movs	r3, #32
 8005e82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005e86:	e274      	b.n	8006372 <UART_SetConfig+0x7ae>
 8005e88:	2340      	movs	r3, #64	@ 0x40
 8005e8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005e8e:	e270      	b.n	8006372 <UART_SetConfig+0x7ae>
 8005e90:	2380      	movs	r3, #128	@ 0x80
 8005e92:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005e96:	e26c      	b.n	8006372 <UART_SetConfig+0x7ae>
 8005e98:	697b      	ldr	r3, [r7, #20]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	4a1b      	ldr	r2, [pc, #108]	@ (8005f0c <UART_SetConfig+0x348>)
 8005e9e:	4293      	cmp	r3, r2
 8005ea0:	d142      	bne.n	8005f28 <UART_SetConfig+0x364>
 8005ea2:	4b16      	ldr	r3, [pc, #88]	@ (8005efc <UART_SetConfig+0x338>)
 8005ea4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005ea6:	f003 0307 	and.w	r3, r3, #7
 8005eaa:	2b05      	cmp	r3, #5
 8005eac:	d838      	bhi.n	8005f20 <UART_SetConfig+0x35c>
 8005eae:	a201      	add	r2, pc, #4	@ (adr r2, 8005eb4 <UART_SetConfig+0x2f0>)
 8005eb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005eb4:	08005ecd 	.word	0x08005ecd
 8005eb8:	08005ed5 	.word	0x08005ed5
 8005ebc:	08005edd 	.word	0x08005edd
 8005ec0:	08005ee5 	.word	0x08005ee5
 8005ec4:	08005f11 	.word	0x08005f11
 8005ec8:	08005f19 	.word	0x08005f19
 8005ecc:	2300      	movs	r3, #0
 8005ece:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005ed2:	e24e      	b.n	8006372 <UART_SetConfig+0x7ae>
 8005ed4:	2304      	movs	r3, #4
 8005ed6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005eda:	e24a      	b.n	8006372 <UART_SetConfig+0x7ae>
 8005edc:	2308      	movs	r3, #8
 8005ede:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005ee2:	e246      	b.n	8006372 <UART_SetConfig+0x7ae>
 8005ee4:	2310      	movs	r3, #16
 8005ee6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005eea:	e242      	b.n	8006372 <UART_SetConfig+0x7ae>
 8005eec:	cfff69f3 	.word	0xcfff69f3
 8005ef0:	58000c00 	.word	0x58000c00
 8005ef4:	11fff4ff 	.word	0x11fff4ff
 8005ef8:	40011000 	.word	0x40011000
 8005efc:	58024400 	.word	0x58024400
 8005f00:	40004400 	.word	0x40004400
 8005f04:	40004800 	.word	0x40004800
 8005f08:	40004c00 	.word	0x40004c00
 8005f0c:	40005000 	.word	0x40005000
 8005f10:	2320      	movs	r3, #32
 8005f12:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005f16:	e22c      	b.n	8006372 <UART_SetConfig+0x7ae>
 8005f18:	2340      	movs	r3, #64	@ 0x40
 8005f1a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005f1e:	e228      	b.n	8006372 <UART_SetConfig+0x7ae>
 8005f20:	2380      	movs	r3, #128	@ 0x80
 8005f22:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005f26:	e224      	b.n	8006372 <UART_SetConfig+0x7ae>
 8005f28:	697b      	ldr	r3, [r7, #20]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	4ab1      	ldr	r2, [pc, #708]	@ (80061f4 <UART_SetConfig+0x630>)
 8005f2e:	4293      	cmp	r3, r2
 8005f30:	d176      	bne.n	8006020 <UART_SetConfig+0x45c>
 8005f32:	4bb1      	ldr	r3, [pc, #708]	@ (80061f8 <UART_SetConfig+0x634>)
 8005f34:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005f36:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005f3a:	2b28      	cmp	r3, #40	@ 0x28
 8005f3c:	d86c      	bhi.n	8006018 <UART_SetConfig+0x454>
 8005f3e:	a201      	add	r2, pc, #4	@ (adr r2, 8005f44 <UART_SetConfig+0x380>)
 8005f40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f44:	08005fe9 	.word	0x08005fe9
 8005f48:	08006019 	.word	0x08006019
 8005f4c:	08006019 	.word	0x08006019
 8005f50:	08006019 	.word	0x08006019
 8005f54:	08006019 	.word	0x08006019
 8005f58:	08006019 	.word	0x08006019
 8005f5c:	08006019 	.word	0x08006019
 8005f60:	08006019 	.word	0x08006019
 8005f64:	08005ff1 	.word	0x08005ff1
 8005f68:	08006019 	.word	0x08006019
 8005f6c:	08006019 	.word	0x08006019
 8005f70:	08006019 	.word	0x08006019
 8005f74:	08006019 	.word	0x08006019
 8005f78:	08006019 	.word	0x08006019
 8005f7c:	08006019 	.word	0x08006019
 8005f80:	08006019 	.word	0x08006019
 8005f84:	08005ff9 	.word	0x08005ff9
 8005f88:	08006019 	.word	0x08006019
 8005f8c:	08006019 	.word	0x08006019
 8005f90:	08006019 	.word	0x08006019
 8005f94:	08006019 	.word	0x08006019
 8005f98:	08006019 	.word	0x08006019
 8005f9c:	08006019 	.word	0x08006019
 8005fa0:	08006019 	.word	0x08006019
 8005fa4:	08006001 	.word	0x08006001
 8005fa8:	08006019 	.word	0x08006019
 8005fac:	08006019 	.word	0x08006019
 8005fb0:	08006019 	.word	0x08006019
 8005fb4:	08006019 	.word	0x08006019
 8005fb8:	08006019 	.word	0x08006019
 8005fbc:	08006019 	.word	0x08006019
 8005fc0:	08006019 	.word	0x08006019
 8005fc4:	08006009 	.word	0x08006009
 8005fc8:	08006019 	.word	0x08006019
 8005fcc:	08006019 	.word	0x08006019
 8005fd0:	08006019 	.word	0x08006019
 8005fd4:	08006019 	.word	0x08006019
 8005fd8:	08006019 	.word	0x08006019
 8005fdc:	08006019 	.word	0x08006019
 8005fe0:	08006019 	.word	0x08006019
 8005fe4:	08006011 	.word	0x08006011
 8005fe8:	2301      	movs	r3, #1
 8005fea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005fee:	e1c0      	b.n	8006372 <UART_SetConfig+0x7ae>
 8005ff0:	2304      	movs	r3, #4
 8005ff2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005ff6:	e1bc      	b.n	8006372 <UART_SetConfig+0x7ae>
 8005ff8:	2308      	movs	r3, #8
 8005ffa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005ffe:	e1b8      	b.n	8006372 <UART_SetConfig+0x7ae>
 8006000:	2310      	movs	r3, #16
 8006002:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006006:	e1b4      	b.n	8006372 <UART_SetConfig+0x7ae>
 8006008:	2320      	movs	r3, #32
 800600a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800600e:	e1b0      	b.n	8006372 <UART_SetConfig+0x7ae>
 8006010:	2340      	movs	r3, #64	@ 0x40
 8006012:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006016:	e1ac      	b.n	8006372 <UART_SetConfig+0x7ae>
 8006018:	2380      	movs	r3, #128	@ 0x80
 800601a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800601e:	e1a8      	b.n	8006372 <UART_SetConfig+0x7ae>
 8006020:	697b      	ldr	r3, [r7, #20]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	4a75      	ldr	r2, [pc, #468]	@ (80061fc <UART_SetConfig+0x638>)
 8006026:	4293      	cmp	r3, r2
 8006028:	d130      	bne.n	800608c <UART_SetConfig+0x4c8>
 800602a:	4b73      	ldr	r3, [pc, #460]	@ (80061f8 <UART_SetConfig+0x634>)
 800602c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800602e:	f003 0307 	and.w	r3, r3, #7
 8006032:	2b05      	cmp	r3, #5
 8006034:	d826      	bhi.n	8006084 <UART_SetConfig+0x4c0>
 8006036:	a201      	add	r2, pc, #4	@ (adr r2, 800603c <UART_SetConfig+0x478>)
 8006038:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800603c:	08006055 	.word	0x08006055
 8006040:	0800605d 	.word	0x0800605d
 8006044:	08006065 	.word	0x08006065
 8006048:	0800606d 	.word	0x0800606d
 800604c:	08006075 	.word	0x08006075
 8006050:	0800607d 	.word	0x0800607d
 8006054:	2300      	movs	r3, #0
 8006056:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800605a:	e18a      	b.n	8006372 <UART_SetConfig+0x7ae>
 800605c:	2304      	movs	r3, #4
 800605e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006062:	e186      	b.n	8006372 <UART_SetConfig+0x7ae>
 8006064:	2308      	movs	r3, #8
 8006066:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800606a:	e182      	b.n	8006372 <UART_SetConfig+0x7ae>
 800606c:	2310      	movs	r3, #16
 800606e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006072:	e17e      	b.n	8006372 <UART_SetConfig+0x7ae>
 8006074:	2320      	movs	r3, #32
 8006076:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800607a:	e17a      	b.n	8006372 <UART_SetConfig+0x7ae>
 800607c:	2340      	movs	r3, #64	@ 0x40
 800607e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006082:	e176      	b.n	8006372 <UART_SetConfig+0x7ae>
 8006084:	2380      	movs	r3, #128	@ 0x80
 8006086:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800608a:	e172      	b.n	8006372 <UART_SetConfig+0x7ae>
 800608c:	697b      	ldr	r3, [r7, #20]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	4a5b      	ldr	r2, [pc, #364]	@ (8006200 <UART_SetConfig+0x63c>)
 8006092:	4293      	cmp	r3, r2
 8006094:	d130      	bne.n	80060f8 <UART_SetConfig+0x534>
 8006096:	4b58      	ldr	r3, [pc, #352]	@ (80061f8 <UART_SetConfig+0x634>)
 8006098:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800609a:	f003 0307 	and.w	r3, r3, #7
 800609e:	2b05      	cmp	r3, #5
 80060a0:	d826      	bhi.n	80060f0 <UART_SetConfig+0x52c>
 80060a2:	a201      	add	r2, pc, #4	@ (adr r2, 80060a8 <UART_SetConfig+0x4e4>)
 80060a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060a8:	080060c1 	.word	0x080060c1
 80060ac:	080060c9 	.word	0x080060c9
 80060b0:	080060d1 	.word	0x080060d1
 80060b4:	080060d9 	.word	0x080060d9
 80060b8:	080060e1 	.word	0x080060e1
 80060bc:	080060e9 	.word	0x080060e9
 80060c0:	2300      	movs	r3, #0
 80060c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80060c6:	e154      	b.n	8006372 <UART_SetConfig+0x7ae>
 80060c8:	2304      	movs	r3, #4
 80060ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80060ce:	e150      	b.n	8006372 <UART_SetConfig+0x7ae>
 80060d0:	2308      	movs	r3, #8
 80060d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80060d6:	e14c      	b.n	8006372 <UART_SetConfig+0x7ae>
 80060d8:	2310      	movs	r3, #16
 80060da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80060de:	e148      	b.n	8006372 <UART_SetConfig+0x7ae>
 80060e0:	2320      	movs	r3, #32
 80060e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80060e6:	e144      	b.n	8006372 <UART_SetConfig+0x7ae>
 80060e8:	2340      	movs	r3, #64	@ 0x40
 80060ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80060ee:	e140      	b.n	8006372 <UART_SetConfig+0x7ae>
 80060f0:	2380      	movs	r3, #128	@ 0x80
 80060f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80060f6:	e13c      	b.n	8006372 <UART_SetConfig+0x7ae>
 80060f8:	697b      	ldr	r3, [r7, #20]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	4a41      	ldr	r2, [pc, #260]	@ (8006204 <UART_SetConfig+0x640>)
 80060fe:	4293      	cmp	r3, r2
 8006100:	f040 8082 	bne.w	8006208 <UART_SetConfig+0x644>
 8006104:	4b3c      	ldr	r3, [pc, #240]	@ (80061f8 <UART_SetConfig+0x634>)
 8006106:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006108:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800610c:	2b28      	cmp	r3, #40	@ 0x28
 800610e:	d86d      	bhi.n	80061ec <UART_SetConfig+0x628>
 8006110:	a201      	add	r2, pc, #4	@ (adr r2, 8006118 <UART_SetConfig+0x554>)
 8006112:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006116:	bf00      	nop
 8006118:	080061bd 	.word	0x080061bd
 800611c:	080061ed 	.word	0x080061ed
 8006120:	080061ed 	.word	0x080061ed
 8006124:	080061ed 	.word	0x080061ed
 8006128:	080061ed 	.word	0x080061ed
 800612c:	080061ed 	.word	0x080061ed
 8006130:	080061ed 	.word	0x080061ed
 8006134:	080061ed 	.word	0x080061ed
 8006138:	080061c5 	.word	0x080061c5
 800613c:	080061ed 	.word	0x080061ed
 8006140:	080061ed 	.word	0x080061ed
 8006144:	080061ed 	.word	0x080061ed
 8006148:	080061ed 	.word	0x080061ed
 800614c:	080061ed 	.word	0x080061ed
 8006150:	080061ed 	.word	0x080061ed
 8006154:	080061ed 	.word	0x080061ed
 8006158:	080061cd 	.word	0x080061cd
 800615c:	080061ed 	.word	0x080061ed
 8006160:	080061ed 	.word	0x080061ed
 8006164:	080061ed 	.word	0x080061ed
 8006168:	080061ed 	.word	0x080061ed
 800616c:	080061ed 	.word	0x080061ed
 8006170:	080061ed 	.word	0x080061ed
 8006174:	080061ed 	.word	0x080061ed
 8006178:	080061d5 	.word	0x080061d5
 800617c:	080061ed 	.word	0x080061ed
 8006180:	080061ed 	.word	0x080061ed
 8006184:	080061ed 	.word	0x080061ed
 8006188:	080061ed 	.word	0x080061ed
 800618c:	080061ed 	.word	0x080061ed
 8006190:	080061ed 	.word	0x080061ed
 8006194:	080061ed 	.word	0x080061ed
 8006198:	080061dd 	.word	0x080061dd
 800619c:	080061ed 	.word	0x080061ed
 80061a0:	080061ed 	.word	0x080061ed
 80061a4:	080061ed 	.word	0x080061ed
 80061a8:	080061ed 	.word	0x080061ed
 80061ac:	080061ed 	.word	0x080061ed
 80061b0:	080061ed 	.word	0x080061ed
 80061b4:	080061ed 	.word	0x080061ed
 80061b8:	080061e5 	.word	0x080061e5
 80061bc:	2301      	movs	r3, #1
 80061be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80061c2:	e0d6      	b.n	8006372 <UART_SetConfig+0x7ae>
 80061c4:	2304      	movs	r3, #4
 80061c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80061ca:	e0d2      	b.n	8006372 <UART_SetConfig+0x7ae>
 80061cc:	2308      	movs	r3, #8
 80061ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80061d2:	e0ce      	b.n	8006372 <UART_SetConfig+0x7ae>
 80061d4:	2310      	movs	r3, #16
 80061d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80061da:	e0ca      	b.n	8006372 <UART_SetConfig+0x7ae>
 80061dc:	2320      	movs	r3, #32
 80061de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80061e2:	e0c6      	b.n	8006372 <UART_SetConfig+0x7ae>
 80061e4:	2340      	movs	r3, #64	@ 0x40
 80061e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80061ea:	e0c2      	b.n	8006372 <UART_SetConfig+0x7ae>
 80061ec:	2380      	movs	r3, #128	@ 0x80
 80061ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80061f2:	e0be      	b.n	8006372 <UART_SetConfig+0x7ae>
 80061f4:	40011400 	.word	0x40011400
 80061f8:	58024400 	.word	0x58024400
 80061fc:	40007800 	.word	0x40007800
 8006200:	40007c00 	.word	0x40007c00
 8006204:	40011800 	.word	0x40011800
 8006208:	697b      	ldr	r3, [r7, #20]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	4aad      	ldr	r2, [pc, #692]	@ (80064c4 <UART_SetConfig+0x900>)
 800620e:	4293      	cmp	r3, r2
 8006210:	d176      	bne.n	8006300 <UART_SetConfig+0x73c>
 8006212:	4bad      	ldr	r3, [pc, #692]	@ (80064c8 <UART_SetConfig+0x904>)
 8006214:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006216:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800621a:	2b28      	cmp	r3, #40	@ 0x28
 800621c:	d86c      	bhi.n	80062f8 <UART_SetConfig+0x734>
 800621e:	a201      	add	r2, pc, #4	@ (adr r2, 8006224 <UART_SetConfig+0x660>)
 8006220:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006224:	080062c9 	.word	0x080062c9
 8006228:	080062f9 	.word	0x080062f9
 800622c:	080062f9 	.word	0x080062f9
 8006230:	080062f9 	.word	0x080062f9
 8006234:	080062f9 	.word	0x080062f9
 8006238:	080062f9 	.word	0x080062f9
 800623c:	080062f9 	.word	0x080062f9
 8006240:	080062f9 	.word	0x080062f9
 8006244:	080062d1 	.word	0x080062d1
 8006248:	080062f9 	.word	0x080062f9
 800624c:	080062f9 	.word	0x080062f9
 8006250:	080062f9 	.word	0x080062f9
 8006254:	080062f9 	.word	0x080062f9
 8006258:	080062f9 	.word	0x080062f9
 800625c:	080062f9 	.word	0x080062f9
 8006260:	080062f9 	.word	0x080062f9
 8006264:	080062d9 	.word	0x080062d9
 8006268:	080062f9 	.word	0x080062f9
 800626c:	080062f9 	.word	0x080062f9
 8006270:	080062f9 	.word	0x080062f9
 8006274:	080062f9 	.word	0x080062f9
 8006278:	080062f9 	.word	0x080062f9
 800627c:	080062f9 	.word	0x080062f9
 8006280:	080062f9 	.word	0x080062f9
 8006284:	080062e1 	.word	0x080062e1
 8006288:	080062f9 	.word	0x080062f9
 800628c:	080062f9 	.word	0x080062f9
 8006290:	080062f9 	.word	0x080062f9
 8006294:	080062f9 	.word	0x080062f9
 8006298:	080062f9 	.word	0x080062f9
 800629c:	080062f9 	.word	0x080062f9
 80062a0:	080062f9 	.word	0x080062f9
 80062a4:	080062e9 	.word	0x080062e9
 80062a8:	080062f9 	.word	0x080062f9
 80062ac:	080062f9 	.word	0x080062f9
 80062b0:	080062f9 	.word	0x080062f9
 80062b4:	080062f9 	.word	0x080062f9
 80062b8:	080062f9 	.word	0x080062f9
 80062bc:	080062f9 	.word	0x080062f9
 80062c0:	080062f9 	.word	0x080062f9
 80062c4:	080062f1 	.word	0x080062f1
 80062c8:	2301      	movs	r3, #1
 80062ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80062ce:	e050      	b.n	8006372 <UART_SetConfig+0x7ae>
 80062d0:	2304      	movs	r3, #4
 80062d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80062d6:	e04c      	b.n	8006372 <UART_SetConfig+0x7ae>
 80062d8:	2308      	movs	r3, #8
 80062da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80062de:	e048      	b.n	8006372 <UART_SetConfig+0x7ae>
 80062e0:	2310      	movs	r3, #16
 80062e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80062e6:	e044      	b.n	8006372 <UART_SetConfig+0x7ae>
 80062e8:	2320      	movs	r3, #32
 80062ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80062ee:	e040      	b.n	8006372 <UART_SetConfig+0x7ae>
 80062f0:	2340      	movs	r3, #64	@ 0x40
 80062f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80062f6:	e03c      	b.n	8006372 <UART_SetConfig+0x7ae>
 80062f8:	2380      	movs	r3, #128	@ 0x80
 80062fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80062fe:	e038      	b.n	8006372 <UART_SetConfig+0x7ae>
 8006300:	697b      	ldr	r3, [r7, #20]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	4a71      	ldr	r2, [pc, #452]	@ (80064cc <UART_SetConfig+0x908>)
 8006306:	4293      	cmp	r3, r2
 8006308:	d130      	bne.n	800636c <UART_SetConfig+0x7a8>
 800630a:	4b6f      	ldr	r3, [pc, #444]	@ (80064c8 <UART_SetConfig+0x904>)
 800630c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800630e:	f003 0307 	and.w	r3, r3, #7
 8006312:	2b05      	cmp	r3, #5
 8006314:	d826      	bhi.n	8006364 <UART_SetConfig+0x7a0>
 8006316:	a201      	add	r2, pc, #4	@ (adr r2, 800631c <UART_SetConfig+0x758>)
 8006318:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800631c:	08006335 	.word	0x08006335
 8006320:	0800633d 	.word	0x0800633d
 8006324:	08006345 	.word	0x08006345
 8006328:	0800634d 	.word	0x0800634d
 800632c:	08006355 	.word	0x08006355
 8006330:	0800635d 	.word	0x0800635d
 8006334:	2302      	movs	r3, #2
 8006336:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800633a:	e01a      	b.n	8006372 <UART_SetConfig+0x7ae>
 800633c:	2304      	movs	r3, #4
 800633e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006342:	e016      	b.n	8006372 <UART_SetConfig+0x7ae>
 8006344:	2308      	movs	r3, #8
 8006346:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800634a:	e012      	b.n	8006372 <UART_SetConfig+0x7ae>
 800634c:	2310      	movs	r3, #16
 800634e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006352:	e00e      	b.n	8006372 <UART_SetConfig+0x7ae>
 8006354:	2320      	movs	r3, #32
 8006356:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800635a:	e00a      	b.n	8006372 <UART_SetConfig+0x7ae>
 800635c:	2340      	movs	r3, #64	@ 0x40
 800635e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006362:	e006      	b.n	8006372 <UART_SetConfig+0x7ae>
 8006364:	2380      	movs	r3, #128	@ 0x80
 8006366:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800636a:	e002      	b.n	8006372 <UART_SetConfig+0x7ae>
 800636c:	2380      	movs	r3, #128	@ 0x80
 800636e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006372:	697b      	ldr	r3, [r7, #20]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	4a55      	ldr	r2, [pc, #340]	@ (80064cc <UART_SetConfig+0x908>)
 8006378:	4293      	cmp	r3, r2
 800637a:	f040 80f8 	bne.w	800656e <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800637e:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8006382:	2b20      	cmp	r3, #32
 8006384:	dc46      	bgt.n	8006414 <UART_SetConfig+0x850>
 8006386:	2b02      	cmp	r3, #2
 8006388:	db75      	blt.n	8006476 <UART_SetConfig+0x8b2>
 800638a:	3b02      	subs	r3, #2
 800638c:	2b1e      	cmp	r3, #30
 800638e:	d872      	bhi.n	8006476 <UART_SetConfig+0x8b2>
 8006390:	a201      	add	r2, pc, #4	@ (adr r2, 8006398 <UART_SetConfig+0x7d4>)
 8006392:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006396:	bf00      	nop
 8006398:	0800641b 	.word	0x0800641b
 800639c:	08006477 	.word	0x08006477
 80063a0:	08006423 	.word	0x08006423
 80063a4:	08006477 	.word	0x08006477
 80063a8:	08006477 	.word	0x08006477
 80063ac:	08006477 	.word	0x08006477
 80063b0:	08006433 	.word	0x08006433
 80063b4:	08006477 	.word	0x08006477
 80063b8:	08006477 	.word	0x08006477
 80063bc:	08006477 	.word	0x08006477
 80063c0:	08006477 	.word	0x08006477
 80063c4:	08006477 	.word	0x08006477
 80063c8:	08006477 	.word	0x08006477
 80063cc:	08006477 	.word	0x08006477
 80063d0:	08006443 	.word	0x08006443
 80063d4:	08006477 	.word	0x08006477
 80063d8:	08006477 	.word	0x08006477
 80063dc:	08006477 	.word	0x08006477
 80063e0:	08006477 	.word	0x08006477
 80063e4:	08006477 	.word	0x08006477
 80063e8:	08006477 	.word	0x08006477
 80063ec:	08006477 	.word	0x08006477
 80063f0:	08006477 	.word	0x08006477
 80063f4:	08006477 	.word	0x08006477
 80063f8:	08006477 	.word	0x08006477
 80063fc:	08006477 	.word	0x08006477
 8006400:	08006477 	.word	0x08006477
 8006404:	08006477 	.word	0x08006477
 8006408:	08006477 	.word	0x08006477
 800640c:	08006477 	.word	0x08006477
 8006410:	08006469 	.word	0x08006469
 8006414:	2b40      	cmp	r3, #64	@ 0x40
 8006416:	d02a      	beq.n	800646e <UART_SetConfig+0x8aa>
 8006418:	e02d      	b.n	8006476 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800641a:	f7fe f8c7 	bl	80045ac <HAL_RCCEx_GetD3PCLK1Freq>
 800641e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8006420:	e02f      	b.n	8006482 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006422:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006426:	4618      	mov	r0, r3
 8006428:	f7fe f8d6 	bl	80045d8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800642c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800642e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006430:	e027      	b.n	8006482 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006432:	f107 0318 	add.w	r3, r7, #24
 8006436:	4618      	mov	r0, r3
 8006438:	f7fe fa22 	bl	8004880 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800643c:	69fb      	ldr	r3, [r7, #28]
 800643e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006440:	e01f      	b.n	8006482 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006442:	4b21      	ldr	r3, [pc, #132]	@ (80064c8 <UART_SetConfig+0x904>)
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	f003 0320 	and.w	r3, r3, #32
 800644a:	2b00      	cmp	r3, #0
 800644c:	d009      	beq.n	8006462 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800644e:	4b1e      	ldr	r3, [pc, #120]	@ (80064c8 <UART_SetConfig+0x904>)
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	08db      	lsrs	r3, r3, #3
 8006454:	f003 0303 	and.w	r3, r3, #3
 8006458:	4a1d      	ldr	r2, [pc, #116]	@ (80064d0 <UART_SetConfig+0x90c>)
 800645a:	fa22 f303 	lsr.w	r3, r2, r3
 800645e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006460:	e00f      	b.n	8006482 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8006462:	4b1b      	ldr	r3, [pc, #108]	@ (80064d0 <UART_SetConfig+0x90c>)
 8006464:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006466:	e00c      	b.n	8006482 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006468:	4b1a      	ldr	r3, [pc, #104]	@ (80064d4 <UART_SetConfig+0x910>)
 800646a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800646c:	e009      	b.n	8006482 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800646e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006472:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006474:	e005      	b.n	8006482 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8006476:	2300      	movs	r3, #0
 8006478:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800647a:	2301      	movs	r3, #1
 800647c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8006480:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006482:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006484:	2b00      	cmp	r3, #0
 8006486:	f000 81ee 	beq.w	8006866 <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800648a:	697b      	ldr	r3, [r7, #20]
 800648c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800648e:	4a12      	ldr	r2, [pc, #72]	@ (80064d8 <UART_SetConfig+0x914>)
 8006490:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006494:	461a      	mov	r2, r3
 8006496:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006498:	fbb3 f3f2 	udiv	r3, r3, r2
 800649c:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800649e:	697b      	ldr	r3, [r7, #20]
 80064a0:	685a      	ldr	r2, [r3, #4]
 80064a2:	4613      	mov	r3, r2
 80064a4:	005b      	lsls	r3, r3, #1
 80064a6:	4413      	add	r3, r2
 80064a8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80064aa:	429a      	cmp	r2, r3
 80064ac:	d305      	bcc.n	80064ba <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80064ae:	697b      	ldr	r3, [r7, #20]
 80064b0:	685b      	ldr	r3, [r3, #4]
 80064b2:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80064b4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80064b6:	429a      	cmp	r2, r3
 80064b8:	d910      	bls.n	80064dc <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 80064ba:	2301      	movs	r3, #1
 80064bc:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80064c0:	e1d1      	b.n	8006866 <UART_SetConfig+0xca2>
 80064c2:	bf00      	nop
 80064c4:	40011c00 	.word	0x40011c00
 80064c8:	58024400 	.word	0x58024400
 80064cc:	58000c00 	.word	0x58000c00
 80064d0:	03d09000 	.word	0x03d09000
 80064d4:	003d0900 	.word	0x003d0900
 80064d8:	0801bb14 	.word	0x0801bb14
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80064dc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80064de:	2200      	movs	r2, #0
 80064e0:	60bb      	str	r3, [r7, #8]
 80064e2:	60fa      	str	r2, [r7, #12]
 80064e4:	697b      	ldr	r3, [r7, #20]
 80064e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80064e8:	4ac0      	ldr	r2, [pc, #768]	@ (80067ec <UART_SetConfig+0xc28>)
 80064ea:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80064ee:	b29b      	uxth	r3, r3
 80064f0:	2200      	movs	r2, #0
 80064f2:	603b      	str	r3, [r7, #0]
 80064f4:	607a      	str	r2, [r7, #4]
 80064f6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80064fa:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80064fe:	f7f9 ff05 	bl	800030c <__aeabi_uldivmod>
 8006502:	4602      	mov	r2, r0
 8006504:	460b      	mov	r3, r1
 8006506:	4610      	mov	r0, r2
 8006508:	4619      	mov	r1, r3
 800650a:	f04f 0200 	mov.w	r2, #0
 800650e:	f04f 0300 	mov.w	r3, #0
 8006512:	020b      	lsls	r3, r1, #8
 8006514:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8006518:	0202      	lsls	r2, r0, #8
 800651a:	6979      	ldr	r1, [r7, #20]
 800651c:	6849      	ldr	r1, [r1, #4]
 800651e:	0849      	lsrs	r1, r1, #1
 8006520:	2000      	movs	r0, #0
 8006522:	460c      	mov	r4, r1
 8006524:	4605      	mov	r5, r0
 8006526:	eb12 0804 	adds.w	r8, r2, r4
 800652a:	eb43 0905 	adc.w	r9, r3, r5
 800652e:	697b      	ldr	r3, [r7, #20]
 8006530:	685b      	ldr	r3, [r3, #4]
 8006532:	2200      	movs	r2, #0
 8006534:	469a      	mov	sl, r3
 8006536:	4693      	mov	fp, r2
 8006538:	4652      	mov	r2, sl
 800653a:	465b      	mov	r3, fp
 800653c:	4640      	mov	r0, r8
 800653e:	4649      	mov	r1, r9
 8006540:	f7f9 fee4 	bl	800030c <__aeabi_uldivmod>
 8006544:	4602      	mov	r2, r0
 8006546:	460b      	mov	r3, r1
 8006548:	4613      	mov	r3, r2
 800654a:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800654c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800654e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006552:	d308      	bcc.n	8006566 <UART_SetConfig+0x9a2>
 8006554:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006556:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800655a:	d204      	bcs.n	8006566 <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 800655c:	697b      	ldr	r3, [r7, #20]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006562:	60da      	str	r2, [r3, #12]
 8006564:	e17f      	b.n	8006866 <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 8006566:	2301      	movs	r3, #1
 8006568:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800656c:	e17b      	b.n	8006866 <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800656e:	697b      	ldr	r3, [r7, #20]
 8006570:	69db      	ldr	r3, [r3, #28]
 8006572:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006576:	f040 80bd 	bne.w	80066f4 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 800657a:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800657e:	2b20      	cmp	r3, #32
 8006580:	dc48      	bgt.n	8006614 <UART_SetConfig+0xa50>
 8006582:	2b00      	cmp	r3, #0
 8006584:	db7b      	blt.n	800667e <UART_SetConfig+0xaba>
 8006586:	2b20      	cmp	r3, #32
 8006588:	d879      	bhi.n	800667e <UART_SetConfig+0xaba>
 800658a:	a201      	add	r2, pc, #4	@ (adr r2, 8006590 <UART_SetConfig+0x9cc>)
 800658c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006590:	0800661b 	.word	0x0800661b
 8006594:	08006623 	.word	0x08006623
 8006598:	0800667f 	.word	0x0800667f
 800659c:	0800667f 	.word	0x0800667f
 80065a0:	0800662b 	.word	0x0800662b
 80065a4:	0800667f 	.word	0x0800667f
 80065a8:	0800667f 	.word	0x0800667f
 80065ac:	0800667f 	.word	0x0800667f
 80065b0:	0800663b 	.word	0x0800663b
 80065b4:	0800667f 	.word	0x0800667f
 80065b8:	0800667f 	.word	0x0800667f
 80065bc:	0800667f 	.word	0x0800667f
 80065c0:	0800667f 	.word	0x0800667f
 80065c4:	0800667f 	.word	0x0800667f
 80065c8:	0800667f 	.word	0x0800667f
 80065cc:	0800667f 	.word	0x0800667f
 80065d0:	0800664b 	.word	0x0800664b
 80065d4:	0800667f 	.word	0x0800667f
 80065d8:	0800667f 	.word	0x0800667f
 80065dc:	0800667f 	.word	0x0800667f
 80065e0:	0800667f 	.word	0x0800667f
 80065e4:	0800667f 	.word	0x0800667f
 80065e8:	0800667f 	.word	0x0800667f
 80065ec:	0800667f 	.word	0x0800667f
 80065f0:	0800667f 	.word	0x0800667f
 80065f4:	0800667f 	.word	0x0800667f
 80065f8:	0800667f 	.word	0x0800667f
 80065fc:	0800667f 	.word	0x0800667f
 8006600:	0800667f 	.word	0x0800667f
 8006604:	0800667f 	.word	0x0800667f
 8006608:	0800667f 	.word	0x0800667f
 800660c:	0800667f 	.word	0x0800667f
 8006610:	08006671 	.word	0x08006671
 8006614:	2b40      	cmp	r3, #64	@ 0x40
 8006616:	d02e      	beq.n	8006676 <UART_SetConfig+0xab2>
 8006618:	e031      	b.n	800667e <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800661a:	f7fc fdfb 	bl	8003214 <HAL_RCC_GetPCLK1Freq>
 800661e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8006620:	e033      	b.n	800668a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006622:	f7fc fe0d 	bl	8003240 <HAL_RCC_GetPCLK2Freq>
 8006626:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8006628:	e02f      	b.n	800668a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800662a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800662e:	4618      	mov	r0, r3
 8006630:	f7fd ffd2 	bl	80045d8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006634:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006636:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006638:	e027      	b.n	800668a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800663a:	f107 0318 	add.w	r3, r7, #24
 800663e:	4618      	mov	r0, r3
 8006640:	f7fe f91e 	bl	8004880 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006644:	69fb      	ldr	r3, [r7, #28]
 8006646:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006648:	e01f      	b.n	800668a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800664a:	4b69      	ldr	r3, [pc, #420]	@ (80067f0 <UART_SetConfig+0xc2c>)
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	f003 0320 	and.w	r3, r3, #32
 8006652:	2b00      	cmp	r3, #0
 8006654:	d009      	beq.n	800666a <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8006656:	4b66      	ldr	r3, [pc, #408]	@ (80067f0 <UART_SetConfig+0xc2c>)
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	08db      	lsrs	r3, r3, #3
 800665c:	f003 0303 	and.w	r3, r3, #3
 8006660:	4a64      	ldr	r2, [pc, #400]	@ (80067f4 <UART_SetConfig+0xc30>)
 8006662:	fa22 f303 	lsr.w	r3, r2, r3
 8006666:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006668:	e00f      	b.n	800668a <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 800666a:	4b62      	ldr	r3, [pc, #392]	@ (80067f4 <UART_SetConfig+0xc30>)
 800666c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800666e:	e00c      	b.n	800668a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006670:	4b61      	ldr	r3, [pc, #388]	@ (80067f8 <UART_SetConfig+0xc34>)
 8006672:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006674:	e009      	b.n	800668a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006676:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800667a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800667c:	e005      	b.n	800668a <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 800667e:	2300      	movs	r3, #0
 8006680:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8006682:	2301      	movs	r3, #1
 8006684:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8006688:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800668a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800668c:	2b00      	cmp	r3, #0
 800668e:	f000 80ea 	beq.w	8006866 <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006692:	697b      	ldr	r3, [r7, #20]
 8006694:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006696:	4a55      	ldr	r2, [pc, #340]	@ (80067ec <UART_SetConfig+0xc28>)
 8006698:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800669c:	461a      	mov	r2, r3
 800669e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80066a0:	fbb3 f3f2 	udiv	r3, r3, r2
 80066a4:	005a      	lsls	r2, r3, #1
 80066a6:	697b      	ldr	r3, [r7, #20]
 80066a8:	685b      	ldr	r3, [r3, #4]
 80066aa:	085b      	lsrs	r3, r3, #1
 80066ac:	441a      	add	r2, r3
 80066ae:	697b      	ldr	r3, [r7, #20]
 80066b0:	685b      	ldr	r3, [r3, #4]
 80066b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80066b6:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80066b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80066ba:	2b0f      	cmp	r3, #15
 80066bc:	d916      	bls.n	80066ec <UART_SetConfig+0xb28>
 80066be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80066c0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80066c4:	d212      	bcs.n	80066ec <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80066c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80066c8:	b29b      	uxth	r3, r3
 80066ca:	f023 030f 	bic.w	r3, r3, #15
 80066ce:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80066d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80066d2:	085b      	lsrs	r3, r3, #1
 80066d4:	b29b      	uxth	r3, r3
 80066d6:	f003 0307 	and.w	r3, r3, #7
 80066da:	b29a      	uxth	r2, r3
 80066dc:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80066de:	4313      	orrs	r3, r2
 80066e0:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 80066e2:	697b      	ldr	r3, [r7, #20]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 80066e8:	60da      	str	r2, [r3, #12]
 80066ea:	e0bc      	b.n	8006866 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 80066ec:	2301      	movs	r3, #1
 80066ee:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80066f2:	e0b8      	b.n	8006866 <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 80066f4:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80066f8:	2b20      	cmp	r3, #32
 80066fa:	dc4b      	bgt.n	8006794 <UART_SetConfig+0xbd0>
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	f2c0 8087 	blt.w	8006810 <UART_SetConfig+0xc4c>
 8006702:	2b20      	cmp	r3, #32
 8006704:	f200 8084 	bhi.w	8006810 <UART_SetConfig+0xc4c>
 8006708:	a201      	add	r2, pc, #4	@ (adr r2, 8006710 <UART_SetConfig+0xb4c>)
 800670a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800670e:	bf00      	nop
 8006710:	0800679b 	.word	0x0800679b
 8006714:	080067a3 	.word	0x080067a3
 8006718:	08006811 	.word	0x08006811
 800671c:	08006811 	.word	0x08006811
 8006720:	080067ab 	.word	0x080067ab
 8006724:	08006811 	.word	0x08006811
 8006728:	08006811 	.word	0x08006811
 800672c:	08006811 	.word	0x08006811
 8006730:	080067bb 	.word	0x080067bb
 8006734:	08006811 	.word	0x08006811
 8006738:	08006811 	.word	0x08006811
 800673c:	08006811 	.word	0x08006811
 8006740:	08006811 	.word	0x08006811
 8006744:	08006811 	.word	0x08006811
 8006748:	08006811 	.word	0x08006811
 800674c:	08006811 	.word	0x08006811
 8006750:	080067cb 	.word	0x080067cb
 8006754:	08006811 	.word	0x08006811
 8006758:	08006811 	.word	0x08006811
 800675c:	08006811 	.word	0x08006811
 8006760:	08006811 	.word	0x08006811
 8006764:	08006811 	.word	0x08006811
 8006768:	08006811 	.word	0x08006811
 800676c:	08006811 	.word	0x08006811
 8006770:	08006811 	.word	0x08006811
 8006774:	08006811 	.word	0x08006811
 8006778:	08006811 	.word	0x08006811
 800677c:	08006811 	.word	0x08006811
 8006780:	08006811 	.word	0x08006811
 8006784:	08006811 	.word	0x08006811
 8006788:	08006811 	.word	0x08006811
 800678c:	08006811 	.word	0x08006811
 8006790:	08006803 	.word	0x08006803
 8006794:	2b40      	cmp	r3, #64	@ 0x40
 8006796:	d037      	beq.n	8006808 <UART_SetConfig+0xc44>
 8006798:	e03a      	b.n	8006810 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800679a:	f7fc fd3b 	bl	8003214 <HAL_RCC_GetPCLK1Freq>
 800679e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80067a0:	e03c      	b.n	800681c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80067a2:	f7fc fd4d 	bl	8003240 <HAL_RCC_GetPCLK2Freq>
 80067a6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80067a8:	e038      	b.n	800681c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80067aa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80067ae:	4618      	mov	r0, r3
 80067b0:	f7fd ff12 	bl	80045d8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80067b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80067b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80067b8:	e030      	b.n	800681c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80067ba:	f107 0318 	add.w	r3, r7, #24
 80067be:	4618      	mov	r0, r3
 80067c0:	f7fe f85e 	bl	8004880 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80067c4:	69fb      	ldr	r3, [r7, #28]
 80067c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80067c8:	e028      	b.n	800681c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80067ca:	4b09      	ldr	r3, [pc, #36]	@ (80067f0 <UART_SetConfig+0xc2c>)
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	f003 0320 	and.w	r3, r3, #32
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d012      	beq.n	80067fc <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80067d6:	4b06      	ldr	r3, [pc, #24]	@ (80067f0 <UART_SetConfig+0xc2c>)
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	08db      	lsrs	r3, r3, #3
 80067dc:	f003 0303 	and.w	r3, r3, #3
 80067e0:	4a04      	ldr	r2, [pc, #16]	@ (80067f4 <UART_SetConfig+0xc30>)
 80067e2:	fa22 f303 	lsr.w	r3, r2, r3
 80067e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80067e8:	e018      	b.n	800681c <UART_SetConfig+0xc58>
 80067ea:	bf00      	nop
 80067ec:	0801bb14 	.word	0x0801bb14
 80067f0:	58024400 	.word	0x58024400
 80067f4:	03d09000 	.word	0x03d09000
 80067f8:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 80067fc:	4b24      	ldr	r3, [pc, #144]	@ (8006890 <UART_SetConfig+0xccc>)
 80067fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006800:	e00c      	b.n	800681c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006802:	4b24      	ldr	r3, [pc, #144]	@ (8006894 <UART_SetConfig+0xcd0>)
 8006804:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006806:	e009      	b.n	800681c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006808:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800680c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800680e:	e005      	b.n	800681c <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 8006810:	2300      	movs	r3, #0
 8006812:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8006814:	2301      	movs	r3, #1
 8006816:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800681a:	bf00      	nop
    }

    if (pclk != 0U)
 800681c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800681e:	2b00      	cmp	r3, #0
 8006820:	d021      	beq.n	8006866 <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006822:	697b      	ldr	r3, [r7, #20]
 8006824:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006826:	4a1c      	ldr	r2, [pc, #112]	@ (8006898 <UART_SetConfig+0xcd4>)
 8006828:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800682c:	461a      	mov	r2, r3
 800682e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006830:	fbb3 f2f2 	udiv	r2, r3, r2
 8006834:	697b      	ldr	r3, [r7, #20]
 8006836:	685b      	ldr	r3, [r3, #4]
 8006838:	085b      	lsrs	r3, r3, #1
 800683a:	441a      	add	r2, r3
 800683c:	697b      	ldr	r3, [r7, #20]
 800683e:	685b      	ldr	r3, [r3, #4]
 8006840:	fbb2 f3f3 	udiv	r3, r2, r3
 8006844:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006846:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006848:	2b0f      	cmp	r3, #15
 800684a:	d909      	bls.n	8006860 <UART_SetConfig+0xc9c>
 800684c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800684e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006852:	d205      	bcs.n	8006860 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006854:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006856:	b29a      	uxth	r2, r3
 8006858:	697b      	ldr	r3, [r7, #20]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	60da      	str	r2, [r3, #12]
 800685e:	e002      	b.n	8006866 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8006860:	2301      	movs	r3, #1
 8006862:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006866:	697b      	ldr	r3, [r7, #20]
 8006868:	2201      	movs	r2, #1
 800686a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800686e:	697b      	ldr	r3, [r7, #20]
 8006870:	2201      	movs	r2, #1
 8006872:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006876:	697b      	ldr	r3, [r7, #20]
 8006878:	2200      	movs	r2, #0
 800687a:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800687c:	697b      	ldr	r3, [r7, #20]
 800687e:	2200      	movs	r2, #0
 8006880:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8006882:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 8006886:	4618      	mov	r0, r3
 8006888:	3748      	adds	r7, #72	@ 0x48
 800688a:	46bd      	mov	sp, r7
 800688c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006890:	03d09000 	.word	0x03d09000
 8006894:	003d0900 	.word	0x003d0900
 8006898:	0801bb14 	.word	0x0801bb14

0800689c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800689c:	b480      	push	{r7}
 800689e:	b083      	sub	sp, #12
 80068a0:	af00      	add	r7, sp, #0
 80068a2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80068a8:	f003 0308 	and.w	r3, r3, #8
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d00a      	beq.n	80068c6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	685b      	ldr	r3, [r3, #4]
 80068b6:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	430a      	orrs	r2, r1
 80068c4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80068ca:	f003 0301 	and.w	r3, r3, #1
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d00a      	beq.n	80068e8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	685b      	ldr	r3, [r3, #4]
 80068d8:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	430a      	orrs	r2, r1
 80068e6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80068ec:	f003 0302 	and.w	r3, r3, #2
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d00a      	beq.n	800690a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	685b      	ldr	r3, [r3, #4]
 80068fa:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	430a      	orrs	r2, r1
 8006908:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800690e:	f003 0304 	and.w	r3, r3, #4
 8006912:	2b00      	cmp	r3, #0
 8006914:	d00a      	beq.n	800692c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	685b      	ldr	r3, [r3, #4]
 800691c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	430a      	orrs	r2, r1
 800692a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006930:	f003 0310 	and.w	r3, r3, #16
 8006934:	2b00      	cmp	r3, #0
 8006936:	d00a      	beq.n	800694e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	689b      	ldr	r3, [r3, #8]
 800693e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	430a      	orrs	r2, r1
 800694c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006952:	f003 0320 	and.w	r3, r3, #32
 8006956:	2b00      	cmp	r3, #0
 8006958:	d00a      	beq.n	8006970 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	689b      	ldr	r3, [r3, #8]
 8006960:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	430a      	orrs	r2, r1
 800696e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006974:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006978:	2b00      	cmp	r3, #0
 800697a:	d01a      	beq.n	80069b2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	685b      	ldr	r3, [r3, #4]
 8006982:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	430a      	orrs	r2, r1
 8006990:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006996:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800699a:	d10a      	bne.n	80069b2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	685b      	ldr	r3, [r3, #4]
 80069a2:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	430a      	orrs	r2, r1
 80069b0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80069b6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d00a      	beq.n	80069d4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	685b      	ldr	r3, [r3, #4]
 80069c4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	430a      	orrs	r2, r1
 80069d2:	605a      	str	r2, [r3, #4]
  }
}
 80069d4:	bf00      	nop
 80069d6:	370c      	adds	r7, #12
 80069d8:	46bd      	mov	sp, r7
 80069da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069de:	4770      	bx	lr

080069e0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80069e0:	b580      	push	{r7, lr}
 80069e2:	b098      	sub	sp, #96	@ 0x60
 80069e4:	af02      	add	r7, sp, #8
 80069e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	2200      	movs	r2, #0
 80069ec:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80069f0:	f7fb f9a6 	bl	8001d40 <HAL_GetTick>
 80069f4:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	f003 0308 	and.w	r3, r3, #8
 8006a00:	2b08      	cmp	r3, #8
 8006a02:	d12f      	bne.n	8006a64 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006a04:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006a08:	9300      	str	r3, [sp, #0]
 8006a0a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006a0c:	2200      	movs	r2, #0
 8006a0e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8006a12:	6878      	ldr	r0, [r7, #4]
 8006a14:	f000 f88e 	bl	8006b34 <UART_WaitOnFlagUntilTimeout>
 8006a18:	4603      	mov	r3, r0
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d022      	beq.n	8006a64 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a26:	e853 3f00 	ldrex	r3, [r3]
 8006a2a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006a2c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006a2e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006a32:	653b      	str	r3, [r7, #80]	@ 0x50
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	461a      	mov	r2, r3
 8006a3a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006a3c:	647b      	str	r3, [r7, #68]	@ 0x44
 8006a3e:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a40:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006a42:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006a44:	e841 2300 	strex	r3, r2, [r1]
 8006a48:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006a4a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d1e6      	bne.n	8006a1e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	2220      	movs	r2, #32
 8006a54:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	2200      	movs	r2, #0
 8006a5c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006a60:	2303      	movs	r3, #3
 8006a62:	e063      	b.n	8006b2c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	f003 0304 	and.w	r3, r3, #4
 8006a6e:	2b04      	cmp	r3, #4
 8006a70:	d149      	bne.n	8006b06 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006a72:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006a76:	9300      	str	r3, [sp, #0]
 8006a78:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006a7a:	2200      	movs	r2, #0
 8006a7c:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8006a80:	6878      	ldr	r0, [r7, #4]
 8006a82:	f000 f857 	bl	8006b34 <UART_WaitOnFlagUntilTimeout>
 8006a86:	4603      	mov	r3, r0
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d03c      	beq.n	8006b06 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a94:	e853 3f00 	ldrex	r3, [r3]
 8006a98:	623b      	str	r3, [r7, #32]
   return(result);
 8006a9a:	6a3b      	ldr	r3, [r7, #32]
 8006a9c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006aa0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	461a      	mov	r2, r3
 8006aa8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006aaa:	633b      	str	r3, [r7, #48]	@ 0x30
 8006aac:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006aae:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006ab0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006ab2:	e841 2300 	strex	r3, r2, [r1]
 8006ab6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006ab8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d1e6      	bne.n	8006a8c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	3308      	adds	r3, #8
 8006ac4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ac6:	693b      	ldr	r3, [r7, #16]
 8006ac8:	e853 3f00 	ldrex	r3, [r3]
 8006acc:	60fb      	str	r3, [r7, #12]
   return(result);
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	f023 0301 	bic.w	r3, r3, #1
 8006ad4:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	3308      	adds	r3, #8
 8006adc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006ade:	61fa      	str	r2, [r7, #28]
 8006ae0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ae2:	69b9      	ldr	r1, [r7, #24]
 8006ae4:	69fa      	ldr	r2, [r7, #28]
 8006ae6:	e841 2300 	strex	r3, r2, [r1]
 8006aea:	617b      	str	r3, [r7, #20]
   return(result);
 8006aec:	697b      	ldr	r3, [r7, #20]
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d1e5      	bne.n	8006abe <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	2220      	movs	r2, #32
 8006af6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	2200      	movs	r2, #0
 8006afe:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006b02:	2303      	movs	r3, #3
 8006b04:	e012      	b.n	8006b2c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	2220      	movs	r2, #32
 8006b0a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	2220      	movs	r2, #32
 8006b12:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	2200      	movs	r2, #0
 8006b1a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	2200      	movs	r2, #0
 8006b20:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	2200      	movs	r2, #0
 8006b26:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006b2a:	2300      	movs	r3, #0
}
 8006b2c:	4618      	mov	r0, r3
 8006b2e:	3758      	adds	r7, #88	@ 0x58
 8006b30:	46bd      	mov	sp, r7
 8006b32:	bd80      	pop	{r7, pc}

08006b34 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006b34:	b580      	push	{r7, lr}
 8006b36:	b084      	sub	sp, #16
 8006b38:	af00      	add	r7, sp, #0
 8006b3a:	60f8      	str	r0, [r7, #12]
 8006b3c:	60b9      	str	r1, [r7, #8]
 8006b3e:	603b      	str	r3, [r7, #0]
 8006b40:	4613      	mov	r3, r2
 8006b42:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006b44:	e04f      	b.n	8006be6 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006b46:	69bb      	ldr	r3, [r7, #24]
 8006b48:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006b4c:	d04b      	beq.n	8006be6 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006b4e:	f7fb f8f7 	bl	8001d40 <HAL_GetTick>
 8006b52:	4602      	mov	r2, r0
 8006b54:	683b      	ldr	r3, [r7, #0]
 8006b56:	1ad3      	subs	r3, r2, r3
 8006b58:	69ba      	ldr	r2, [r7, #24]
 8006b5a:	429a      	cmp	r2, r3
 8006b5c:	d302      	bcc.n	8006b64 <UART_WaitOnFlagUntilTimeout+0x30>
 8006b5e:	69bb      	ldr	r3, [r7, #24]
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	d101      	bne.n	8006b68 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006b64:	2303      	movs	r3, #3
 8006b66:	e04e      	b.n	8006c06 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	f003 0304 	and.w	r3, r3, #4
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d037      	beq.n	8006be6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8006b76:	68bb      	ldr	r3, [r7, #8]
 8006b78:	2b80      	cmp	r3, #128	@ 0x80
 8006b7a:	d034      	beq.n	8006be6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8006b7c:	68bb      	ldr	r3, [r7, #8]
 8006b7e:	2b40      	cmp	r3, #64	@ 0x40
 8006b80:	d031      	beq.n	8006be6 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	69db      	ldr	r3, [r3, #28]
 8006b88:	f003 0308 	and.w	r3, r3, #8
 8006b8c:	2b08      	cmp	r3, #8
 8006b8e:	d110      	bne.n	8006bb2 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	2208      	movs	r2, #8
 8006b96:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006b98:	68f8      	ldr	r0, [r7, #12]
 8006b9a:	f000 f839 	bl	8006c10 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	2208      	movs	r2, #8
 8006ba2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	2200      	movs	r2, #0
 8006baa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8006bae:	2301      	movs	r3, #1
 8006bb0:	e029      	b.n	8006c06 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	69db      	ldr	r3, [r3, #28]
 8006bb8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006bbc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006bc0:	d111      	bne.n	8006be6 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006bca:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006bcc:	68f8      	ldr	r0, [r7, #12]
 8006bce:	f000 f81f 	bl	8006c10 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	2220      	movs	r2, #32
 8006bd6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	2200      	movs	r2, #0
 8006bde:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8006be2:	2303      	movs	r3, #3
 8006be4:	e00f      	b.n	8006c06 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	69da      	ldr	r2, [r3, #28]
 8006bec:	68bb      	ldr	r3, [r7, #8]
 8006bee:	4013      	ands	r3, r2
 8006bf0:	68ba      	ldr	r2, [r7, #8]
 8006bf2:	429a      	cmp	r2, r3
 8006bf4:	bf0c      	ite	eq
 8006bf6:	2301      	moveq	r3, #1
 8006bf8:	2300      	movne	r3, #0
 8006bfa:	b2db      	uxtb	r3, r3
 8006bfc:	461a      	mov	r2, r3
 8006bfe:	79fb      	ldrb	r3, [r7, #7]
 8006c00:	429a      	cmp	r2, r3
 8006c02:	d0a0      	beq.n	8006b46 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006c04:	2300      	movs	r3, #0
}
 8006c06:	4618      	mov	r0, r3
 8006c08:	3710      	adds	r7, #16
 8006c0a:	46bd      	mov	sp, r7
 8006c0c:	bd80      	pop	{r7, pc}
	...

08006c10 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006c10:	b480      	push	{r7}
 8006c12:	b095      	sub	sp, #84	@ 0x54
 8006c14:	af00      	add	r7, sp, #0
 8006c16:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c1e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006c20:	e853 3f00 	ldrex	r3, [r3]
 8006c24:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006c26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c28:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006c2c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	461a      	mov	r2, r3
 8006c34:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006c36:	643b      	str	r3, [r7, #64]	@ 0x40
 8006c38:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c3a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006c3c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006c3e:	e841 2300 	strex	r3, r2, [r1]
 8006c42:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006c44:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d1e6      	bne.n	8006c18 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	3308      	adds	r3, #8
 8006c50:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c52:	6a3b      	ldr	r3, [r7, #32]
 8006c54:	e853 3f00 	ldrex	r3, [r3]
 8006c58:	61fb      	str	r3, [r7, #28]
   return(result);
 8006c5a:	69fa      	ldr	r2, [r7, #28]
 8006c5c:	4b1e      	ldr	r3, [pc, #120]	@ (8006cd8 <UART_EndRxTransfer+0xc8>)
 8006c5e:	4013      	ands	r3, r2
 8006c60:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	3308      	adds	r3, #8
 8006c68:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006c6a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006c6c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c6e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006c70:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006c72:	e841 2300 	strex	r3, r2, [r1]
 8006c76:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006c78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d1e5      	bne.n	8006c4a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006c82:	2b01      	cmp	r3, #1
 8006c84:	d118      	bne.n	8006cb8 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	e853 3f00 	ldrex	r3, [r3]
 8006c92:	60bb      	str	r3, [r7, #8]
   return(result);
 8006c94:	68bb      	ldr	r3, [r7, #8]
 8006c96:	f023 0310 	bic.w	r3, r3, #16
 8006c9a:	647b      	str	r3, [r7, #68]	@ 0x44
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	461a      	mov	r2, r3
 8006ca2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006ca4:	61bb      	str	r3, [r7, #24]
 8006ca6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ca8:	6979      	ldr	r1, [r7, #20]
 8006caa:	69ba      	ldr	r2, [r7, #24]
 8006cac:	e841 2300 	strex	r3, r2, [r1]
 8006cb0:	613b      	str	r3, [r7, #16]
   return(result);
 8006cb2:	693b      	ldr	r3, [r7, #16]
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	d1e6      	bne.n	8006c86 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	2220      	movs	r2, #32
 8006cbc:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	2200      	movs	r2, #0
 8006cc4:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	2200      	movs	r2, #0
 8006cca:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8006ccc:	bf00      	nop
 8006cce:	3754      	adds	r7, #84	@ 0x54
 8006cd0:	46bd      	mov	sp, r7
 8006cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cd6:	4770      	bx	lr
 8006cd8:	effffffe 	.word	0xeffffffe

08006cdc <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006cdc:	b480      	push	{r7}
 8006cde:	b085      	sub	sp, #20
 8006ce0:	af00      	add	r7, sp, #0
 8006ce2:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8006cea:	2b01      	cmp	r3, #1
 8006cec:	d101      	bne.n	8006cf2 <HAL_UARTEx_DisableFifoMode+0x16>
 8006cee:	2302      	movs	r3, #2
 8006cf0:	e027      	b.n	8006d42 <HAL_UARTEx_DisableFifoMode+0x66>
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	2201      	movs	r2, #1
 8006cf6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	2224      	movs	r2, #36	@ 0x24
 8006cfe:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	681a      	ldr	r2, [r3, #0]
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	f022 0201 	bic.w	r2, r2, #1
 8006d18:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8006d20:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	2200      	movs	r2, #0
 8006d26:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	68fa      	ldr	r2, [r7, #12]
 8006d2e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	2220      	movs	r2, #32
 8006d34:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	2200      	movs	r2, #0
 8006d3c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006d40:	2300      	movs	r3, #0
}
 8006d42:	4618      	mov	r0, r3
 8006d44:	3714      	adds	r7, #20
 8006d46:	46bd      	mov	sp, r7
 8006d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d4c:	4770      	bx	lr

08006d4e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006d4e:	b580      	push	{r7, lr}
 8006d50:	b084      	sub	sp, #16
 8006d52:	af00      	add	r7, sp, #0
 8006d54:	6078      	str	r0, [r7, #4]
 8006d56:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8006d5e:	2b01      	cmp	r3, #1
 8006d60:	d101      	bne.n	8006d66 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006d62:	2302      	movs	r3, #2
 8006d64:	e02d      	b.n	8006dc2 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	2201      	movs	r2, #1
 8006d6a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	2224      	movs	r2, #36	@ 0x24
 8006d72:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	681a      	ldr	r2, [r3, #0]
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	f022 0201 	bic.w	r2, r2, #1
 8006d8c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	689b      	ldr	r3, [r3, #8]
 8006d94:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	683a      	ldr	r2, [r7, #0]
 8006d9e:	430a      	orrs	r2, r1
 8006da0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006da2:	6878      	ldr	r0, [r7, #4]
 8006da4:	f000 f850 	bl	8006e48 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	68fa      	ldr	r2, [r7, #12]
 8006dae:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	2220      	movs	r2, #32
 8006db4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	2200      	movs	r2, #0
 8006dbc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006dc0:	2300      	movs	r3, #0
}
 8006dc2:	4618      	mov	r0, r3
 8006dc4:	3710      	adds	r7, #16
 8006dc6:	46bd      	mov	sp, r7
 8006dc8:	bd80      	pop	{r7, pc}

08006dca <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006dca:	b580      	push	{r7, lr}
 8006dcc:	b084      	sub	sp, #16
 8006dce:	af00      	add	r7, sp, #0
 8006dd0:	6078      	str	r0, [r7, #4]
 8006dd2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8006dda:	2b01      	cmp	r3, #1
 8006ddc:	d101      	bne.n	8006de2 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006dde:	2302      	movs	r3, #2
 8006de0:	e02d      	b.n	8006e3e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	2201      	movs	r2, #1
 8006de6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	2224      	movs	r2, #36	@ 0x24
 8006dee:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	681a      	ldr	r2, [r3, #0]
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	f022 0201 	bic.w	r2, r2, #1
 8006e08:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	689b      	ldr	r3, [r3, #8]
 8006e10:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	683a      	ldr	r2, [r7, #0]
 8006e1a:	430a      	orrs	r2, r1
 8006e1c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006e1e:	6878      	ldr	r0, [r7, #4]
 8006e20:	f000 f812 	bl	8006e48 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	68fa      	ldr	r2, [r7, #12]
 8006e2a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	2220      	movs	r2, #32
 8006e30:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	2200      	movs	r2, #0
 8006e38:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006e3c:	2300      	movs	r3, #0
}
 8006e3e:	4618      	mov	r0, r3
 8006e40:	3710      	adds	r7, #16
 8006e42:	46bd      	mov	sp, r7
 8006e44:	bd80      	pop	{r7, pc}
	...

08006e48 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006e48:	b480      	push	{r7}
 8006e4a:	b085      	sub	sp, #20
 8006e4c:	af00      	add	r7, sp, #0
 8006e4e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	d108      	bne.n	8006e6a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	2201      	movs	r2, #1
 8006e5c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	2201      	movs	r2, #1
 8006e64:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006e68:	e031      	b.n	8006ece <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8006e6a:	2310      	movs	r3, #16
 8006e6c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8006e6e:	2310      	movs	r3, #16
 8006e70:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	689b      	ldr	r3, [r3, #8]
 8006e78:	0e5b      	lsrs	r3, r3, #25
 8006e7a:	b2db      	uxtb	r3, r3
 8006e7c:	f003 0307 	and.w	r3, r3, #7
 8006e80:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	689b      	ldr	r3, [r3, #8]
 8006e88:	0f5b      	lsrs	r3, r3, #29
 8006e8a:	b2db      	uxtb	r3, r3
 8006e8c:	f003 0307 	and.w	r3, r3, #7
 8006e90:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006e92:	7bbb      	ldrb	r3, [r7, #14]
 8006e94:	7b3a      	ldrb	r2, [r7, #12]
 8006e96:	4911      	ldr	r1, [pc, #68]	@ (8006edc <UARTEx_SetNbDataToProcess+0x94>)
 8006e98:	5c8a      	ldrb	r2, [r1, r2]
 8006e9a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8006e9e:	7b3a      	ldrb	r2, [r7, #12]
 8006ea0:	490f      	ldr	r1, [pc, #60]	@ (8006ee0 <UARTEx_SetNbDataToProcess+0x98>)
 8006ea2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006ea4:	fb93 f3f2 	sdiv	r3, r3, r2
 8006ea8:	b29a      	uxth	r2, r3
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006eb0:	7bfb      	ldrb	r3, [r7, #15]
 8006eb2:	7b7a      	ldrb	r2, [r7, #13]
 8006eb4:	4909      	ldr	r1, [pc, #36]	@ (8006edc <UARTEx_SetNbDataToProcess+0x94>)
 8006eb6:	5c8a      	ldrb	r2, [r1, r2]
 8006eb8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8006ebc:	7b7a      	ldrb	r2, [r7, #13]
 8006ebe:	4908      	ldr	r1, [pc, #32]	@ (8006ee0 <UARTEx_SetNbDataToProcess+0x98>)
 8006ec0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006ec2:	fb93 f3f2 	sdiv	r3, r3, r2
 8006ec6:	b29a      	uxth	r2, r3
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8006ece:	bf00      	nop
 8006ed0:	3714      	adds	r7, #20
 8006ed2:	46bd      	mov	sp, r7
 8006ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ed8:	4770      	bx	lr
 8006eda:	bf00      	nop
 8006edc:	0801bb2c 	.word	0x0801bb2c
 8006ee0:	0801bb34 	.word	0x0801bb34

08006ee4 <memset>:
 8006ee4:	4402      	add	r2, r0
 8006ee6:	4603      	mov	r3, r0
 8006ee8:	4293      	cmp	r3, r2
 8006eea:	d100      	bne.n	8006eee <memset+0xa>
 8006eec:	4770      	bx	lr
 8006eee:	f803 1b01 	strb.w	r1, [r3], #1
 8006ef2:	e7f9      	b.n	8006ee8 <memset+0x4>

08006ef4 <__libc_init_array>:
 8006ef4:	b570      	push	{r4, r5, r6, lr}
 8006ef6:	4d0d      	ldr	r5, [pc, #52]	@ (8006f2c <__libc_init_array+0x38>)
 8006ef8:	4c0d      	ldr	r4, [pc, #52]	@ (8006f30 <__libc_init_array+0x3c>)
 8006efa:	1b64      	subs	r4, r4, r5
 8006efc:	10a4      	asrs	r4, r4, #2
 8006efe:	2600      	movs	r6, #0
 8006f00:	42a6      	cmp	r6, r4
 8006f02:	d109      	bne.n	8006f18 <__libc_init_array+0x24>
 8006f04:	4d0b      	ldr	r5, [pc, #44]	@ (8006f34 <__libc_init_array+0x40>)
 8006f06:	4c0c      	ldr	r4, [pc, #48]	@ (8006f38 <__libc_init_array+0x44>)
 8006f08:	f000 f818 	bl	8006f3c <_init>
 8006f0c:	1b64      	subs	r4, r4, r5
 8006f0e:	10a4      	asrs	r4, r4, #2
 8006f10:	2600      	movs	r6, #0
 8006f12:	42a6      	cmp	r6, r4
 8006f14:	d105      	bne.n	8006f22 <__libc_init_array+0x2e>
 8006f16:	bd70      	pop	{r4, r5, r6, pc}
 8006f18:	f855 3b04 	ldr.w	r3, [r5], #4
 8006f1c:	4798      	blx	r3
 8006f1e:	3601      	adds	r6, #1
 8006f20:	e7ee      	b.n	8006f00 <__libc_init_array+0xc>
 8006f22:	f855 3b04 	ldr.w	r3, [r5], #4
 8006f26:	4798      	blx	r3
 8006f28:	3601      	adds	r6, #1
 8006f2a:	e7f2      	b.n	8006f12 <__libc_init_array+0x1e>
 8006f2c:	0801bb44 	.word	0x0801bb44
 8006f30:	0801bb44 	.word	0x0801bb44
 8006f34:	0801bb44 	.word	0x0801bb44
 8006f38:	0801bb48 	.word	0x0801bb48

08006f3c <_init>:
 8006f3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f3e:	bf00      	nop
 8006f40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006f42:	bc08      	pop	{r3}
 8006f44:	469e      	mov	lr, r3
 8006f46:	4770      	bx	lr

08006f48 <_fini>:
 8006f48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f4a:	bf00      	nop
 8006f4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006f4e:	bc08      	pop	{r3}
 8006f50:	469e      	mov	lr, r3
 8006f52:	4770      	bx	lr
